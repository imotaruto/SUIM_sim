/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGRUBY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus)
#pragma GCC diagnostic ignored "-Wregister"
#if __GNUC__ >= 10
#pragma GCC diagnostic ignored "-Wvolatile"
#if __GNUC__ >= 11
#pragma GCC diagnostic ignored "-Wdeprecated-enum-enum-conversion"
#endif
#endif
#endif
#endif

#include <ruby.h>
#include <ruby/version.h> /* For RUBY_API_VERSION_CODE */

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 *
 * Starting with Ruby 2.7 these macros act transparently due to Ruby's moving
 * moving away from ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && RUBY_API_VERSION_CODE < 20700
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  SWIG_snprintf( buf, sizeof( buf), "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;
static ID swig_lowerthan_id = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  } else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
    swig_lowerthan_id = rb_intern("<");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  size_t klass_len = 4 + strlen(type->name) + 1;
  char *klass_name = (char *) malloc(klass_len);
  SWIG_snprintf(klass_name, klass_len, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_undef_alloc_func(rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer));
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    size_t klass_len = 4 + strlen(type->name) + 1;
    klass_name = (char *) malloc(klass_len);
    SWIG_snprintf(klass_name, klass_len, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  if (NIL_P(stype))
    return NULL;
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE)) {
    if (!RDATA(obj)->dfree)
      return SWIG_ERROR_RELEASE_NOT_OWNED;
  }

  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }

    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  if (flags & SWIG_POINTER_CLEAR) {
    DATA_PTR(obj) = 0;
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  rb_undef_alloc_func(cl);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall2( proc, swig_arity_id, 0, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_anlgeant4__BasicPrimaryGen swig_types[1]
#define SWIGTYPE_p_anlgeant4__GaussianBeamPrimaryGen swig_types[2]
#define SWIGTYPE_p_anlgeant4__Geant4Body swig_types[3]
#define SWIGTYPE_p_anlgeant4__Geant4Simple swig_types[4]
#define SWIGTYPE_p_anlgeant4__IsotropicPrimaryGen swig_types[5]
#define SWIGTYPE_p_anlgeant4__NucleusPrimaryGen swig_types[6]
#define SWIGTYPE_p_anlgeant4__NucleusPrimaryGenInVolume swig_types[7]
#define SWIGTYPE_p_anlgeant4__PlaneWavePrimaryGen swig_types[8]
#define SWIGTYPE_p_anlgeant4__PlaneWaveRectanglePrimaryGen swig_types[9]
#define SWIGTYPE_p_anlgeant4__PointSourcePrimaryGen swig_types[10]
#define SWIGTYPE_p_anlgeant4__PrimaryGenUniformSourceInVolume swig_types[11]
#define SWIGTYPE_p_anlgeant4__StandardUserActionAssembly swig_types[12]
#define SWIGTYPE_p_anlgeant4__VANLGeometry swig_types[13]
#define SWIGTYPE_p_anlgeant4__VANLPhysicsList swig_types[14]
#define SWIGTYPE_p_anlgeant4__VANLPrimaryGen swig_types[15]
#define SWIGTYPE_p_anlgeant4__VAppendableUserActionAssembly swig_types[16]
#define SWIGTYPE_p_anlgeant4__VMasterUserActionAssembly swig_types[17]
#define SWIGTYPE_p_anlgeant4__VUserActionAssembly swig_types[18]
#define SWIGTYPE_p_anlnext__BasicModule swig_types[19]
#define SWIGTYPE_p_char swig_types[20]
#define SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGen swig_types[21]
#define SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime swig_types[22]
#define SWIGTYPE_p_comptonsoft__ActivationUserActionAssembly swig_types[23]
#define SWIGTYPE_p_comptonsoft__AnalyzeDarkFrame swig_types[24]
#define SWIGTYPE_p_comptonsoft__AnalyzeFrame swig_types[25]
#define SWIGTYPE_p_comptonsoft__AnalyzeHits swig_types[26]
#define SWIGTYPE_p_comptonsoft__ApplyEPICompensation swig_types[27]
#define SWIGTYPE_p_comptonsoft__AssignG4CopyNumber swig_types[28]
#define SWIGTYPE_p_comptonsoft__AssignTime swig_types[29]
#define SWIGTYPE_p_comptonsoft__BackProjection swig_types[30]
#define SWIGTYPE_p_comptonsoft__BackProjectionSky swig_types[31]
#define SWIGTYPE_p_comptonsoft__CSHitCollection swig_types[32]
#define SWIGTYPE_p_comptonsoft__CalculatePedestalLevels swig_types[33]
#define SWIGTYPE_p_comptonsoft__ComptonEventFilter swig_types[34]
#define SWIGTYPE_p_comptonsoft__ComptonModeFilter swig_types[35]
#define SWIGTYPE_p_comptonsoft__ConstructChannelMap swig_types[36]
#define SWIGTYPE_p_comptonsoft__ConstructDetector swig_types[37]
#define SWIGTYPE_p_comptonsoft__ConstructDetectorForSimulation swig_types[38]
#define SWIGTYPE_p_comptonsoft__ConstructFrame swig_types[39]
#define SWIGTYPE_p_comptonsoft__CorrectPHA swig_types[40]
#define SWIGTYPE_p_comptonsoft__CreateRootFile swig_types[41]
#define SWIGTYPE_p_comptonsoft__DefineEventDriven swig_types[42]
#define SWIGTYPE_p_comptonsoft__DefineFrame swig_types[43]
#define SWIGTYPE_p_comptonsoft__DetectBadFrames swig_types[44]
#define SWIGTYPE_p_comptonsoft__DumpMass swig_types[45]
#define SWIGTYPE_p_comptonsoft__EfficiencyMapSky swig_types[46]
#define SWIGTYPE_p_comptonsoft__EventReconstruction swig_types[47]
#define SWIGTYPE_p_comptonsoft__EventSelection swig_types[48]
#define SWIGTYPE_p_comptonsoft__ExtractPhotoelectronTrajectory swig_types[49]
#define SWIGTYPE_p_comptonsoft__ExtractXrayEventImage swig_types[50]
#define SWIGTYPE_p_comptonsoft__FillFrame swig_types[51]
#define SWIGTYPE_p_comptonsoft__FilterByGoodTimeIntervals swig_types[52]
#define SWIGTYPE_p_comptonsoft__GetInputFilesFromDirectory swig_types[53]
#define SWIGTYPE_p_comptonsoft__HXIEventSelection swig_types[54]
#define SWIGTYPE_p_comptonsoft__Histogram2DDeltaEnergyWithARM swig_types[55]
#define SWIGTYPE_p_comptonsoft__HistogramARM swig_types[56]
#define SWIGTYPE_p_comptonsoft__HistogramARMByPositionMeasurement swig_types[57]
#define SWIGTYPE_p_comptonsoft__HistogramAzimuthAngle swig_types[58]
#define SWIGTYPE_p_comptonsoft__HistogramDecodedImage swig_types[59]
#define SWIGTYPE_p_comptonsoft__HistogramEnergy1D swig_types[60]
#define SWIGTYPE_p_comptonsoft__HistogramEnergy2D swig_types[61]
#define SWIGTYPE_p_comptonsoft__HistogramEnergySpectrum swig_types[62]
#define SWIGTYPE_p_comptonsoft__HistogramFramePedestal swig_types[63]
#define SWIGTYPE_p_comptonsoft__HistogramPHA swig_types[64]
#define SWIGTYPE_p_comptonsoft__HistogramRawFrameImage swig_types[65]
#define SWIGTYPE_p_comptonsoft__HistogramXrayEventAzimuthAngle swig_types[66]
#define SWIGTYPE_p_comptonsoft__HistogramXrayEventProperties swig_types[67]
#define SWIGTYPE_p_comptonsoft__HistogramXrayEventSpectrum swig_types[68]
#define SWIGTYPE_p_comptonsoft__InitialConditionFilter swig_types[69]
#define SWIGTYPE_p_comptonsoft__InitialParticleTree swig_types[70]
#define SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess swig_types[71]
#define SWIGTYPE_p_comptonsoft__ListPrimaryGen swig_types[72]
#define SWIGTYPE_p_comptonsoft__LoadFrame swig_types[73]
#define SWIGTYPE_p_comptonsoft__LoadReducedFrame swig_types[74]
#define SWIGTYPE_p_comptonsoft__LoadRootFrame swig_types[75]
#define SWIGTYPE_p_comptonsoft__MakeDetectorHits swig_types[76]
#define SWIGTYPE_p_comptonsoft__MakeDetectorHitsWithTimingProcess swig_types[77]
#define SWIGTYPE_p_comptonsoft__MakeRawHits swig_types[78]
#define SWIGTYPE_p_comptonsoft__ObservationPickUpData swig_types[79]
#define SWIGTYPE_p_comptonsoft__PatternGenerator swig_types[80]
#define SWIGTYPE_p_comptonsoft__PhysicsListManager swig_types[81]
#define SWIGTYPE_p_comptonsoft__ProcessCodedAperture swig_types[82]
#define SWIGTYPE_p_comptonsoft__QuickAnalysisForDSD swig_types[83]
#define SWIGTYPE_p_comptonsoft__RIDecayCalculation swig_types[84]
#define SWIGTYPE_p_comptonsoft__RadioactiveDecayUserActionAssembly swig_types[85]
#define SWIGTYPE_p_comptonsoft__ReadComptonEventTree swig_types[86]
#define SWIGTYPE_p_comptonsoft__ReadDataFile swig_types[87]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_NB0 swig_types[88]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_NT swig_types[89]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_SpW2 swig_types[90]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_VME3 swig_types[91]
#define SWIGTYPE_p_comptonsoft__ReadEventTree swig_types[92]
#define SWIGTYPE_p_comptonsoft__ReadEventTreeAsDetectorHits swig_types[93]
#define SWIGTYPE_p_comptonsoft__ReadEventTreeAsRawHits swig_types[94]
#define SWIGTYPE_p_comptonsoft__ReadHitTree swig_types[95]
#define SWIGTYPE_p_comptonsoft__ReadHitTreeAsDetectorHits swig_types[96]
#define SWIGTYPE_p_comptonsoft__ReadHitTreeAsRawHits swig_types[97]
#define SWIGTYPE_p_comptonsoft__ReadXrayEventTree swig_types[98]
#define SWIGTYPE_p_comptonsoft__RecalculateEPI swig_types[99]
#define SWIGTYPE_p_comptonsoft__RecalculateSimulationNoise swig_types[100]
#define SWIGTYPE_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered swig_types[101]
#define SWIGTYPE_p_comptonsoft__ResponseMatrix swig_types[102]
#define SWIGTYPE_p_comptonsoft__SampleOpticalDepth swig_types[103]
#define SWIGTYPE_p_comptonsoft__SaveData swig_types[104]
#define SWIGTYPE_p_comptonsoft__ScatteringPickUpData swig_types[105]
#define SWIGTYPE_p_comptonsoft__SelectEventsOnFocalPlane swig_types[106]
#define SWIGTYPE_p_comptonsoft__SelectEventsWithDetectorSpectrum swig_types[107]
#define SWIGTYPE_p_comptonsoft__SelectFullDeposit swig_types[108]
#define SWIGTYPE_p_comptonsoft__SelectHits swig_types[109]
#define SWIGTYPE_p_comptonsoft__SelectTime swig_types[110]
#define SWIGTYPE_p_comptonsoft__SetBadChannels swig_types[111]
#define SWIGTYPE_p_comptonsoft__SetBadFrames swig_types[112]
#define SWIGTYPE_p_comptonsoft__SetChannelProperties swig_types[113]
#define SWIGTYPE_p_comptonsoft__SetDynamicPedestals swig_types[114]
#define SWIGTYPE_p_comptonsoft__SetNoiseLevels swig_types[115]
#define SWIGTYPE_p_comptonsoft__SetPedestalsByMedian swig_types[116]
#define SWIGTYPE_p_comptonsoft__SimulateCXBShieldPlate swig_types[117]
#define SWIGTYPE_p_comptonsoft__SortEventTreeWithTime swig_types[118]
#define SWIGTYPE_p_comptonsoft__UniformlyRandomizeEPI swig_types[119]
#define SWIGTYPE_p_comptonsoft__VCSModule swig_types[120]
#define SWIGTYPE_p_comptonsoft__WeightByInitialDirection swig_types[121]
#define SWIGTYPE_p_comptonsoft__Write3x3EventTree swig_types[122]
#define SWIGTYPE_p_comptonsoft__WriteBadPixels swig_types[123]
#define SWIGTYPE_p_comptonsoft__WriteComptonEventTree swig_types[124]
#define SWIGTYPE_p_comptonsoft__WriteEventTree swig_types[125]
#define SWIGTYPE_p_comptonsoft__WriteHitTree swig_types[126]
#define SWIGTYPE_p_comptonsoft__WriteObservationTree swig_types[127]
#define SWIGTYPE_p_comptonsoft__WriteXrayEventTree swig_types[128]
#define SWIGTYPE_p_comptonsoft__XrayEventCollection swig_types[129]
#define SWIGTYPE_p_comptonsoft__XrayEventSelection swig_types[130]
#define SWIGTYPE_p_difference_type swig_types[131]
#define SWIGTYPE_p_first_type swig_types[132]
#define SWIGTYPE_p_int swig_types[133]
#define SWIGTYPE_p_long_long swig_types[134]
#define SWIGTYPE_p_second_type swig_types[135]
#define SWIGTYPE_p_short swig_types[136]
#define SWIGTYPE_p_signed_char swig_types[137]
#define SWIGTYPE_p_size_type swig_types[138]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t swig_types[139]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator swig_types[140]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator swig_types[141]
#define SWIGTYPE_p_std__shared_ptrT_anlnext__VModuleParameter_t swig_types[142]
#define SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t swig_types[143]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_long_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_value_type swig_types[149]
static swig_type_info *swig_types[151];
static swig_module_info swig_module = {swig_types, 150, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_comptonSoft
#define SWIG_name    "ComptonSoft"

static VALUE mComptonSoft;

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "ConstructDetector.hh"
#include "ConstructDetectorForSimulation.hh"
#include "VCSModule.hh"
#include "CSHitCollection.hh"
#include "PatternGenerator.hh"
#include "ConstructChannelMap.hh"
#include "SetNoiseLevels.hh"
#include "SetBadChannels.hh"
#include "SetChannelProperties.hh"
#include "SelectHits.hh"
#include "AnalyzeHits.hh"
#include "MakeDetectorHits.hh"
#include "MakeRawHits.hh"
#include "MakeDetectorHitsWithTimingProcess.hh"
#include "ApplyEPICompensation.hh"
#include "EventSelection.hh"
#include "EventReconstruction.hh"
#include "HXIEventSelection.hh"
#include "CreateRootFile.hh"
#include "SaveData.hh"
#include "ReadDataFile.hh"
#include "ReadDataFile_VME3.hh"
#include "ReadDataFile_SpW2.hh"
#include "ReadDataFile_NT.hh"
#include "ReadDataFile_NB0.hh"
#include "CorrectPHA.hh"
#include "RecalculateEPI.hh"
#include "CalculatePedestalLevels.hh"
#include "InitialConditionFilter.hh"
#include "WeightByInitialDirection.hh"
#include "RecalculateSimulationNoise.hh"
#include "ComptonModeFilter.hh"
#include "SelectFullDeposit.hh"
#include "ComptonEventFilter.hh"
#include "SelectEventsOnFocalPlane.hh"
#include "SelectTime.hh"
#include "FilterByGoodTimeIntervals.hh"
#include "WriteHitTree.hh"
#include "ReadHitTree.hh"
#include "ReadHitTreeAsRawHits.hh"
#include "ReadHitTreeAsDetectorHits.hh"
#include "WriteEventTree.hh"
#include "Write3x3EventTree.hh"
#include "ReadEventTree.hh"
#include "ReadEventTreeAsRawHits.hh"
#include "ReadEventTreeAsDetectorHits.hh"
#include "WriteComptonEventTree.hh"
#include "ReadComptonEventTree.hh"
#include "HistogramPHA.hh"
#include "HistogramEnergySpectrum.hh"
#include "HistogramEnergy1D.hh"
#include "HistogramEnergy2D.hh"
#include "HistogramARM.hh"
#include "HistogramARMByPositionMeasurement.hh"
#include "HistogramAzimuthAngle.hh"
#include "Histogram2DDeltaEnergyWithARM.hh"
#include "ResponseMatrix.hh"
#include "BackProjection.hh"
#include "BackProjectionSky.hh"
#include "EfficiencyMapSky.hh"
#include "QuickAnalysisForDSD.hh"
#include "AssignTime.hh"
#include "DefineFrame.hh"
#include "DefineEventDriven.hh"
#ifdef USE_FITSIO
#include "MakeFrameFITS.hh"
#endif
#include "ConstructFrame.hh"
#ifdef USE_FITSIO
#include "ConstructSXIFrame.hh"
#endif
#include "FillFrame.hh"
#include "LoadFrame.hh"
#include "LoadReducedFrame.hh"
#include "XrayEventCollection.hh"
#include "XrayEventSelection.hh"
#include "AnalyzeFrame.hh"
#include "WriteXrayEventTree.hh"
#include "ReadXrayEventTree.hh"
#include "SortEventTreeWithTime.hh"
#ifdef USE_FITSIO
#include "SetPedestals.hh"
#endif
#ifdef USE_FITSIO
#include "WritePedestals.hh"
#endif
#include "WriteBadPixels.hh"
#include "AnalyzeDarkFrame.hh"
#include "LoadRootFrame.hh"
#include "DetectBadFrames.hh"
#include "SetBadFrames.hh"
#include "SetDynamicPedestals.hh"
#include "SetPedestalsByMedian.hh"
#include "HistogramFramePedestal.hh"
#include "HistogramXrayEventSpectrum.hh"
#include "HistogramXrayEventAzimuthAngle.hh"
#include "HistogramXrayEventProperties.hh"
#include "HistogramDecodedImage.hh"
#include "HistogramRawFrameImage.hh"
#include "ExtractXrayEventImage.hh"
#include "ProcessCodedAperture.hh"
#ifdef USE_HSQUICKLOOK
#include "PushToQuickLookDB.hh"
#endif
#ifdef USE_HSQUICKLOOK
#include "PushXrayEventToQuickLookDB.hh"
#endif
#ifdef USE_HSQUICKLOOK
#include "PushHistogramToQuickLookDB.hh"
#endif
#ifdef USE_HSQUICKLOOK
#include "LoadMetaDataFile.hh"
#endif
#ifdef USE_HSQUICKLOOK
#include "ExtractXrayEventImageFromQuickLookDB.hh"
#endif
#include "GetInputFilesFromDirectory.hh"
#include "SelectEventsWithDetectorSpectrum.hh"
#ifdef USE_FITSIO
#include "AssignSXIGrade.hh"
#endif
#ifdef USE_FITSIO
#include "AEAttitudeCorrection.hh"
#endif
#ifdef USE_FITSIO
#include "SelectEventsWithCelestialSpectrum.hh"
#endif
#ifdef USE_FITSIO
#include "AEAssignWeightWithResponseMatrix.hh"
#endif
#include "ExtractPhotoelectronTrajectory.hh"
#ifdef USE_FITSIO
#include "AHRayTracingPrimaryGen.hh"
#endif
#include "ListPrimaryGen.hh"
#ifdef USE_SIMX
#include "SimXPrimaryGen.hh"
#endif
#include "AHRadiationBackgroundPrimaryGen.hh"
#include "AHRadiationBackgroundPrimaryGenSelectExposureTime.hh"
#ifdef USE_FITSIO
#include "AEObservationPrimaryGen.hh"
#endif
#ifdef USE_FITSIO
#include "CelestialSourcePrimaryGen.hh"
#endif
#ifdef USE_HEALPIX
#include "AllSkyPrimaryGen.hh"
#endif
#include "RadioactiveDecayUserActionAssembly.hh"
#include "ActivationUserActionAssembly.hh"
#ifdef USE_SIMX
#include "AHStandardUserActionAssembly.hh"
#endif
#include "SampleOpticalDepth.hh"
#include "ScatteringPickUpData.hh"
#include "ObservationPickUpData.hh"
#include "PhysicsListManager.hh"
#ifdef USE_SIMX
#include "SimXIF.hh"
#endif
#ifdef USE_SIMX
#include "GenerateSimXEvent.hh"
#endif
#ifdef USE_SIMX
#include "OutputSimXPrimaries.hh"
#endif
#include "AssignG4CopyNumber.hh"
#include "InitialParticleTree.hh"
#include "DumpMass.hh"
#include "WriteObservationTree.hh"
#include "SimulateCXBShieldPlate.hh"
#include "RescaleSimulationNoiseOfSGDSiUntriggered.hh"
#include "UniformlyRandomizeEPI.hh"
#ifdef USE_FITSIO
#include "ReadSGDEventFITS.hh"
#endif
#ifdef USE_FITSIO
#include "WriteSGDEventFITS.hh"
#endif
#ifdef USE_FITSIO
#include "ReadHXIEventFITS.hh"
#endif
#ifdef USE_FITSIO
#include "WriteHXIEventFITS.hh"
#endif
#ifdef USE_FITSIO
#include "FilterByGoodTimeIntervalsForSGD.hh"
#endif
#ifdef USE_FITSIO
#include "FilterByGoodTimeIntervalsForHXI.hh"
#endif

#include "class_list_anlGeant4.hh"
#include "comptonsoft_basic_classes.hh"



#include <csignal>
#include <cstring>
#include <iostream>
#include "RIDecayCalculation.hh"
#include "IsotopeDatabaseAccess.hh"


#include <string>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/usr/local/Cellar/swig/4.2.1/share/swig/4.2.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


/*@SWIG:/usr/local/Cellar/swig/4.2.1/share/swig/4.2.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


/*@SWIG:/usr/local/Cellar/swig/4.2.1/share/swig/4.2.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (rb_funcall(obj, swig_lowerthan_id, 1, INT2FIX(0)) != Qfalse)
        return SWIG_OverflowError;
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
/*@SWIG:/usr/local/Cellar/swig/4.2.1/share/swig/4.2.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULL(obj) : rb_big2ull(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (VALUE obj, unsigned long long *val)
{ 
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2ULL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (rb_funcall(obj, swig_lowerthan_id, 1, INT2FIX(0)) != Qfalse)
        return SWIG_OverflowError;
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN bool comptonsoft_RIDecayCalculation_run(comptonsoft::RIDecayCalculation *self){
      if (self->initialize()) {
        struct sigaction sa;
        struct sigaction sa_org;
        std::memset(&sa, 0, sizeof(sa));
        std::memset(&sa_org, 0, sizeof(sa_org));
        sa.sa_handler = SIG_DFL;
        sa.sa_flags |= SA_RESTART;
        if ( sigaction(SIGINT, &sa, &sa_org) != 0 ) {
          std::cout << "sigaction(2) error!" << std::endl;
          return false;
        }
      
        self->perform();
        self->output();

        if ( sigaction(SIGINT, &sa_org, 0) != 0 ) {
          std::cout << "sigaction(2) error!" << std::endl;
          return false;
        }
        
        return true;
      }

      return false;
    }

SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

static swig_class SwigClassRIDecayCalculation;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RIDecayCalculation_allocate(VALUE self)
#else
_wrap_RIDecayCalculation_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__RIDecayCalculation);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RIDecayCalculation(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::RIDecayCalculation *)new comptonsoft::RIDecayCalculation();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_RIDecayCalculation(void *self) {
    comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_RIDecayCalculation_setVerboseLevel(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setVerboseLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setVerboseLevel", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setVerboseLevel(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setInputFiles(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setInputFiles", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setInputFiles", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setInputFiles", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::string const &","setInputFiles", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setInputFiles", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  (arg1)->setInputFiles((std::string const &)*arg2,(std::string const &)*arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setMeasurementTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setMeasurementTime", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setMeasurementTime", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setMeasurementTime(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_MeasurememtTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","MeasurememtTime", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->MeasurememtTime();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_addMeasurementWindow(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","addMeasurementWindow", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","addMeasurementWindow", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","addMeasurementWindow", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->addMeasurementWindow(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_clearMeasurememtWindows(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","clearMeasurememtWindows", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  (arg1)->clearMeasurememtWindows();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_getStartingTimeOfWindow(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","getStartingTimeOfWindow", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::size_t","getStartingTimeOfWindow", 2, argv[0] ));
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->getStartingTimeOfWindow(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_getEndingTimeOfWindow(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","getEndingTimeOfWindow", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::size_t","getEndingTimeOfWindow", 2, argv[0] ));
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->getEndingTimeOfWindow(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setCountThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setCountThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCountThreshold", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setCountThreshold(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_CountThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","CountThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->CountThreshold();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setDecayConstantThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setDecayConstantThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDecayConstantThreshold", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setDecayConstantThreshold(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_DecayConstantThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","DecayConstantThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->DecayConstantThreshold();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setBranchingRatioThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setBranchingRatioThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setBranchingRatioThreshold", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setBranchingRatioThreshold(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_BranchingRatioThreshold(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation const *","BranchingRatioThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  result = (double)((comptonsoft::RIDecayCalculation const *)arg1)->BranchingRatioThreshold();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_setOutputFile(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","setOutputFile", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","setOutputFile", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","setOutputFile", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->setOutputFile((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RIDecayCalculation_run(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RIDecayCalculation *arg1 = (comptonsoft::RIDecayCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__RIDecayCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::RIDecayCalculation *","run", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::RIDecayCalculation * >(argp1);
  result = (bool)comptonsoft_RIDecayCalculation_run(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassIsotopeDatabaseAccess;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_IsotopeDatabaseAccess_allocate(VALUE self)
#else
_wrap_IsotopeDatabaseAccess_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_IsotopeDatabaseAccess(int argc, VALUE *argv, VALUE self) {
  comptonsoft::IsotopeDatabaseAccess *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::IsotopeDatabaseAccess *)new comptonsoft::IsotopeDatabaseAccess();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_IsotopeDatabaseAccess(void *self) {
    comptonsoft::IsotopeDatabaseAccess *arg1 = (comptonsoft::IsotopeDatabaseAccess *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IsotopeDatabaseAccess_initialize_data(int argc, VALUE *argv, VALUE self) {
  comptonsoft::IsotopeDatabaseAccess *arg1 = (comptonsoft::IsotopeDatabaseAccess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::IsotopeDatabaseAccess *","initialize_data", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::IsotopeDatabaseAccess * >(argp1);
  (arg1)->initialize_data();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IsotopeDatabaseAccess_retrive_isotope(int argc, VALUE *argv, VALUE self) {
  comptonsoft::IsotopeDatabaseAccess *arg1 = (comptonsoft::IsotopeDatabaseAccess *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::IsotopeDatabaseAccess *","retrive_isotope", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::IsotopeDatabaseAccess * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","retrive_isotope", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","retrive_isotope", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","retrive_isotope", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->retrive_isotope(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IsotopeDatabaseAccess_get_lifetime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::IsotopeDatabaseAccess *arg1 = (comptonsoft::IsotopeDatabaseAccess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::IsotopeDatabaseAccess const *","get_lifetime", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::IsotopeDatabaseAccess * >(argp1);
  result = (double)((comptonsoft::IsotopeDatabaseAccess const *)arg1)->get_lifetime();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IsotopeDatabaseAccess_get_halflife(int argc, VALUE *argv, VALUE self) {
  comptonsoft::IsotopeDatabaseAccess *arg1 = (comptonsoft::IsotopeDatabaseAccess *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::IsotopeDatabaseAccess const *","get_halflife", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::IsotopeDatabaseAccess * >(argp1);
  result = (double)((comptonsoft::IsotopeDatabaseAccess const *)arg1)->get_halflife();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstructDetector;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ConstructDetector_allocate(VALUE self)
#else
_wrap_ConstructDetector_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ConstructDetector);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ConstructDetector(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ConstructDetector *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ConstructDetector *)new comptonsoft::ConstructDetector();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ConstructDetector(void *self) {
    comptonsoft::ConstructDetector *arg1 = (comptonsoft::ConstructDetector *)self;
    delete arg1;
}

static swig_class SwigClassConstructDetectorForSimulation;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ConstructDetectorForSimulation_allocate(VALUE self)
#else
_wrap_ConstructDetectorForSimulation_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ConstructDetectorForSimulation);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ConstructDetectorForSimulation(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ConstructDetectorForSimulation *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ConstructDetectorForSimulation *)new comptonsoft::ConstructDetectorForSimulation();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ConstructDetectorForSimulation(void *self) {
    comptonsoft::ConstructDetectorForSimulation *arg1 = (comptonsoft::ConstructDetectorForSimulation *)self;
    delete arg1;
}

static swig_class SwigClassVCSModule;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_VCSModule_allocate(VALUE self)
#else
_wrap_VCSModule_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__VCSModule);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_VCSModule(int argc, VALUE *argv, VALUE self) {
  comptonsoft::VCSModule *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::VCSModule *)new comptonsoft::VCSModule();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_VCSModule(void *self) {
    comptonsoft::VCSModule *arg1 = (comptonsoft::VCSModule *)self;
    delete arg1;
}

static swig_class SwigClassCSHitCollection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CSHitCollection_allocate(VALUE self)
#else
_wrap_CSHitCollection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__CSHitCollection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CSHitCollection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::CSHitCollection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::CSHitCollection *)new comptonsoft::CSHitCollection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_CSHitCollection(void *self) {
    comptonsoft::CSHitCollection *arg1 = (comptonsoft::CSHitCollection *)self;
    delete arg1;
}

static swig_class SwigClassPatternGenerator;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PatternGenerator_allocate(VALUE self)
#else
_wrap_PatternGenerator_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__PatternGenerator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PatternGenerator(int argc, VALUE *argv, VALUE self) {
  comptonsoft::PatternGenerator *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::PatternGenerator *)new comptonsoft::PatternGenerator();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_PatternGenerator(void *self) {
    comptonsoft::PatternGenerator *arg1 = (comptonsoft::PatternGenerator *)self;
    delete arg1;
}

static swig_class SwigClassConstructChannelMap;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ConstructChannelMap_allocate(VALUE self)
#else
_wrap_ConstructChannelMap_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ConstructChannelMap);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ConstructChannelMap(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ConstructChannelMap *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ConstructChannelMap *)new comptonsoft::ConstructChannelMap();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ConstructChannelMap(void *self) {
    comptonsoft::ConstructChannelMap *arg1 = (comptonsoft::ConstructChannelMap *)self;
    delete arg1;
}

static swig_class SwigClassSetNoiseLevels;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetNoiseLevels_allocate(VALUE self)
#else
_wrap_SetNoiseLevels_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetNoiseLevels);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetNoiseLevels(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetNoiseLevels *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetNoiseLevels *)new comptonsoft::SetNoiseLevels();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetNoiseLevels(void *self) {
    comptonsoft::SetNoiseLevels *arg1 = (comptonsoft::SetNoiseLevels *)self;
    delete arg1;
}

static swig_class SwigClassSetBadChannels;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetBadChannels_allocate(VALUE self)
#else
_wrap_SetBadChannels_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetBadChannels);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetBadChannels(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetBadChannels *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetBadChannels *)new comptonsoft::SetBadChannels();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetBadChannels(void *self) {
    comptonsoft::SetBadChannels *arg1 = (comptonsoft::SetBadChannels *)self;
    delete arg1;
}

static swig_class SwigClassSetChannelProperties;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetChannelProperties_allocate(VALUE self)
#else
_wrap_SetChannelProperties_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetChannelProperties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetChannelProperties(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetChannelProperties *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetChannelProperties *)new comptonsoft::SetChannelProperties();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetChannelProperties(void *self) {
    comptonsoft::SetChannelProperties *arg1 = (comptonsoft::SetChannelProperties *)self;
    delete arg1;
}

static swig_class SwigClassSelectHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SelectHits_allocate(VALUE self)
#else
_wrap_SelectHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SelectHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SelectHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SelectHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SelectHits *)new comptonsoft::SelectHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SelectHits(void *self) {
    comptonsoft::SelectHits *arg1 = (comptonsoft::SelectHits *)self;
    delete arg1;
}

static swig_class SwigClassAnalyzeHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AnalyzeHits_allocate(VALUE self)
#else
_wrap_AnalyzeHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AnalyzeHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AnalyzeHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AnalyzeHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AnalyzeHits *)new comptonsoft::AnalyzeHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AnalyzeHits(void *self) {
    comptonsoft::AnalyzeHits *arg1 = (comptonsoft::AnalyzeHits *)self;
    delete arg1;
}

static swig_class SwigClassMakeDetectorHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MakeDetectorHits_allocate(VALUE self)
#else
_wrap_MakeDetectorHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__MakeDetectorHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MakeDetectorHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::MakeDetectorHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::MakeDetectorHits *)new comptonsoft::MakeDetectorHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_MakeDetectorHits(void *self) {
    comptonsoft::MakeDetectorHits *arg1 = (comptonsoft::MakeDetectorHits *)self;
    delete arg1;
}

static swig_class SwigClassMakeRawHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MakeRawHits_allocate(VALUE self)
#else
_wrap_MakeRawHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__MakeRawHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MakeRawHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::MakeRawHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::MakeRawHits *)new comptonsoft::MakeRawHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_MakeRawHits(void *self) {
    comptonsoft::MakeRawHits *arg1 = (comptonsoft::MakeRawHits *)self;
    delete arg1;
}

static swig_class SwigClassMakeDetectorHitsWithTimingProcess;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_MakeDetectorHitsWithTimingProcess_allocate(VALUE self)
#else
_wrap_MakeDetectorHitsWithTimingProcess_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__MakeDetectorHitsWithTimingProcess);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_MakeDetectorHitsWithTimingProcess(int argc, VALUE *argv, VALUE self) {
  comptonsoft::MakeDetectorHitsWithTimingProcess *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::MakeDetectorHitsWithTimingProcess *)new comptonsoft::MakeDetectorHitsWithTimingProcess();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_MakeDetectorHitsWithTimingProcess(void *self) {
    comptonsoft::MakeDetectorHitsWithTimingProcess *arg1 = (comptonsoft::MakeDetectorHitsWithTimingProcess *)self;
    delete arg1;
}

static swig_class SwigClassApplyEPICompensation;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ApplyEPICompensation_allocate(VALUE self)
#else
_wrap_ApplyEPICompensation_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ApplyEPICompensation);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ApplyEPICompensation(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ApplyEPICompensation *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ApplyEPICompensation *)new comptonsoft::ApplyEPICompensation();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ApplyEPICompensation(void *self) {
    comptonsoft::ApplyEPICompensation *arg1 = (comptonsoft::ApplyEPICompensation *)self;
    delete arg1;
}

static swig_class SwigClassEventSelection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_EventSelection_allocate(VALUE self)
#else
_wrap_EventSelection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__EventSelection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_EventSelection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::EventSelection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::EventSelection *)new comptonsoft::EventSelection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_EventSelection(void *self) {
    comptonsoft::EventSelection *arg1 = (comptonsoft::EventSelection *)self;
    delete arg1;
}

static swig_class SwigClassEventReconstruction;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_EventReconstruction_allocate(VALUE self)
#else
_wrap_EventReconstruction_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__EventReconstruction);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_EventReconstruction(int argc, VALUE *argv, VALUE self) {
  comptonsoft::EventReconstruction *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::EventReconstruction *)new comptonsoft::EventReconstruction();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_EventReconstruction(void *self) {
    comptonsoft::EventReconstruction *arg1 = (comptonsoft::EventReconstruction *)self;
    delete arg1;
}

static swig_class SwigClassHXIEventSelection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HXIEventSelection_allocate(VALUE self)
#else
_wrap_HXIEventSelection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HXIEventSelection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HXIEventSelection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HXIEventSelection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HXIEventSelection *)new comptonsoft::HXIEventSelection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HXIEventSelection(void *self) {
    comptonsoft::HXIEventSelection *arg1 = (comptonsoft::HXIEventSelection *)self;
    delete arg1;
}

static swig_class SwigClassCreateRootFile;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CreateRootFile_allocate(VALUE self)
#else
_wrap_CreateRootFile_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__CreateRootFile);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CreateRootFile(int argc, VALUE *argv, VALUE self) {
  comptonsoft::CreateRootFile *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::CreateRootFile *)new comptonsoft::CreateRootFile();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_CreateRootFile(void *self) {
    comptonsoft::CreateRootFile *arg1 = (comptonsoft::CreateRootFile *)self;
    delete arg1;
}

static swig_class SwigClassSaveData;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SaveData_allocate(VALUE self)
#else
_wrap_SaveData_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SaveData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SaveData(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SaveData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SaveData *)new comptonsoft::SaveData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SaveData(void *self) {
    comptonsoft::SaveData *arg1 = (comptonsoft::SaveData *)self;
    delete arg1;
}

static swig_class SwigClassReadDataFile;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadDataFile_allocate(VALUE self)
#else
_wrap_ReadDataFile_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadDataFile);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadDataFile(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadDataFile *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadDataFile *)new comptonsoft::ReadDataFile();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadDataFile(void *self) {
    comptonsoft::ReadDataFile *arg1 = (comptonsoft::ReadDataFile *)self;
    delete arg1;
}

static swig_class SwigClassReadDataFile_VME3;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadDataFile_VME3_allocate(VALUE self)
#else
_wrap_ReadDataFile_VME3_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadDataFile_VME3);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadDataFile_VME3(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadDataFile_VME3 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadDataFile_VME3 *)new comptonsoft::ReadDataFile_VME3();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadDataFile_VME3(void *self) {
    comptonsoft::ReadDataFile_VME3 *arg1 = (comptonsoft::ReadDataFile_VME3 *)self;
    delete arg1;
}

static swig_class SwigClassReadDataFile_SpW2;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadDataFile_SpW2_allocate(VALUE self)
#else
_wrap_ReadDataFile_SpW2_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadDataFile_SpW2);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadDataFile_SpW2(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadDataFile_SpW2 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadDataFile_SpW2 *)new comptonsoft::ReadDataFile_SpW2();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadDataFile_SpW2(void *self) {
    comptonsoft::ReadDataFile_SpW2 *arg1 = (comptonsoft::ReadDataFile_SpW2 *)self;
    delete arg1;
}

static swig_class SwigClassReadDataFile_NT;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadDataFile_NT_allocate(VALUE self)
#else
_wrap_ReadDataFile_NT_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadDataFile_NT);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadDataFile_NT(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadDataFile_NT *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadDataFile_NT *)new comptonsoft::ReadDataFile_NT();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadDataFile_NT(void *self) {
    comptonsoft::ReadDataFile_NT *arg1 = (comptonsoft::ReadDataFile_NT *)self;
    delete arg1;
}

static swig_class SwigClassReadDataFile_NB0;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadDataFile_NB0_allocate(VALUE self)
#else
_wrap_ReadDataFile_NB0_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadDataFile_NB0);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadDataFile_NB0(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadDataFile_NB0 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadDataFile_NB0 *)new comptonsoft::ReadDataFile_NB0();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadDataFile_NB0(void *self) {
    comptonsoft::ReadDataFile_NB0 *arg1 = (comptonsoft::ReadDataFile_NB0 *)self;
    delete arg1;
}

static swig_class SwigClassCorrectPHA;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CorrectPHA_allocate(VALUE self)
#else
_wrap_CorrectPHA_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__CorrectPHA);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CorrectPHA(int argc, VALUE *argv, VALUE self) {
  comptonsoft::CorrectPHA *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::CorrectPHA *)new comptonsoft::CorrectPHA();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_CorrectPHA(void *self) {
    comptonsoft::CorrectPHA *arg1 = (comptonsoft::CorrectPHA *)self;
    delete arg1;
}

static swig_class SwigClassRecalculateEPI;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RecalculateEPI_allocate(VALUE self)
#else
_wrap_RecalculateEPI_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__RecalculateEPI);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RecalculateEPI(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RecalculateEPI *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::RecalculateEPI *)new comptonsoft::RecalculateEPI();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_RecalculateEPI(void *self) {
    comptonsoft::RecalculateEPI *arg1 = (comptonsoft::RecalculateEPI *)self;
    delete arg1;
}

static swig_class SwigClassCalculatePedestalLevels;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_CalculatePedestalLevels_allocate(VALUE self)
#else
_wrap_CalculatePedestalLevels_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__CalculatePedestalLevels);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_CalculatePedestalLevels(int argc, VALUE *argv, VALUE self) {
  comptonsoft::CalculatePedestalLevels *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::CalculatePedestalLevels *)new comptonsoft::CalculatePedestalLevels();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_CalculatePedestalLevels(void *self) {
    comptonsoft::CalculatePedestalLevels *arg1 = (comptonsoft::CalculatePedestalLevels *)self;
    delete arg1;
}

static swig_class SwigClassInitialConditionFilter;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_InitialConditionFilter_allocate(VALUE self)
#else
_wrap_InitialConditionFilter_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__InitialConditionFilter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_InitialConditionFilter(int argc, VALUE *argv, VALUE self) {
  comptonsoft::InitialConditionFilter *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::InitialConditionFilter *)new comptonsoft::InitialConditionFilter();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_InitialConditionFilter(void *self) {
    comptonsoft::InitialConditionFilter *arg1 = (comptonsoft::InitialConditionFilter *)self;
    delete arg1;
}

static swig_class SwigClassWeightByInitialDirection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WeightByInitialDirection_allocate(VALUE self)
#else
_wrap_WeightByInitialDirection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WeightByInitialDirection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WeightByInitialDirection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WeightByInitialDirection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WeightByInitialDirection *)new comptonsoft::WeightByInitialDirection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WeightByInitialDirection(void *self) {
    comptonsoft::WeightByInitialDirection *arg1 = (comptonsoft::WeightByInitialDirection *)self;
    delete arg1;
}

static swig_class SwigClassRecalculateSimulationNoise;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RecalculateSimulationNoise_allocate(VALUE self)
#else
_wrap_RecalculateSimulationNoise_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__RecalculateSimulationNoise);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RecalculateSimulationNoise(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RecalculateSimulationNoise *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::RecalculateSimulationNoise *)new comptonsoft::RecalculateSimulationNoise();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_RecalculateSimulationNoise(void *self) {
    comptonsoft::RecalculateSimulationNoise *arg1 = (comptonsoft::RecalculateSimulationNoise *)self;
    delete arg1;
}

static swig_class SwigClassComptonModeFilter;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ComptonModeFilter_allocate(VALUE self)
#else
_wrap_ComptonModeFilter_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ComptonModeFilter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ComptonModeFilter(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonModeFilter *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ComptonModeFilter *)new comptonsoft::ComptonModeFilter();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ComptonModeFilter(void *self) {
    comptonsoft::ComptonModeFilter *arg1 = (comptonsoft::ComptonModeFilter *)self;
    delete arg1;
}

static swig_class SwigClassSelectFullDeposit;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SelectFullDeposit_allocate(VALUE self)
#else
_wrap_SelectFullDeposit_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SelectFullDeposit);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SelectFullDeposit(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SelectFullDeposit *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SelectFullDeposit *)new comptonsoft::SelectFullDeposit();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SelectFullDeposit(void *self) {
    comptonsoft::SelectFullDeposit *arg1 = (comptonsoft::SelectFullDeposit *)self;
    delete arg1;
}

static swig_class SwigClassComptonEventFilter;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ComptonEventFilter_allocate(VALUE self)
#else
_wrap_ComptonEventFilter_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ComptonEventFilter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ComptonEventFilter(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ComptonEventFilter *)new comptonsoft::ComptonEventFilter();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ComptonEventFilter(void *self) {
    comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ComptonEventFilter_define_condition(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__ComptonEventFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::ComptonEventFilter *","define_condition", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::ComptonEventFilter * >(argp1);
  (arg1)->define_condition();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComptonEventFilter_add_hit_pattern(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__ComptonEventFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::ComptonEventFilter *","add_hit_pattern", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::ComptonEventFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_hit_pattern", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_hit_pattern", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->add_hit_pattern((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComptonEventFilter_add_hit_pattern_key(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__ComptonEventFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::ComptonEventFilter *","add_hit_pattern_key", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::ComptonEventFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_hit_pattern_key", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_hit_pattern_key", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->add_hit_pattern_key((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComptonEventFilter_add_evs_key(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__ComptonEventFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::ComptonEventFilter *","add_evs_key", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::ComptonEventFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_evs_key", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_evs_key", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->add_evs_key((std::string const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ComptonEventFilter_add_condition(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ComptonEventFilter *arg1 = (comptonsoft::ComptonEventFilter *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__ComptonEventFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::ComptonEventFilter *","add_condition", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::ComptonEventFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_condition", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_condition", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","add_condition", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","add_condition", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->add_condition((std::string const &)*arg2,arg3,arg4);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


static swig_class SwigClassSelectEventsOnFocalPlane;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SelectEventsOnFocalPlane_allocate(VALUE self)
#else
_wrap_SelectEventsOnFocalPlane_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SelectEventsOnFocalPlane);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SelectEventsOnFocalPlane(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SelectEventsOnFocalPlane *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SelectEventsOnFocalPlane *)new comptonsoft::SelectEventsOnFocalPlane();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SelectEventsOnFocalPlane(void *self) {
    comptonsoft::SelectEventsOnFocalPlane *arg1 = (comptonsoft::SelectEventsOnFocalPlane *)self;
    delete arg1;
}

static swig_class SwigClassSelectTime;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SelectTime_allocate(VALUE self)
#else
_wrap_SelectTime_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SelectTime);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SelectTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SelectTime *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SelectTime *)new comptonsoft::SelectTime();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SelectTime(void *self) {
    comptonsoft::SelectTime *arg1 = (comptonsoft::SelectTime *)self;
    delete arg1;
}

static swig_class SwigClassFilterByGoodTimeIntervals;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_FilterByGoodTimeIntervals_allocate(VALUE self)
#else
_wrap_FilterByGoodTimeIntervals_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__FilterByGoodTimeIntervals);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_FilterByGoodTimeIntervals(int argc, VALUE *argv, VALUE self) {
  comptonsoft::FilterByGoodTimeIntervals *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::FilterByGoodTimeIntervals *)new comptonsoft::FilterByGoodTimeIntervals();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_FilterByGoodTimeIntervals(void *self) {
    comptonsoft::FilterByGoodTimeIntervals *arg1 = (comptonsoft::FilterByGoodTimeIntervals *)self;
    delete arg1;
}

static swig_class SwigClassWriteHitTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteHitTree_allocate(VALUE self)
#else
_wrap_WriteHitTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteHitTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteHitTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteHitTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteHitTree *)new comptonsoft::WriteHitTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteHitTree(void *self) {
    comptonsoft::WriteHitTree *arg1 = (comptonsoft::WriteHitTree *)self;
    delete arg1;
}

static swig_class SwigClassWrite3x3EventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Write3x3EventTree_allocate(VALUE self)
#else
_wrap_Write3x3EventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__Write3x3EventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Write3x3EventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::Write3x3EventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::Write3x3EventTree *)new comptonsoft::Write3x3EventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_Write3x3EventTree(void *self) {
    comptonsoft::Write3x3EventTree *arg1 = (comptonsoft::Write3x3EventTree *)self;
    delete arg1;
}

static swig_class SwigClassReadHitTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadHitTree_allocate(VALUE self)
#else
_wrap_ReadHitTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadHitTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadHitTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadHitTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadHitTree *)new comptonsoft::ReadHitTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadHitTree(void *self) {
    comptonsoft::ReadHitTree *arg1 = (comptonsoft::ReadHitTree *)self;
    delete arg1;
}

static swig_class SwigClassReadHitTreeAsRawHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadHitTreeAsRawHits_allocate(VALUE self)
#else
_wrap_ReadHitTreeAsRawHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadHitTreeAsRawHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadHitTreeAsRawHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadHitTreeAsRawHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadHitTreeAsRawHits *)new comptonsoft::ReadHitTreeAsRawHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadHitTreeAsRawHits(void *self) {
    comptonsoft::ReadHitTreeAsRawHits *arg1 = (comptonsoft::ReadHitTreeAsRawHits *)self;
    delete arg1;
}

static swig_class SwigClassReadHitTreeAsDetectorHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadHitTreeAsDetectorHits_allocate(VALUE self)
#else
_wrap_ReadHitTreeAsDetectorHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadHitTreeAsDetectorHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadHitTreeAsDetectorHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadHitTreeAsDetectorHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadHitTreeAsDetectorHits *)new comptonsoft::ReadHitTreeAsDetectorHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadHitTreeAsDetectorHits(void *self) {
    comptonsoft::ReadHitTreeAsDetectorHits *arg1 = (comptonsoft::ReadHitTreeAsDetectorHits *)self;
    delete arg1;
}

static swig_class SwigClassWriteEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteEventTree_allocate(VALUE self)
#else
_wrap_WriteEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteEventTree *)new comptonsoft::WriteEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteEventTree(void *self) {
    comptonsoft::WriteEventTree *arg1 = (comptonsoft::WriteEventTree *)self;
    delete arg1;
}

static swig_class SwigClassReadEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadEventTree_allocate(VALUE self)
#else
_wrap_ReadEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadEventTree *)new comptonsoft::ReadEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadEventTree(void *self) {
    comptonsoft::ReadEventTree *arg1 = (comptonsoft::ReadEventTree *)self;
    delete arg1;
}

static swig_class SwigClassReadEventTreeAsRawHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadEventTreeAsRawHits_allocate(VALUE self)
#else
_wrap_ReadEventTreeAsRawHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadEventTreeAsRawHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadEventTreeAsRawHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadEventTreeAsRawHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadEventTreeAsRawHits *)new comptonsoft::ReadEventTreeAsRawHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadEventTreeAsRawHits(void *self) {
    comptonsoft::ReadEventTreeAsRawHits *arg1 = (comptonsoft::ReadEventTreeAsRawHits *)self;
    delete arg1;
}

static swig_class SwigClassReadEventTreeAsDetectorHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadEventTreeAsDetectorHits_allocate(VALUE self)
#else
_wrap_ReadEventTreeAsDetectorHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadEventTreeAsDetectorHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadEventTreeAsDetectorHits(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadEventTreeAsDetectorHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadEventTreeAsDetectorHits *)new comptonsoft::ReadEventTreeAsDetectorHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadEventTreeAsDetectorHits(void *self) {
    comptonsoft::ReadEventTreeAsDetectorHits *arg1 = (comptonsoft::ReadEventTreeAsDetectorHits *)self;
    delete arg1;
}

static swig_class SwigClassWriteComptonEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteComptonEventTree_allocate(VALUE self)
#else
_wrap_WriteComptonEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteComptonEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteComptonEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteComptonEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteComptonEventTree *)new comptonsoft::WriteComptonEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteComptonEventTree(void *self) {
    comptonsoft::WriteComptonEventTree *arg1 = (comptonsoft::WriteComptonEventTree *)self;
    delete arg1;
}

static swig_class SwigClassReadComptonEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadComptonEventTree_allocate(VALUE self)
#else
_wrap_ReadComptonEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadComptonEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadComptonEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadComptonEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadComptonEventTree *)new comptonsoft::ReadComptonEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadComptonEventTree(void *self) {
    comptonsoft::ReadComptonEventTree *arg1 = (comptonsoft::ReadComptonEventTree *)self;
    delete arg1;
}

static swig_class SwigClassHistogramPHA;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramPHA_allocate(VALUE self)
#else
_wrap_HistogramPHA_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramPHA);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramPHA(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramPHA *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramPHA *)new comptonsoft::HistogramPHA();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramPHA(void *self) {
    comptonsoft::HistogramPHA *arg1 = (comptonsoft::HistogramPHA *)self;
    delete arg1;
}

static swig_class SwigClassHistogramEnergySpectrum;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramEnergySpectrum_allocate(VALUE self)
#else
_wrap_HistogramEnergySpectrum_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramEnergySpectrum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramEnergySpectrum(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramEnergySpectrum *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramEnergySpectrum *)new comptonsoft::HistogramEnergySpectrum();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramEnergySpectrum(void *self) {
    comptonsoft::HistogramEnergySpectrum *arg1 = (comptonsoft::HistogramEnergySpectrum *)self;
    delete arg1;
}

static swig_class SwigClassHistogramEnergy1D;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramEnergy1D_allocate(VALUE self)
#else
_wrap_HistogramEnergy1D_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramEnergy1D);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramEnergy1D(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramEnergy1D *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramEnergy1D *)new comptonsoft::HistogramEnergy1D();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramEnergy1D(void *self) {
    comptonsoft::HistogramEnergy1D *arg1 = (comptonsoft::HistogramEnergy1D *)self;
    delete arg1;
}

static swig_class SwigClassHistogramEnergy2D;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramEnergy2D_allocate(VALUE self)
#else
_wrap_HistogramEnergy2D_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramEnergy2D);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramEnergy2D(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramEnergy2D *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramEnergy2D *)new comptonsoft::HistogramEnergy2D();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramEnergy2D(void *self) {
    comptonsoft::HistogramEnergy2D *arg1 = (comptonsoft::HistogramEnergy2D *)self;
    delete arg1;
}

static swig_class SwigClassHistogramARM;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramARM_allocate(VALUE self)
#else
_wrap_HistogramARM_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramARM);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramARM(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramARM *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramARM *)new comptonsoft::HistogramARM();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramARM(void *self) {
    comptonsoft::HistogramARM *arg1 = (comptonsoft::HistogramARM *)self;
    delete arg1;
}

static swig_class SwigClassHistogramARMByPositionMeasurement;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramARMByPositionMeasurement_allocate(VALUE self)
#else
_wrap_HistogramARMByPositionMeasurement_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramARMByPositionMeasurement);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramARMByPositionMeasurement(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramARMByPositionMeasurement *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramARMByPositionMeasurement *)new comptonsoft::HistogramARMByPositionMeasurement();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramARMByPositionMeasurement(void *self) {
    comptonsoft::HistogramARMByPositionMeasurement *arg1 = (comptonsoft::HistogramARMByPositionMeasurement *)self;
    delete arg1;
}

static swig_class SwigClassHistogramAzimuthAngle;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramAzimuthAngle_allocate(VALUE self)
#else
_wrap_HistogramAzimuthAngle_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramAzimuthAngle);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramAzimuthAngle(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramAzimuthAngle *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramAzimuthAngle *)new comptonsoft::HistogramAzimuthAngle();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramAzimuthAngle(void *self) {
    comptonsoft::HistogramAzimuthAngle *arg1 = (comptonsoft::HistogramAzimuthAngle *)self;
    delete arg1;
}

static swig_class SwigClassHistogram2DDeltaEnergyWithARM;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Histogram2DDeltaEnergyWithARM_allocate(VALUE self)
#else
_wrap_Histogram2DDeltaEnergyWithARM_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__Histogram2DDeltaEnergyWithARM);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Histogram2DDeltaEnergyWithARM(int argc, VALUE *argv, VALUE self) {
  comptonsoft::Histogram2DDeltaEnergyWithARM *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::Histogram2DDeltaEnergyWithARM *)new comptonsoft::Histogram2DDeltaEnergyWithARM();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_Histogram2DDeltaEnergyWithARM(void *self) {
    comptonsoft::Histogram2DDeltaEnergyWithARM *arg1 = (comptonsoft::Histogram2DDeltaEnergyWithARM *)self;
    delete arg1;
}

static swig_class SwigClassResponseMatrix;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ResponseMatrix_allocate(VALUE self)
#else
_wrap_ResponseMatrix_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ResponseMatrix);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ResponseMatrix(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ResponseMatrix *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ResponseMatrix *)new comptonsoft::ResponseMatrix();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ResponseMatrix(void *self) {
    comptonsoft::ResponseMatrix *arg1 = (comptonsoft::ResponseMatrix *)self;
    delete arg1;
}

static swig_class SwigClassBackProjection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_BackProjection_allocate(VALUE self)
#else
_wrap_BackProjection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__BackProjection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_BackProjection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::BackProjection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::BackProjection *)new comptonsoft::BackProjection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_BackProjection(void *self) {
    comptonsoft::BackProjection *arg1 = (comptonsoft::BackProjection *)self;
    delete arg1;
}

static swig_class SwigClassBackProjectionSky;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_BackProjectionSky_allocate(VALUE self)
#else
_wrap_BackProjectionSky_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__BackProjectionSky);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_BackProjectionSky(int argc, VALUE *argv, VALUE self) {
  comptonsoft::BackProjectionSky *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::BackProjectionSky *)new comptonsoft::BackProjectionSky();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_BackProjectionSky(void *self) {
    comptonsoft::BackProjectionSky *arg1 = (comptonsoft::BackProjectionSky *)self;
    delete arg1;
}

static swig_class SwigClassEfficiencyMapSky;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_EfficiencyMapSky_allocate(VALUE self)
#else
_wrap_EfficiencyMapSky_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__EfficiencyMapSky);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_EfficiencyMapSky(int argc, VALUE *argv, VALUE self) {
  comptonsoft::EfficiencyMapSky *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::EfficiencyMapSky *)new comptonsoft::EfficiencyMapSky();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_EfficiencyMapSky(void *self) {
    comptonsoft::EfficiencyMapSky *arg1 = (comptonsoft::EfficiencyMapSky *)self;
    delete arg1;
}

static swig_class SwigClassQuickAnalysisForDSD;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_QuickAnalysisForDSD_allocate(VALUE self)
#else
_wrap_QuickAnalysisForDSD_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__QuickAnalysisForDSD);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_QuickAnalysisForDSD(int argc, VALUE *argv, VALUE self) {
  comptonsoft::QuickAnalysisForDSD *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::QuickAnalysisForDSD *)new comptonsoft::QuickAnalysisForDSD();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_QuickAnalysisForDSD(void *self) {
    comptonsoft::QuickAnalysisForDSD *arg1 = (comptonsoft::QuickAnalysisForDSD *)self;
    delete arg1;
}

static swig_class SwigClassAssignTime;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AssignTime_allocate(VALUE self)
#else
_wrap_AssignTime_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AssignTime);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AssignTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AssignTime *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AssignTime *)new comptonsoft::AssignTime();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AssignTime(void *self) {
    comptonsoft::AssignTime *arg1 = (comptonsoft::AssignTime *)self;
    delete arg1;
}

static swig_class SwigClassDefineFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DefineFrame_allocate(VALUE self)
#else
_wrap_DefineFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__DefineFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_DefineFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::DefineFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::DefineFrame *)new comptonsoft::DefineFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_DefineFrame(void *self) {
    comptonsoft::DefineFrame *arg1 = (comptonsoft::DefineFrame *)self;
    delete arg1;
}

static swig_class SwigClassDefineEventDriven;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DefineEventDriven_allocate(VALUE self)
#else
_wrap_DefineEventDriven_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__DefineEventDriven);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_DefineEventDriven(int argc, VALUE *argv, VALUE self) {
  comptonsoft::DefineEventDriven *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::DefineEventDriven *)new comptonsoft::DefineEventDriven();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_DefineEventDriven(void *self) {
    comptonsoft::DefineEventDriven *arg1 = (comptonsoft::DefineEventDriven *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_DefineEventDriven_module_id(int argc, VALUE *argv, VALUE self) {
  comptonsoft::DefineEventDriven *arg1 = (comptonsoft::DefineEventDriven *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__DefineEventDriven, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::DefineEventDriven const *","module_id", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::DefineEventDriven * >(argp1);
  result = ((comptonsoft::DefineEventDriven const *)arg1)->module_id();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstructFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ConstructFrame_allocate(VALUE self)
#else
_wrap_ConstructFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ConstructFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ConstructFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ConstructFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ConstructFrame *)new comptonsoft::ConstructFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ConstructFrame(void *self) {
    comptonsoft::ConstructFrame *arg1 = (comptonsoft::ConstructFrame *)self;
    delete arg1;
}

static swig_class SwigClassFillFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_FillFrame_allocate(VALUE self)
#else
_wrap_FillFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__FillFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_FillFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::FillFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::FillFrame *)new comptonsoft::FillFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_FillFrame(void *self) {
    comptonsoft::FillFrame *arg1 = (comptonsoft::FillFrame *)self;
    delete arg1;
}

static swig_class SwigClassLoadFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LoadFrame_allocate(VALUE self)
#else
_wrap_LoadFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__LoadFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LoadFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::LoadFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::LoadFrame *)new comptonsoft::LoadFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_LoadFrame(void *self) {
    comptonsoft::LoadFrame *arg1 = (comptonsoft::LoadFrame *)self;
    delete arg1;
}

static swig_class SwigClassLoadReducedFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LoadReducedFrame_allocate(VALUE self)
#else
_wrap_LoadReducedFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__LoadReducedFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LoadReducedFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::LoadReducedFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::LoadReducedFrame *)new comptonsoft::LoadReducedFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_LoadReducedFrame(void *self) {
    comptonsoft::LoadReducedFrame *arg1 = (comptonsoft::LoadReducedFrame *)self;
    delete arg1;
}

static swig_class SwigClassXrayEventCollection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_XrayEventCollection_allocate(VALUE self)
#else
_wrap_XrayEventCollection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__XrayEventCollection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_XrayEventCollection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::XrayEventCollection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::XrayEventCollection *)new comptonsoft::XrayEventCollection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_XrayEventCollection(void *self) {
    comptonsoft::XrayEventCollection *arg1 = (comptonsoft::XrayEventCollection *)self;
    delete arg1;
}

static swig_class SwigClassXrayEventSelection;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_XrayEventSelection_allocate(VALUE self)
#else
_wrap_XrayEventSelection_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__XrayEventSelection);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_XrayEventSelection(int argc, VALUE *argv, VALUE self) {
  comptonsoft::XrayEventSelection *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::XrayEventSelection *)new comptonsoft::XrayEventSelection();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_XrayEventSelection(void *self) {
    comptonsoft::XrayEventSelection *arg1 = (comptonsoft::XrayEventSelection *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XrayEventSelection_add_condition__SWIG_0(int argc, VALUE *argv, VALUE self) {
  comptonsoft::XrayEventSelection *arg1 = (comptonsoft::XrayEventSelection *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__XrayEventSelection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::XrayEventSelection *","add_condition", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::XrayEventSelection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_condition", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_condition", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > &","add_condition", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > &","add_condition", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > * >(argp3);
  (arg1)->add_condition((std::string const &)*arg2,*arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XrayEventSelection_add_condition__SWIG_1(int argc, VALUE *argv, VALUE self) {
  comptonsoft::XrayEventSelection *arg1 = (comptonsoft::XrayEventSelection *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_comptonsoft__XrayEventSelection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "comptonsoft::XrayEventSelection *","add_condition", 1, self )); 
  }
  arg1 = reinterpret_cast< comptonsoft::XrayEventSelection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","add_condition", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","add_condition", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > &","add_condition", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > &","add_condition", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > * >(argp3);
  (arg1)->add_condition((std::string const &)*arg2,*arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XrayEventSelection_add_condition(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_comptonsoft__XrayEventSelection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XrayEventSelection_add_condition__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_comptonsoft__XrayEventSelection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XrayEventSelection_add_condition__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "XrayEventSelection.add_condition", 
    "    void XrayEventSelection.add_condition(std::string const &key, std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > &range)\n"
    "    void XrayEventSelection.add_condition(std::string const &key, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > &range)\n");
  
  return Qnil;
}


static swig_class SwigClassAnalyzeFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AnalyzeFrame_allocate(VALUE self)
#else
_wrap_AnalyzeFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AnalyzeFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AnalyzeFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AnalyzeFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AnalyzeFrame *)new comptonsoft::AnalyzeFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AnalyzeFrame(void *self) {
    comptonsoft::AnalyzeFrame *arg1 = (comptonsoft::AnalyzeFrame *)self;
    delete arg1;
}

static swig_class SwigClassWriteXrayEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteXrayEventTree_allocate(VALUE self)
#else
_wrap_WriteXrayEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteXrayEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteXrayEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteXrayEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteXrayEventTree *)new comptonsoft::WriteXrayEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteXrayEventTree(void *self) {
    comptonsoft::WriteXrayEventTree *arg1 = (comptonsoft::WriteXrayEventTree *)self;
    delete arg1;
}

static swig_class SwigClassReadXrayEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ReadXrayEventTree_allocate(VALUE self)
#else
_wrap_ReadXrayEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ReadXrayEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ReadXrayEventTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ReadXrayEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ReadXrayEventTree *)new comptonsoft::ReadXrayEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ReadXrayEventTree(void *self) {
    comptonsoft::ReadXrayEventTree *arg1 = (comptonsoft::ReadXrayEventTree *)self;
    delete arg1;
}

static swig_class SwigClassSortEventTreeWithTime;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SortEventTreeWithTime_allocate(VALUE self)
#else
_wrap_SortEventTreeWithTime_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SortEventTreeWithTime);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SortEventTreeWithTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SortEventTreeWithTime *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SortEventTreeWithTime *)new comptonsoft::SortEventTreeWithTime();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SortEventTreeWithTime(void *self) {
    comptonsoft::SortEventTreeWithTime *arg1 = (comptonsoft::SortEventTreeWithTime *)self;
    delete arg1;
}

static swig_class SwigClassWriteBadPixels;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteBadPixels_allocate(VALUE self)
#else
_wrap_WriteBadPixels_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteBadPixels);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteBadPixels(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteBadPixels *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteBadPixels *)new comptonsoft::WriteBadPixels();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteBadPixels(void *self) {
    comptonsoft::WriteBadPixels *arg1 = (comptonsoft::WriteBadPixels *)self;
    delete arg1;
}

static swig_class SwigClassAnalyzeDarkFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AnalyzeDarkFrame_allocate(VALUE self)
#else
_wrap_AnalyzeDarkFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AnalyzeDarkFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AnalyzeDarkFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AnalyzeDarkFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AnalyzeDarkFrame *)new comptonsoft::AnalyzeDarkFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AnalyzeDarkFrame(void *self) {
    comptonsoft::AnalyzeDarkFrame *arg1 = (comptonsoft::AnalyzeDarkFrame *)self;
    delete arg1;
}

static swig_class SwigClassLoadRootFrame;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_LoadRootFrame_allocate(VALUE self)
#else
_wrap_LoadRootFrame_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__LoadRootFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_LoadRootFrame(int argc, VALUE *argv, VALUE self) {
  comptonsoft::LoadRootFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::LoadRootFrame *)new comptonsoft::LoadRootFrame();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_LoadRootFrame(void *self) {
    comptonsoft::LoadRootFrame *arg1 = (comptonsoft::LoadRootFrame *)self;
    delete arg1;
}

static swig_class SwigClassDetectBadFrames;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DetectBadFrames_allocate(VALUE self)
#else
_wrap_DetectBadFrames_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__DetectBadFrames);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_DetectBadFrames(int argc, VALUE *argv, VALUE self) {
  comptonsoft::DetectBadFrames *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::DetectBadFrames *)new comptonsoft::DetectBadFrames();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_DetectBadFrames(void *self) {
    comptonsoft::DetectBadFrames *arg1 = (comptonsoft::DetectBadFrames *)self;
    delete arg1;
}

static swig_class SwigClassSetBadFrames;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetBadFrames_allocate(VALUE self)
#else
_wrap_SetBadFrames_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetBadFrames);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetBadFrames(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetBadFrames *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetBadFrames *)new comptonsoft::SetBadFrames();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetBadFrames(void *self) {
    comptonsoft::SetBadFrames *arg1 = (comptonsoft::SetBadFrames *)self;
    delete arg1;
}

static swig_class SwigClassSetDynamicPedestals;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetDynamicPedestals_allocate(VALUE self)
#else
_wrap_SetDynamicPedestals_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetDynamicPedestals);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetDynamicPedestals(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetDynamicPedestals *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetDynamicPedestals *)new comptonsoft::SetDynamicPedestals();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetDynamicPedestals(void *self) {
    comptonsoft::SetDynamicPedestals *arg1 = (comptonsoft::SetDynamicPedestals *)self;
    delete arg1;
}

static swig_class SwigClassSetPedestalsByMedian;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SetPedestalsByMedian_allocate(VALUE self)
#else
_wrap_SetPedestalsByMedian_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SetPedestalsByMedian);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SetPedestalsByMedian(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SetPedestalsByMedian *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SetPedestalsByMedian *)new comptonsoft::SetPedestalsByMedian();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SetPedestalsByMedian(void *self) {
    comptonsoft::SetPedestalsByMedian *arg1 = (comptonsoft::SetPedestalsByMedian *)self;
    delete arg1;
}

static swig_class SwigClassHistogramFramePedestal;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramFramePedestal_allocate(VALUE self)
#else
_wrap_HistogramFramePedestal_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramFramePedestal);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramFramePedestal(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramFramePedestal *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramFramePedestal *)new comptonsoft::HistogramFramePedestal();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramFramePedestal(void *self) {
    comptonsoft::HistogramFramePedestal *arg1 = (comptonsoft::HistogramFramePedestal *)self;
    delete arg1;
}

static swig_class SwigClassHistogramXrayEventSpectrum;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramXrayEventSpectrum_allocate(VALUE self)
#else
_wrap_HistogramXrayEventSpectrum_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramXrayEventSpectrum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramXrayEventSpectrum(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramXrayEventSpectrum *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramXrayEventSpectrum *)new comptonsoft::HistogramXrayEventSpectrum();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramXrayEventSpectrum(void *self) {
    comptonsoft::HistogramXrayEventSpectrum *arg1 = (comptonsoft::HistogramXrayEventSpectrum *)self;
    delete arg1;
}

static swig_class SwigClassHistogramXrayEventAzimuthAngle;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramXrayEventAzimuthAngle_allocate(VALUE self)
#else
_wrap_HistogramXrayEventAzimuthAngle_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramXrayEventAzimuthAngle);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramXrayEventAzimuthAngle(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramXrayEventAzimuthAngle *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramXrayEventAzimuthAngle *)new comptonsoft::HistogramXrayEventAzimuthAngle();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramXrayEventAzimuthAngle(void *self) {
    comptonsoft::HistogramXrayEventAzimuthAngle *arg1 = (comptonsoft::HistogramXrayEventAzimuthAngle *)self;
    delete arg1;
}

static swig_class SwigClassHistogramXrayEventProperties;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramXrayEventProperties_allocate(VALUE self)
#else
_wrap_HistogramXrayEventProperties_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramXrayEventProperties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramXrayEventProperties(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramXrayEventProperties *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramXrayEventProperties *)new comptonsoft::HistogramXrayEventProperties();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramXrayEventProperties(void *self) {
    comptonsoft::HistogramXrayEventProperties *arg1 = (comptonsoft::HistogramXrayEventProperties *)self;
    delete arg1;
}

static swig_class SwigClassHistogramDecodedImage;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramDecodedImage_allocate(VALUE self)
#else
_wrap_HistogramDecodedImage_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramDecodedImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramDecodedImage(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramDecodedImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramDecodedImage *)new comptonsoft::HistogramDecodedImage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramDecodedImage(void *self) {
    comptonsoft::HistogramDecodedImage *arg1 = (comptonsoft::HistogramDecodedImage *)self;
    delete arg1;
}

static swig_class SwigClassHistogramRawFrameImage;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_HistogramRawFrameImage_allocate(VALUE self)
#else
_wrap_HistogramRawFrameImage_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__HistogramRawFrameImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_HistogramRawFrameImage(int argc, VALUE *argv, VALUE self) {
  comptonsoft::HistogramRawFrameImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::HistogramRawFrameImage *)new comptonsoft::HistogramRawFrameImage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_HistogramRawFrameImage(void *self) {
    comptonsoft::HistogramRawFrameImage *arg1 = (comptonsoft::HistogramRawFrameImage *)self;
    delete arg1;
}

static swig_class SwigClassExtractXrayEventImage;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ExtractXrayEventImage_allocate(VALUE self)
#else
_wrap_ExtractXrayEventImage_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ExtractXrayEventImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ExtractXrayEventImage(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ExtractXrayEventImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ExtractXrayEventImage *)new comptonsoft::ExtractXrayEventImage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ExtractXrayEventImage(void *self) {
    comptonsoft::ExtractXrayEventImage *arg1 = (comptonsoft::ExtractXrayEventImage *)self;
    delete arg1;
}

static swig_class SwigClassProcessCodedAperture;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ProcessCodedAperture_allocate(VALUE self)
#else
_wrap_ProcessCodedAperture_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ProcessCodedAperture);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ProcessCodedAperture(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ProcessCodedAperture *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ProcessCodedAperture *)new comptonsoft::ProcessCodedAperture();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ProcessCodedAperture(void *self) {
    comptonsoft::ProcessCodedAperture *arg1 = (comptonsoft::ProcessCodedAperture *)self;
    delete arg1;
}

static swig_class SwigClassGetInputFilesFromDirectory;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_GetInputFilesFromDirectory_allocate(VALUE self)
#else
_wrap_GetInputFilesFromDirectory_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__GetInputFilesFromDirectory);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_GetInputFilesFromDirectory(int argc, VALUE *argv, VALUE self) {
  comptonsoft::GetInputFilesFromDirectory *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::GetInputFilesFromDirectory *)new comptonsoft::GetInputFilesFromDirectory();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_GetInputFilesFromDirectory(void *self) {
    comptonsoft::GetInputFilesFromDirectory *arg1 = (comptonsoft::GetInputFilesFromDirectory *)self;
    delete arg1;
}

static swig_class SwigClassSelectEventsWithDetectorSpectrum;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SelectEventsWithDetectorSpectrum_allocate(VALUE self)
#else
_wrap_SelectEventsWithDetectorSpectrum_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SelectEventsWithDetectorSpectrum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SelectEventsWithDetectorSpectrum(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SelectEventsWithDetectorSpectrum *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SelectEventsWithDetectorSpectrum *)new comptonsoft::SelectEventsWithDetectorSpectrum();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SelectEventsWithDetectorSpectrum(void *self) {
    comptonsoft::SelectEventsWithDetectorSpectrum *arg1 = (comptonsoft::SelectEventsWithDetectorSpectrum *)self;
    delete arg1;
}

static swig_class SwigClassExtractPhotoelectronTrajectory;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ExtractPhotoelectronTrajectory_allocate(VALUE self)
#else
_wrap_ExtractPhotoelectronTrajectory_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ExtractPhotoelectronTrajectory);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ExtractPhotoelectronTrajectory(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ExtractPhotoelectronTrajectory *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ExtractPhotoelectronTrajectory *)new comptonsoft::ExtractPhotoelectronTrajectory();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ExtractPhotoelectronTrajectory(void *self) {
    comptonsoft::ExtractPhotoelectronTrajectory *arg1 = (comptonsoft::ExtractPhotoelectronTrajectory *)self;
    delete arg1;
}

static swig_class SwigClassListPrimaryGen;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ListPrimaryGen_allocate(VALUE self)
#else
_wrap_ListPrimaryGen_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ListPrimaryGen);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ListPrimaryGen(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ListPrimaryGen *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ListPrimaryGen *)new comptonsoft::ListPrimaryGen();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ListPrimaryGen(void *self) {
    comptonsoft::ListPrimaryGen *arg1 = (comptonsoft::ListPrimaryGen *)self;
    delete arg1;
}

static swig_class SwigClassAHRadiationBackgroundPrimaryGen;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AHRadiationBackgroundPrimaryGen_allocate(VALUE self)
#else
_wrap_AHRadiationBackgroundPrimaryGen_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGen);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AHRadiationBackgroundPrimaryGen(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AHRadiationBackgroundPrimaryGen *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AHRadiationBackgroundPrimaryGen *)new comptonsoft::AHRadiationBackgroundPrimaryGen();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AHRadiationBackgroundPrimaryGen(void *self) {
    comptonsoft::AHRadiationBackgroundPrimaryGen *arg1 = (comptonsoft::AHRadiationBackgroundPrimaryGen *)self;
    delete arg1;
}

static swig_class SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AHRadiationBackgroundPrimaryGenSelectExposureTime_allocate(VALUE self)
#else
_wrap_AHRadiationBackgroundPrimaryGenSelectExposureTime_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AHRadiationBackgroundPrimaryGenSelectExposureTime(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *)new comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AHRadiationBackgroundPrimaryGenSelectExposureTime(void *self) {
    comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *arg1 = (comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *)self;
    delete arg1;
}

static swig_class SwigClassRadioactiveDecayUserActionAssembly;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RadioactiveDecayUserActionAssembly_allocate(VALUE self)
#else
_wrap_RadioactiveDecayUserActionAssembly_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__RadioactiveDecayUserActionAssembly);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RadioactiveDecayUserActionAssembly(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RadioactiveDecayUserActionAssembly *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::RadioactiveDecayUserActionAssembly *)new comptonsoft::RadioactiveDecayUserActionAssembly();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_RadioactiveDecayUserActionAssembly(void *self) {
    comptonsoft::RadioactiveDecayUserActionAssembly *arg1 = (comptonsoft::RadioactiveDecayUserActionAssembly *)self;
    delete arg1;
}

static swig_class SwigClassActivationUserActionAssembly;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ActivationUserActionAssembly_allocate(VALUE self)
#else
_wrap_ActivationUserActionAssembly_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ActivationUserActionAssembly);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ActivationUserActionAssembly(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ActivationUserActionAssembly *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ActivationUserActionAssembly *)new comptonsoft::ActivationUserActionAssembly();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ActivationUserActionAssembly(void *self) {
    comptonsoft::ActivationUserActionAssembly *arg1 = (comptonsoft::ActivationUserActionAssembly *)self;
    delete arg1;
}

static swig_class SwigClassSampleOpticalDepth;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SampleOpticalDepth_allocate(VALUE self)
#else
_wrap_SampleOpticalDepth_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SampleOpticalDepth);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SampleOpticalDepth(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SampleOpticalDepth *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SampleOpticalDepth *)new comptonsoft::SampleOpticalDepth();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SampleOpticalDepth(void *self) {
    comptonsoft::SampleOpticalDepth *arg1 = (comptonsoft::SampleOpticalDepth *)self;
    delete arg1;
}

static swig_class SwigClassScatteringPickUpData;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ScatteringPickUpData_allocate(VALUE self)
#else
_wrap_ScatteringPickUpData_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ScatteringPickUpData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ScatteringPickUpData(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ScatteringPickUpData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ScatteringPickUpData *)new comptonsoft::ScatteringPickUpData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ScatteringPickUpData(void *self) {
    comptonsoft::ScatteringPickUpData *arg1 = (comptonsoft::ScatteringPickUpData *)self;
    delete arg1;
}

static swig_class SwigClassObservationPickUpData;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_ObservationPickUpData_allocate(VALUE self)
#else
_wrap_ObservationPickUpData_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__ObservationPickUpData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_ObservationPickUpData(int argc, VALUE *argv, VALUE self) {
  comptonsoft::ObservationPickUpData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::ObservationPickUpData *)new comptonsoft::ObservationPickUpData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_ObservationPickUpData(void *self) {
    comptonsoft::ObservationPickUpData *arg1 = (comptonsoft::ObservationPickUpData *)self;
    delete arg1;
}

static swig_class SwigClassPhysicsListManager;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_PhysicsListManager_allocate(VALUE self)
#else
_wrap_PhysicsListManager_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__PhysicsListManager);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_PhysicsListManager(int argc, VALUE *argv, VALUE self) {
  comptonsoft::PhysicsListManager *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::PhysicsListManager *)new comptonsoft::PhysicsListManager();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_PhysicsListManager(void *self) {
    comptonsoft::PhysicsListManager *arg1 = (comptonsoft::PhysicsListManager *)self;
    delete arg1;
}

static swig_class SwigClassAssignG4CopyNumber;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_AssignG4CopyNumber_allocate(VALUE self)
#else
_wrap_AssignG4CopyNumber_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__AssignG4CopyNumber);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_AssignG4CopyNumber(int argc, VALUE *argv, VALUE self) {
  comptonsoft::AssignG4CopyNumber *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::AssignG4CopyNumber *)new comptonsoft::AssignG4CopyNumber();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_AssignG4CopyNumber(void *self) {
    comptonsoft::AssignG4CopyNumber *arg1 = (comptonsoft::AssignG4CopyNumber *)self;
    delete arg1;
}

static swig_class SwigClassInitialParticleTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_InitialParticleTree_allocate(VALUE self)
#else
_wrap_InitialParticleTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__InitialParticleTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_InitialParticleTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::InitialParticleTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::InitialParticleTree *)new comptonsoft::InitialParticleTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_InitialParticleTree(void *self) {
    comptonsoft::InitialParticleTree *arg1 = (comptonsoft::InitialParticleTree *)self;
    delete arg1;
}

static swig_class SwigClassDumpMass;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_DumpMass_allocate(VALUE self)
#else
_wrap_DumpMass_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__DumpMass);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_DumpMass(int argc, VALUE *argv, VALUE self) {
  comptonsoft::DumpMass *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::DumpMass *)new comptonsoft::DumpMass();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_DumpMass(void *self) {
    comptonsoft::DumpMass *arg1 = (comptonsoft::DumpMass *)self;
    delete arg1;
}

static swig_class SwigClassWriteObservationTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_WriteObservationTree_allocate(VALUE self)
#else
_wrap_WriteObservationTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__WriteObservationTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_WriteObservationTree(int argc, VALUE *argv, VALUE self) {
  comptonsoft::WriteObservationTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::WriteObservationTree *)new comptonsoft::WriteObservationTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_WriteObservationTree(void *self) {
    comptonsoft::WriteObservationTree *arg1 = (comptonsoft::WriteObservationTree *)self;
    delete arg1;
}

static swig_class SwigClassSimulateCXBShieldPlate;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_SimulateCXBShieldPlate_allocate(VALUE self)
#else
_wrap_SimulateCXBShieldPlate_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__SimulateCXBShieldPlate);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_SimulateCXBShieldPlate(int argc, VALUE *argv, VALUE self) {
  comptonsoft::SimulateCXBShieldPlate *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::SimulateCXBShieldPlate *)new comptonsoft::SimulateCXBShieldPlate();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_SimulateCXBShieldPlate(void *self) {
    comptonsoft::SimulateCXBShieldPlate *arg1 = (comptonsoft::SimulateCXBShieldPlate *)self;
    delete arg1;
}

static swig_class SwigClassRescaleSimulationNoiseOfSGDSiUntriggered;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_RescaleSimulationNoiseOfSGDSiUntriggered_allocate(VALUE self)
#else
_wrap_RescaleSimulationNoiseOfSGDSiUntriggered_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_RescaleSimulationNoiseOfSGDSiUntriggered(int argc, VALUE *argv, VALUE self) {
  comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *)new comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_RescaleSimulationNoiseOfSGDSiUntriggered(void *self) {
    comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *arg1 = (comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *)self;
    delete arg1;
}

static swig_class SwigClassUniformlyRandomizeEPI;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_UniformlyRandomizeEPI_allocate(VALUE self)
#else
_wrap_UniformlyRandomizeEPI_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_comptonsoft__UniformlyRandomizeEPI);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_UniformlyRandomizeEPI(int argc, VALUE *argv, VALUE self) {
  comptonsoft::UniformlyRandomizeEPI *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (comptonsoft::UniformlyRandomizeEPI *)new comptonsoft::UniformlyRandomizeEPI();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_comptonsoft_UniformlyRandomizeEPI(void *self) {
    comptonsoft::UniformlyRandomizeEPI *arg1 = (comptonsoft::UniformlyRandomizeEPI *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *) x));
}
static void *_p_comptonsoft__ListPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((comptonsoft::ListPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__IsotropicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::IsotropicPrimaryGen *)  ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__IsotropicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::IsotropicPrimaryGen *)  ((comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *) x));
}
static void *_p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__StandardUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::StandardUserActionAssembly *)  ((comptonsoft::ActivationUserActionAssembly *) x));
}
static void *_p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__StandardUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::StandardUserActionAssembly *)  ((comptonsoft::RadioactiveDecayUserActionAssembly *) x));
}
static void *_p_comptonsoft__PhysicsListManagerTo_p_anlgeant4__VANLPhysicsList(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPhysicsList *)  ((comptonsoft::PhysicsListManager *) x));
}
static void *_p_anlgeant4__BasicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *)  ((anlgeant4::BasicPrimaryGen *) x));
}
static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *) x));
}
static void *_p_comptonsoft__ListPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((comptonsoft::ListPrimaryGen *) x));
}
static void *_p_comptonsoft__ObservationPickUpDataTo_p_anlgeant4__VAppendableUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VAppendableUserActionAssembly *)  ((comptonsoft::ObservationPickUpData *) x));
}
static void *_p_comptonsoft__SampleOpticalDepthTo_p_anlgeant4__VAppendableUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VAppendableUserActionAssembly *)  ((comptonsoft::SampleOpticalDepth *) x));
}
static void *_p_comptonsoft__ScatteringPickUpDataTo_p_anlgeant4__VAppendableUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VAppendableUserActionAssembly *)  ((comptonsoft::ScatteringPickUpData *) x));
}
static void *_p_anlgeant4__StandardUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VMasterUserActionAssembly *)  ((anlgeant4::StandardUserActionAssembly *) x));
}
static void *_p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VMasterUserActionAssembly *) (anlgeant4::StandardUserActionAssembly *) ((comptonsoft::ActivationUserActionAssembly *) x));
}
static void *_p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VMasterUserActionAssembly *) (anlgeant4::StandardUserActionAssembly *) ((comptonsoft::RadioactiveDecayUserActionAssembly *) x));
}
static void *_p_anlgeant4__StandardUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VMasterUserActionAssembly *) ((anlgeant4::StandardUserActionAssembly *) x));
}
static void *_p_anlgeant4__VAppendableUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *)  ((anlgeant4::VAppendableUserActionAssembly *) x));
}
static void *_p_anlgeant4__VMasterUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *)  ((anlgeant4::VMasterUserActionAssembly *) x));
}
static void *_p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VMasterUserActionAssembly *)(anlgeant4::StandardUserActionAssembly *) ((comptonsoft::ActivationUserActionAssembly *) x));
}
static void *_p_comptonsoft__ObservationPickUpDataTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::ObservationPickUpData *) x));
}
static void *_p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VMasterUserActionAssembly *)(anlgeant4::StandardUserActionAssembly *) ((comptonsoft::RadioactiveDecayUserActionAssembly *) x));
}
static void *_p_comptonsoft__SampleOpticalDepthTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::SampleOpticalDepth *) x));
}
static void *_p_comptonsoft__ScatteringPickUpDataTo_p_anlgeant4__VUserActionAssembly(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VUserActionAssembly *) (anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::ScatteringPickUpData *) x));
}
static void *_p_anlgeant4__BasicPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *) ((anlgeant4::BasicPrimaryGen *) x));
}
static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__Geant4BodyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::Geant4Body *) x));
}
static void *_p_anlgeant4__Geant4SimpleTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::Geant4Simple *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_anlgeant4__StandardUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VMasterUserActionAssembly *) ((anlgeant4::StandardUserActionAssembly *) x));
}
static void *_p_anlgeant4__VANLGeometryTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::VANLGeometry *) x));
}
static void *_p_anlgeant4__VANLPhysicsListTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::VANLPhysicsList *) x));
}
static void *_p_anlgeant4__VANLPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::VANLPrimaryGen *) x));
}
static void *_p_anlgeant4__VAppendableUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *) ((anlgeant4::VAppendableUserActionAssembly *) x));
}
static void *_p_anlgeant4__VMasterUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *) ((anlgeant4::VMasterUserActionAssembly *) x));
}
static void *_p_anlgeant4__VUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((anlgeant4::VUserActionAssembly *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *) x));
}
static void *_p_comptonsoft__ActivationUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VMasterUserActionAssembly *)(anlgeant4::StandardUserActionAssembly *) ((comptonsoft::ActivationUserActionAssembly *) x));
}
static void *_p_comptonsoft__AnalyzeDarkFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::AnalyzeDarkFrame *) x));
}
static void *_p_comptonsoft__AnalyzeFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::AnalyzeFrame *) x));
}
static void *_p_comptonsoft__AnalyzeHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_comptonsoft__ApplyEPICompensationTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ApplyEPICompensation *) x));
}
static void *_p_comptonsoft__AssignG4CopyNumberTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::AssignG4CopyNumber *) x));
}
static void *_p_comptonsoft__AssignTimeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::AssignTime *) x));
}
static void *_p_comptonsoft__BackProjectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::BackProjection *) x));
}
static void *_p_comptonsoft__BackProjectionSkyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::BackProjection *) ((comptonsoft::BackProjectionSky *) x));
}
static void *_p_comptonsoft__CSHitCollectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::CSHitCollection *) x));
}
static void *_p_comptonsoft__CalculatePedestalLevelsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::CalculatePedestalLevels *) x));
}
static void *_p_comptonsoft__ComptonEventFilterTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::ComptonEventFilter *) x));
}
static void *_p_comptonsoft__ComptonModeFilterTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ComptonModeFilter *) x));
}
static void *_p_comptonsoft__ConstructChannelMapTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ConstructChannelMap *) x));
}
static void *_p_comptonsoft__ConstructDetectorTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::ConstructDetector *) x));
}
static void *_p_comptonsoft__ConstructDetectorForSimulationTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::ConstructDetector *) ((comptonsoft::ConstructDetectorForSimulation *) x));
}
static void *_p_comptonsoft__ConstructFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::ConstructDetector *) ((comptonsoft::ConstructFrame *) x));
}
static void *_p_comptonsoft__CorrectPHATo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::CorrectPHA *) x));
}
static void *_p_comptonsoft__CreateRootFileTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::CreateRootFile *) x));
}
static void *_p_comptonsoft__DefineEventDrivenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::DefineEventDriven *) x));
}
static void *_p_comptonsoft__DefineFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::DefineFrame *) x));
}
static void *_p_comptonsoft__DetectBadFramesTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::DetectBadFrames *) x));
}
static void *_p_comptonsoft__DumpMassTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::DumpMass *) x));
}
static void *_p_comptonsoft__EfficiencyMapSkyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::BackProjection *) ((comptonsoft::EfficiencyMapSky *) x));
}
static void *_p_comptonsoft__EventReconstructionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::EventReconstruction *) x));
}
static void *_p_comptonsoft__EventSelectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::EventSelection *) x));
}
static void *_p_comptonsoft__ExtractPhotoelectronTrajectoryTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ExtractPhotoelectronTrajectory *) x));
}
static void *_p_comptonsoft__ExtractXrayEventImageTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ExtractXrayEventImage *) x));
}
static void *_p_comptonsoft__FillFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::FillFrame *) x));
}
static void *_p_comptonsoft__FilterByGoodTimeIntervalsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::FilterByGoodTimeIntervals *) x));
}
static void *_p_comptonsoft__GetInputFilesFromDirectoryTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::GetInputFilesFromDirectory *) x));
}
static void *_p_comptonsoft__HXIEventSelectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HXIEventSelection *) x));
}
static void *_p_comptonsoft__Histogram2DDeltaEnergyWithARMTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::Histogram2DDeltaEnergyWithARM *) x));
}
static void *_p_comptonsoft__HistogramARMTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramARM *) x));
}
static void *_p_comptonsoft__HistogramARMByPositionMeasurementTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::HistogramARM *) ((comptonsoft::HistogramARMByPositionMeasurement *) x));
}
static void *_p_comptonsoft__HistogramAzimuthAngleTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramAzimuthAngle *) x));
}
static void *_p_comptonsoft__HistogramDecodedImageTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramDecodedImage *) x));
}
static void *_p_comptonsoft__HistogramEnergy1DTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramEnergy1D *) x));
}
static void *_p_comptonsoft__HistogramEnergy2DTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramEnergy2D *) x));
}
static void *_p_comptonsoft__HistogramEnergySpectrumTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramEnergySpectrum *) x));
}
static void *_p_comptonsoft__HistogramFramePedestalTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramFramePedestal *) x));
}
static void *_p_comptonsoft__HistogramPHATo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramPHA *) x));
}
static void *_p_comptonsoft__HistogramRawFrameImageTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramRawFrameImage *) x));
}
static void *_p_comptonsoft__HistogramXrayEventAzimuthAngleTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramXrayEventAzimuthAngle *) x));
}
static void *_p_comptonsoft__HistogramXrayEventPropertiesTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramXrayEventProperties *) x));
}
static void *_p_comptonsoft__HistogramXrayEventSpectrumTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramXrayEventSpectrum *) x));
}
static void *_p_comptonsoft__InitialConditionFilterTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::InitialConditionFilter *) x));
}
static void *_p_comptonsoft__InitialParticleTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::InitialParticleTree *) x));
}
static void *_p_comptonsoft__ListPrimaryGenTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((comptonsoft::ListPrimaryGen *) x));
}
static void *_p_comptonsoft__LoadFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::LoadFrame *) x));
}
static void *_p_comptonsoft__LoadReducedFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::LoadFrame *) ((comptonsoft::LoadReducedFrame *) x));
}
static void *_p_comptonsoft__LoadRootFrameTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::LoadRootFrame *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *)(comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsWithTimingProcess *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__ObservationPickUpDataTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::ObservationPickUpData *) x));
}
static void *_p_comptonsoft__PatternGeneratorTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::PatternGenerator *) x));
}
static void *_p_comptonsoft__PhysicsListManagerTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VANLPhysicsList *) ((comptonsoft::PhysicsListManager *) x));
}
static void *_p_comptonsoft__ProcessCodedApertureTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ProcessCodedAperture *) x));
}
static void *_p_comptonsoft__QuickAnalysisForDSDTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::QuickAnalysisForDSD *) x));
}
static void *_p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VMasterUserActionAssembly *)(anlgeant4::StandardUserActionAssembly *) ((comptonsoft::RadioactiveDecayUserActionAssembly *) x));
}
static void *_p_comptonsoft__ReadComptonEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::EventReconstruction *) ((comptonsoft::ReadComptonEventTree *) x));
}
static void *_p_comptonsoft__ReadDataFileTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadDataFile *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_VME3 *) x));
}
static void *_p_comptonsoft__ReadEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadEventTree *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadEventTree *)(comptonsoft::ReadEventTreeAsRawHits *) ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsRawHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadEventTree *) ((comptonsoft::ReadEventTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadHitTree *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadHitTree *)(comptonsoft::ReadHitTreeAsRawHits *) ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsRawHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadHitTree *) ((comptonsoft::ReadHitTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadXrayEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::ReadXrayEventTree *) x));
}
static void *_p_comptonsoft__RecalculateEPITo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::CorrectPHA *) ((comptonsoft::RecalculateEPI *) x));
}
static void *_p_comptonsoft__RecalculateSimulationNoiseTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::RecalculateSimulationNoise *) x));
}
static void *_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggeredTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *) x));
}
static void *_p_comptonsoft__ResponseMatrixTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ResponseMatrix *) x));
}
static void *_p_comptonsoft__SampleOpticalDepthTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::SampleOpticalDepth *) x));
}
static void *_p_comptonsoft__SaveDataTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::SaveData *) x));
}
static void *_p_comptonsoft__ScatteringPickUpDataTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (anlgeant4::VUserActionAssembly *)(anlgeant4::VAppendableUserActionAssembly *) ((comptonsoft::ScatteringPickUpData *) x));
}
static void *_p_comptonsoft__SelectEventsOnFocalPlaneTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SelectEventsOnFocalPlane *) x));
}
static void *_p_comptonsoft__SelectEventsWithDetectorSpectrumTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::SelectEventsWithDetectorSpectrum *) x));
}
static void *_p_comptonsoft__SelectFullDepositTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::SelectFullDeposit *) x));
}
static void *_p_comptonsoft__SelectHitsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SelectHits *) x));
}
static void *_p_comptonsoft__SelectTimeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::SelectTime *) x));
}
static void *_p_comptonsoft__SetBadChannelsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetBadChannels *) x));
}
static void *_p_comptonsoft__SetBadFramesTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetBadFrames *) x));
}
static void *_p_comptonsoft__SetChannelPropertiesTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetChannelProperties *) x));
}
static void *_p_comptonsoft__SetDynamicPedestalsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetDynamicPedestals *) x));
}
static void *_p_comptonsoft__SetNoiseLevelsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetNoiseLevels *) x));
}
static void *_p_comptonsoft__SetPedestalsByMedianTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetPedestalsByMedian *) x));
}
static void *_p_comptonsoft__SimulateCXBShieldPlateTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SimulateCXBShieldPlate *) x));
}
static void *_p_comptonsoft__SortEventTreeWithTimeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SortEventTreeWithTime *) x));
}
static void *_p_comptonsoft__UniformlyRandomizeEPITo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::UniformlyRandomizeEPI *) x));
}
static void *_p_comptonsoft__VCSModuleTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::VCSModule *) x));
}
static void *_p_comptonsoft__WeightByInitialDirectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::WeightByInitialDirection *) x));
}
static void *_p_comptonsoft__Write3x3EventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::Write3x3EventTree *) x));
}
static void *_p_comptonsoft__WriteBadPixelsTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteBadPixels *) x));
}
static void *_p_comptonsoft__WriteComptonEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteComptonEventTree *) x));
}
static void *_p_comptonsoft__WriteEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteEventTree *) x));
}
static void *_p_comptonsoft__WriteHitTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteHitTree *) x));
}
static void *_p_comptonsoft__WriteObservationTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteObservationTree *) x));
}
static void *_p_comptonsoft__WriteXrayEventTreeTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteXrayEventTree *) x));
}
static void *_p_comptonsoft__XrayEventCollectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::XrayEventCollection *) x));
}
static void *_p_comptonsoft__XrayEventSelectionTo_p_anlnext__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlnext::BasicModule *)  ((comptonsoft::XrayEventSelection *) x));
}
static void *_p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__BackProjection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::BackProjection *)  ((comptonsoft::BackProjectionSky *) x));
}
static void *_p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__BackProjection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::BackProjection *)  ((comptonsoft::EfficiencyMapSky *) x));
}
static void *_p_comptonsoft__ConstructDetectorForSimulationTo_p_comptonsoft__ConstructDetector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ConstructDetector *)  ((comptonsoft::ConstructDetectorForSimulation *) x));
}
static void *_p_comptonsoft__ConstructFrameTo_p_comptonsoft__ConstructDetector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ConstructDetector *)  ((comptonsoft::ConstructFrame *) x));
}
static void *_p_comptonsoft__RecalculateEPITo_p_comptonsoft__CorrectPHA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::CorrectPHA *)  ((comptonsoft::RecalculateEPI *) x));
}
static void *_p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__EventReconstruction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::EventReconstruction *)  ((comptonsoft::ReadComptonEventTree *) x));
}
static void *_p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__HistogramARM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::HistogramARM *)  ((comptonsoft::HistogramARMByPositionMeasurement *) x));
}
static void *_p_comptonsoft__LoadReducedFrameTo_p_comptonsoft__LoadFrame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::LoadFrame *)  ((comptonsoft::LoadReducedFrame *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__MakeDetectorHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::MakeDetectorHits *)  ((comptonsoft::MakeDetectorHitsWithTimingProcess *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_VME3 *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__ReadEventTree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadEventTree *) (comptonsoft::ReadEventTreeAsRawHits *) ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__ReadEventTree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadEventTree *)  ((comptonsoft::ReadEventTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__ReadEventTreeAsRawHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadEventTreeAsRawHits *)  ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__ReadHitTree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadHitTree *) (comptonsoft::ReadHitTreeAsRawHits *) ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__ReadHitTree(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadHitTree *)  ((comptonsoft::ReadHitTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__ReadHitTreeAsRawHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadHitTreeAsRawHits *)  ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *) (comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsWithTimingProcess *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__AnalyzeDarkFrameTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::AnalyzeDarkFrame *) x));
}
static void *_p_comptonsoft__AnalyzeFrameTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::AnalyzeFrame *) x));
}
static void *_p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_comptonsoft__ApplyEPICompensationTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ApplyEPICompensation *) x));
}
static void *_p_comptonsoft__AssignTimeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::AssignTime *) x));
}
static void *_p_comptonsoft__BackProjectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::BackProjection *) x));
}
static void *_p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::BackProjection *) ((comptonsoft::BackProjectionSky *) x));
}
static void *_p_comptonsoft__CalculatePedestalLevelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::CalculatePedestalLevels *) x));
}
static void *_p_comptonsoft__ComptonModeFilterTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ComptonModeFilter *) x));
}
static void *_p_comptonsoft__ConstructChannelMapTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ConstructChannelMap *) x));
}
static void *_p_comptonsoft__CorrectPHATo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::CorrectPHA *) x));
}
static void *_p_comptonsoft__DefineEventDrivenTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::DefineEventDriven *) x));
}
static void *_p_comptonsoft__DefineFrameTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::DefineFrame *) x));
}
static void *_p_comptonsoft__DetectBadFramesTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::DetectBadFrames *) x));
}
static void *_p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::BackProjection *) ((comptonsoft::EfficiencyMapSky *) x));
}
static void *_p_comptonsoft__EventReconstructionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::EventReconstruction *) x));
}
static void *_p_comptonsoft__EventSelectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::EventSelection *) x));
}
static void *_p_comptonsoft__ExtractPhotoelectronTrajectoryTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ExtractPhotoelectronTrajectory *) x));
}
static void *_p_comptonsoft__ExtractXrayEventImageTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ExtractXrayEventImage *) x));
}
static void *_p_comptonsoft__FillFrameTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::FillFrame *) x));
}
static void *_p_comptonsoft__HXIEventSelectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HXIEventSelection *) x));
}
static void *_p_comptonsoft__Histogram2DDeltaEnergyWithARMTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::Histogram2DDeltaEnergyWithARM *) x));
}
static void *_p_comptonsoft__HistogramARMTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramARM *) x));
}
static void *_p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::HistogramARM *) ((comptonsoft::HistogramARMByPositionMeasurement *) x));
}
static void *_p_comptonsoft__HistogramAzimuthAngleTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramAzimuthAngle *) x));
}
static void *_p_comptonsoft__HistogramDecodedImageTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramDecodedImage *) x));
}
static void *_p_comptonsoft__HistogramEnergy1DTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramEnergy1D *) x));
}
static void *_p_comptonsoft__HistogramEnergy2DTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramEnergy2D *) x));
}
static void *_p_comptonsoft__HistogramEnergySpectrumTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramEnergySpectrum *) x));
}
static void *_p_comptonsoft__HistogramFramePedestalTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramFramePedestal *) x));
}
static void *_p_comptonsoft__HistogramPHATo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramPHA *) x));
}
static void *_p_comptonsoft__HistogramRawFrameImageTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramRawFrameImage *) x));
}
static void *_p_comptonsoft__HistogramXrayEventAzimuthAngleTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramXrayEventAzimuthAngle *) x));
}
static void *_p_comptonsoft__HistogramXrayEventPropertiesTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramXrayEventProperties *) x));
}
static void *_p_comptonsoft__HistogramXrayEventSpectrumTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramXrayEventSpectrum *) x));
}
static void *_p_comptonsoft__InitialParticleTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::InitialParticleTree *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *)(comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsWithTimingProcess *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__PatternGeneratorTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::PatternGenerator *) x));
}
static void *_p_comptonsoft__ProcessCodedApertureTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ProcessCodedAperture *) x));
}
static void *_p_comptonsoft__QuickAnalysisForDSDTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::QuickAnalysisForDSD *) x));
}
static void *_p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::EventReconstruction *) ((comptonsoft::ReadComptonEventTree *) x));
}
static void *_p_comptonsoft__ReadDataFileTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadDataFile *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_VME3 *) x));
}
static void *_p_comptonsoft__ReadEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadEventTree *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadEventTree *)(comptonsoft::ReadEventTreeAsRawHits *) ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadEventTree *) ((comptonsoft::ReadEventTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadHitTree *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadHitTree *)(comptonsoft::ReadHitTreeAsRawHits *) ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadHitTree *) ((comptonsoft::ReadHitTreeAsRawHits *) x));
}
static void *_p_comptonsoft__RecalculateEPITo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::CorrectPHA *) ((comptonsoft::RecalculateEPI *) x));
}
static void *_p_comptonsoft__RecalculateSimulationNoiseTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::RecalculateSimulationNoise *) x));
}
static void *_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggeredTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *) x));
}
static void *_p_comptonsoft__ResponseMatrixTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ResponseMatrix *) x));
}
static void *_p_comptonsoft__SelectEventsOnFocalPlaneTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SelectEventsOnFocalPlane *) x));
}
static void *_p_comptonsoft__SelectHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SelectHits *) x));
}
static void *_p_comptonsoft__SetBadChannelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetBadChannels *) x));
}
static void *_p_comptonsoft__SetBadFramesTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetBadFrames *) x));
}
static void *_p_comptonsoft__SetChannelPropertiesTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetChannelProperties *) x));
}
static void *_p_comptonsoft__SetDynamicPedestalsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetDynamicPedestals *) x));
}
static void *_p_comptonsoft__SetNoiseLevelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetNoiseLevels *) x));
}
static void *_p_comptonsoft__SetPedestalsByMedianTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetPedestalsByMedian *) x));
}
static void *_p_comptonsoft__SimulateCXBShieldPlateTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SimulateCXBShieldPlate *) x));
}
static void *_p_comptonsoft__SortEventTreeWithTimeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SortEventTreeWithTime *) x));
}
static void *_p_comptonsoft__UniformlyRandomizeEPITo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::UniformlyRandomizeEPI *) x));
}
static void *_p_comptonsoft__Write3x3EventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::Write3x3EventTree *) x));
}
static void *_p_comptonsoft__WriteBadPixelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteBadPixels *) x));
}
static void *_p_comptonsoft__WriteComptonEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteComptonEventTree *) x));
}
static void *_p_comptonsoft__WriteEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteEventTree *) x));
}
static void *_p_comptonsoft__WriteHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteHitTree *) x));
}
static void *_p_comptonsoft__WriteObservationTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteObservationTree *) x));
}
static void *_p_comptonsoft__WriteXrayEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteXrayEventTree *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__BasicPrimaryGen = {"_p_anlgeant4__BasicPrimaryGen", "anlgeant4::BasicPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__GaussianBeamPrimaryGen = {"_p_anlgeant4__GaussianBeamPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__NucleusPrimaryGen = {"_p_anlgeant4__NucleusPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__NucleusPrimaryGenInVolume = {"_p_anlgeant4__NucleusPrimaryGenInVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PlaneWavePrimaryGen = {"_p_anlgeant4__PlaneWavePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen = {"_p_anlgeant4__PlaneWaveRectanglePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PointSourcePrimaryGen = {"_p_anlgeant4__PointSourcePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume = {"_p_anlgeant4__PrimaryGenUniformSourceInVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__IsotropicPrimaryGen = {"_p_anlgeant4__IsotropicPrimaryGen", "anlgeant4::IsotropicPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__StandardUserActionAssembly = {"_p_anlgeant4__StandardUserActionAssembly", "anlgeant4::StandardUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLPhysicsList = {"_p_anlgeant4__VANLPhysicsList", "anlgeant4::VANLPhysicsList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLPrimaryGen = {"_p_anlgeant4__VANLPrimaryGen", "anlgeant4::VANLPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VAppendableUserActionAssembly = {"_p_anlgeant4__VAppendableUserActionAssembly", "anlgeant4::VAppendableUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VMasterUserActionAssembly = {"_p_anlgeant4__VMasterUserActionAssembly", "anlgeant4::VMasterUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VUserActionAssembly = {"_p_anlgeant4__VUserActionAssembly", "anlgeant4::VUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlnext__BasicModule = {"_p_anlnext__BasicModule", "anlnext::BasicModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__Geant4Body = {"_p_anlgeant4__Geant4Body", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__Geant4Simple = {"_p_anlgeant4__Geant4Simple", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLGeometry = {"_p_anlgeant4__VANLGeometry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen = {"_p_comptonsoft__AHRadiationBackgroundPrimaryGen", "comptonsoft::AHRadiationBackgroundPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime = {"_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime", "comptonsoft::AHRadiationBackgroundPrimaryGenSelectExposureTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ActivationUserActionAssembly = {"_p_comptonsoft__ActivationUserActionAssembly", "comptonsoft::ActivationUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AnalyzeDarkFrame = {"_p_comptonsoft__AnalyzeDarkFrame", "comptonsoft::AnalyzeDarkFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AnalyzeFrame = {"_p_comptonsoft__AnalyzeFrame", "comptonsoft::AnalyzeFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AnalyzeHits = {"_p_comptonsoft__AnalyzeHits", "comptonsoft::AnalyzeHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ApplyEPICompensation = {"_p_comptonsoft__ApplyEPICompensation", "comptonsoft::ApplyEPICompensation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AssignG4CopyNumber = {"_p_comptonsoft__AssignG4CopyNumber", "comptonsoft::AssignG4CopyNumber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__AssignTime = {"_p_comptonsoft__AssignTime", "comptonsoft::AssignTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__BackProjection = {"_p_comptonsoft__BackProjection", "comptonsoft::BackProjection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__BackProjectionSky = {"_p_comptonsoft__BackProjectionSky", "comptonsoft::BackProjectionSky *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__CSHitCollection = {"_p_comptonsoft__CSHitCollection", "comptonsoft::CSHitCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__CalculatePedestalLevels = {"_p_comptonsoft__CalculatePedestalLevels", "comptonsoft::CalculatePedestalLevels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ComptonEventFilter = {"_p_comptonsoft__ComptonEventFilter", "comptonsoft::ComptonEventFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ComptonModeFilter = {"_p_comptonsoft__ComptonModeFilter", "comptonsoft::ComptonModeFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructChannelMap = {"_p_comptonsoft__ConstructChannelMap", "comptonsoft::ConstructChannelMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructDetector = {"_p_comptonsoft__ConstructDetector", "comptonsoft::ConstructDetector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructDetectorForSimulation = {"_p_comptonsoft__ConstructDetectorForSimulation", "comptonsoft::ConstructDetectorForSimulation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructFrame = {"_p_comptonsoft__ConstructFrame", "comptonsoft::ConstructFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__CorrectPHA = {"_p_comptonsoft__CorrectPHA", "comptonsoft::CorrectPHA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__CreateRootFile = {"_p_comptonsoft__CreateRootFile", "comptonsoft::CreateRootFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__DefineEventDriven = {"_p_comptonsoft__DefineEventDriven", "comptonsoft::DefineEventDriven *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__DefineFrame = {"_p_comptonsoft__DefineFrame", "comptonsoft::DefineFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__DetectBadFrames = {"_p_comptonsoft__DetectBadFrames", "comptonsoft::DetectBadFrames *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__DumpMass = {"_p_comptonsoft__DumpMass", "comptonsoft::DumpMass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__EfficiencyMapSky = {"_p_comptonsoft__EfficiencyMapSky", "comptonsoft::EfficiencyMapSky *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__EventReconstruction = {"_p_comptonsoft__EventReconstruction", "comptonsoft::EventReconstruction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__EventSelection = {"_p_comptonsoft__EventSelection", "comptonsoft::EventSelection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ExtractPhotoelectronTrajectory = {"_p_comptonsoft__ExtractPhotoelectronTrajectory", "comptonsoft::ExtractPhotoelectronTrajectory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ExtractXrayEventImage = {"_p_comptonsoft__ExtractXrayEventImage", "comptonsoft::ExtractXrayEventImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__FillFrame = {"_p_comptonsoft__FillFrame", "comptonsoft::FillFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__FilterByGoodTimeIntervals = {"_p_comptonsoft__FilterByGoodTimeIntervals", "comptonsoft::FilterByGoodTimeIntervals *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__GetInputFilesFromDirectory = {"_p_comptonsoft__GetInputFilesFromDirectory", "comptonsoft::GetInputFilesFromDirectory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HXIEventSelection = {"_p_comptonsoft__HXIEventSelection", "comptonsoft::HXIEventSelection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__Histogram2DDeltaEnergyWithARM = {"_p_comptonsoft__Histogram2DDeltaEnergyWithARM", "comptonsoft::Histogram2DDeltaEnergyWithARM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramARM = {"_p_comptonsoft__HistogramARM", "comptonsoft::HistogramARM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramARMByPositionMeasurement = {"_p_comptonsoft__HistogramARMByPositionMeasurement", "comptonsoft::HistogramARMByPositionMeasurement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramAzimuthAngle = {"_p_comptonsoft__HistogramAzimuthAngle", "comptonsoft::HistogramAzimuthAngle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramDecodedImage = {"_p_comptonsoft__HistogramDecodedImage", "comptonsoft::HistogramDecodedImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramEnergy1D = {"_p_comptonsoft__HistogramEnergy1D", "comptonsoft::HistogramEnergy1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramEnergy2D = {"_p_comptonsoft__HistogramEnergy2D", "comptonsoft::HistogramEnergy2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramEnergySpectrum = {"_p_comptonsoft__HistogramEnergySpectrum", "comptonsoft::HistogramEnergySpectrum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramFramePedestal = {"_p_comptonsoft__HistogramFramePedestal", "comptonsoft::HistogramFramePedestal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramPHA = {"_p_comptonsoft__HistogramPHA", "comptonsoft::HistogramPHA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramRawFrameImage = {"_p_comptonsoft__HistogramRawFrameImage", "comptonsoft::HistogramRawFrameImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramXrayEventAzimuthAngle = {"_p_comptonsoft__HistogramXrayEventAzimuthAngle", "comptonsoft::HistogramXrayEventAzimuthAngle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramXrayEventProperties = {"_p_comptonsoft__HistogramXrayEventProperties", "comptonsoft::HistogramXrayEventProperties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramXrayEventSpectrum = {"_p_comptonsoft__HistogramXrayEventSpectrum", "comptonsoft::HistogramXrayEventSpectrum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__InitialConditionFilter = {"_p_comptonsoft__InitialConditionFilter", "comptonsoft::InitialConditionFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__InitialParticleTree = {"_p_comptonsoft__InitialParticleTree", "comptonsoft::InitialParticleTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__IsotopeDatabaseAccess = {"_p_comptonsoft__IsotopeDatabaseAccess", "comptonsoft::IsotopeDatabaseAccess *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ListPrimaryGen = {"_p_comptonsoft__ListPrimaryGen", "comptonsoft::ListPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__LoadFrame = {"_p_comptonsoft__LoadFrame", "comptonsoft::LoadFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__LoadReducedFrame = {"_p_comptonsoft__LoadReducedFrame", "comptonsoft::LoadReducedFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__LoadRootFrame = {"_p_comptonsoft__LoadRootFrame", "comptonsoft::LoadRootFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeDetectorHits = {"_p_comptonsoft__MakeDetectorHits", "comptonsoft::MakeDetectorHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess = {"_p_comptonsoft__MakeDetectorHitsWithTimingProcess", "comptonsoft::MakeDetectorHitsWithTimingProcess *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeRawHits = {"_p_comptonsoft__MakeRawHits", "comptonsoft::MakeRawHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ObservationPickUpData = {"_p_comptonsoft__ObservationPickUpData", "comptonsoft::ObservationPickUpData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__PatternGenerator = {"_p_comptonsoft__PatternGenerator", "comptonsoft::PatternGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__PhysicsListManager = {"_p_comptonsoft__PhysicsListManager", "comptonsoft::PhysicsListManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ProcessCodedAperture = {"_p_comptonsoft__ProcessCodedAperture", "comptonsoft::ProcessCodedAperture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__QuickAnalysisForDSD = {"_p_comptonsoft__QuickAnalysisForDSD", "comptonsoft::QuickAnalysisForDSD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__RIDecayCalculation = {"_p_comptonsoft__RIDecayCalculation", "comptonsoft::RIDecayCalculation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly = {"_p_comptonsoft__RadioactiveDecayUserActionAssembly", "comptonsoft::RadioactiveDecayUserActionAssembly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadComptonEventTree = {"_p_comptonsoft__ReadComptonEventTree", "comptonsoft::ReadComptonEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile = {"_p_comptonsoft__ReadDataFile", "comptonsoft::ReadDataFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_NB0 = {"_p_comptonsoft__ReadDataFile_NB0", "comptonsoft::ReadDataFile_NB0 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_NT = {"_p_comptonsoft__ReadDataFile_NT", "comptonsoft::ReadDataFile_NT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_SpW2 = {"_p_comptonsoft__ReadDataFile_SpW2", "comptonsoft::ReadDataFile_SpW2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_VME3 = {"_p_comptonsoft__ReadDataFile_VME3", "comptonsoft::ReadDataFile_VME3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTree = {"_p_comptonsoft__ReadEventTree", "comptonsoft::ReadEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTreeAsDetectorHits = {"_p_comptonsoft__ReadEventTreeAsDetectorHits", "comptonsoft::ReadEventTreeAsDetectorHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTreeAsRawHits = {"_p_comptonsoft__ReadEventTreeAsRawHits", "comptonsoft::ReadEventTreeAsRawHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTree = {"_p_comptonsoft__ReadHitTree", "comptonsoft::ReadHitTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTreeAsDetectorHits = {"_p_comptonsoft__ReadHitTreeAsDetectorHits", "comptonsoft::ReadHitTreeAsDetectorHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTreeAsRawHits = {"_p_comptonsoft__ReadHitTreeAsRawHits", "comptonsoft::ReadHitTreeAsRawHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadXrayEventTree = {"_p_comptonsoft__ReadXrayEventTree", "comptonsoft::ReadXrayEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__RecalculateEPI = {"_p_comptonsoft__RecalculateEPI", "comptonsoft::RecalculateEPI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__RecalculateSimulationNoise = {"_p_comptonsoft__RecalculateSimulationNoise", "comptonsoft::RecalculateSimulationNoise *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered = {"_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered", "comptonsoft::RescaleSimulationNoiseOfSGDSiUntriggered *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ResponseMatrix = {"_p_comptonsoft__ResponseMatrix", "comptonsoft::ResponseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SampleOpticalDepth = {"_p_comptonsoft__SampleOpticalDepth", "comptonsoft::SampleOpticalDepth *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SaveData = {"_p_comptonsoft__SaveData", "comptonsoft::SaveData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ScatteringPickUpData = {"_p_comptonsoft__ScatteringPickUpData", "comptonsoft::ScatteringPickUpData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectEventsOnFocalPlane = {"_p_comptonsoft__SelectEventsOnFocalPlane", "comptonsoft::SelectEventsOnFocalPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectEventsWithDetectorSpectrum = {"_p_comptonsoft__SelectEventsWithDetectorSpectrum", "comptonsoft::SelectEventsWithDetectorSpectrum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectFullDeposit = {"_p_comptonsoft__SelectFullDeposit", "comptonsoft::SelectFullDeposit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectHits = {"_p_comptonsoft__SelectHits", "comptonsoft::SelectHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectTime = {"_p_comptonsoft__SelectTime", "comptonsoft::SelectTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetBadChannels = {"_p_comptonsoft__SetBadChannels", "comptonsoft::SetBadChannels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetBadFrames = {"_p_comptonsoft__SetBadFrames", "comptonsoft::SetBadFrames *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetChannelProperties = {"_p_comptonsoft__SetChannelProperties", "comptonsoft::SetChannelProperties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetDynamicPedestals = {"_p_comptonsoft__SetDynamicPedestals", "comptonsoft::SetDynamicPedestals *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetNoiseLevels = {"_p_comptonsoft__SetNoiseLevels", "comptonsoft::SetNoiseLevels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SetPedestalsByMedian = {"_p_comptonsoft__SetPedestalsByMedian", "comptonsoft::SetPedestalsByMedian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SimulateCXBShieldPlate = {"_p_comptonsoft__SimulateCXBShieldPlate", "comptonsoft::SimulateCXBShieldPlate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SortEventTreeWithTime = {"_p_comptonsoft__SortEventTreeWithTime", "comptonsoft::SortEventTreeWithTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__UniformlyRandomizeEPI = {"_p_comptonsoft__UniformlyRandomizeEPI", "comptonsoft::UniformlyRandomizeEPI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__VCSModule = {"_p_comptonsoft__VCSModule", "comptonsoft::VCSModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WeightByInitialDirection = {"_p_comptonsoft__WeightByInitialDirection", "comptonsoft::WeightByInitialDirection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__Write3x3EventTree = {"_p_comptonsoft__Write3x3EventTree", "comptonsoft::Write3x3EventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteBadPixels = {"_p_comptonsoft__WriteBadPixels", "comptonsoft::WriteBadPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteComptonEventTree = {"_p_comptonsoft__WriteComptonEventTree", "comptonsoft::WriteComptonEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteEventTree = {"_p_comptonsoft__WriteEventTree", "comptonsoft::WriteEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteHitTree = {"_p_comptonsoft__WriteHitTree", "comptonsoft::WriteHitTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteObservationTree = {"_p_comptonsoft__WriteObservationTree", "comptonsoft::WriteObservationTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteXrayEventTree = {"_p_comptonsoft__WriteXrayEventTree", "comptonsoft::WriteXrayEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__XrayEventCollection = {"_p_comptonsoft__XrayEventCollection", "comptonsoft::XrayEventCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__XrayEventSelection = {"_p_comptonsoft__XrayEventSelection", "comptonsoft::XrayEventSelection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t = {"_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t", "anlnext::ModuleParamList *|std::list< std::shared_ptr< anlnext::VModuleParameter >,std::allocator< std::shared_ptr< anlnext::VModuleParameter > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator = {"_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator", "anlnext::ModuleParamConstIter *|std::list< std::shared_ptr< anlnext::VModuleParameter >,std::allocator< std::shared_ptr< anlnext::VModuleParameter > > >::const_iterator *|std::list< std::shared_ptr< anlnext::VModuleParameter > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator = {"_p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator", "anlnext::ModuleParamIter *|std::list< std::shared_ptr< anlnext::VModuleParameter >,std::allocator< std::shared_ptr< anlnext::VModuleParameter > > >::iterator *|std::list< std::shared_ptr< anlnext::VModuleParameter > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_anlnext__VModuleParameter_t = {"_p_std__shared_ptrT_anlnext__VModuleParameter_t", "anlnext::ModuleParam_sptr *|std::shared_ptr< anlnext::VModuleParameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_double_double_t_t = {"_p_std__vectorT_std__pairT_double_double_t_t", "std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_t = {"_p_std__vectorT_std__pairT_int_int_t_t", "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_anlgeant4__BasicPrimaryGen,
  &_swigt__p_anlgeant4__GaussianBeamPrimaryGen,
  &_swigt__p_anlgeant4__Geant4Body,
  &_swigt__p_anlgeant4__Geant4Simple,
  &_swigt__p_anlgeant4__IsotropicPrimaryGen,
  &_swigt__p_anlgeant4__NucleusPrimaryGen,
  &_swigt__p_anlgeant4__NucleusPrimaryGenInVolume,
  &_swigt__p_anlgeant4__PlaneWavePrimaryGen,
  &_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen,
  &_swigt__p_anlgeant4__PointSourcePrimaryGen,
  &_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume,
  &_swigt__p_anlgeant4__StandardUserActionAssembly,
  &_swigt__p_anlgeant4__VANLGeometry,
  &_swigt__p_anlgeant4__VANLPhysicsList,
  &_swigt__p_anlgeant4__VANLPrimaryGen,
  &_swigt__p_anlgeant4__VAppendableUserActionAssembly,
  &_swigt__p_anlgeant4__VMasterUserActionAssembly,
  &_swigt__p_anlgeant4__VUserActionAssembly,
  &_swigt__p_anlnext__BasicModule,
  &_swigt__p_char,
  &_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen,
  &_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime,
  &_swigt__p_comptonsoft__ActivationUserActionAssembly,
  &_swigt__p_comptonsoft__AnalyzeDarkFrame,
  &_swigt__p_comptonsoft__AnalyzeFrame,
  &_swigt__p_comptonsoft__AnalyzeHits,
  &_swigt__p_comptonsoft__ApplyEPICompensation,
  &_swigt__p_comptonsoft__AssignG4CopyNumber,
  &_swigt__p_comptonsoft__AssignTime,
  &_swigt__p_comptonsoft__BackProjection,
  &_swigt__p_comptonsoft__BackProjectionSky,
  &_swigt__p_comptonsoft__CSHitCollection,
  &_swigt__p_comptonsoft__CalculatePedestalLevels,
  &_swigt__p_comptonsoft__ComptonEventFilter,
  &_swigt__p_comptonsoft__ComptonModeFilter,
  &_swigt__p_comptonsoft__ConstructChannelMap,
  &_swigt__p_comptonsoft__ConstructDetector,
  &_swigt__p_comptonsoft__ConstructDetectorForSimulation,
  &_swigt__p_comptonsoft__ConstructFrame,
  &_swigt__p_comptonsoft__CorrectPHA,
  &_swigt__p_comptonsoft__CreateRootFile,
  &_swigt__p_comptonsoft__DefineEventDriven,
  &_swigt__p_comptonsoft__DefineFrame,
  &_swigt__p_comptonsoft__DetectBadFrames,
  &_swigt__p_comptonsoft__DumpMass,
  &_swigt__p_comptonsoft__EfficiencyMapSky,
  &_swigt__p_comptonsoft__EventReconstruction,
  &_swigt__p_comptonsoft__EventSelection,
  &_swigt__p_comptonsoft__ExtractPhotoelectronTrajectory,
  &_swigt__p_comptonsoft__ExtractXrayEventImage,
  &_swigt__p_comptonsoft__FillFrame,
  &_swigt__p_comptonsoft__FilterByGoodTimeIntervals,
  &_swigt__p_comptonsoft__GetInputFilesFromDirectory,
  &_swigt__p_comptonsoft__HXIEventSelection,
  &_swigt__p_comptonsoft__Histogram2DDeltaEnergyWithARM,
  &_swigt__p_comptonsoft__HistogramARM,
  &_swigt__p_comptonsoft__HistogramARMByPositionMeasurement,
  &_swigt__p_comptonsoft__HistogramAzimuthAngle,
  &_swigt__p_comptonsoft__HistogramDecodedImage,
  &_swigt__p_comptonsoft__HistogramEnergy1D,
  &_swigt__p_comptonsoft__HistogramEnergy2D,
  &_swigt__p_comptonsoft__HistogramEnergySpectrum,
  &_swigt__p_comptonsoft__HistogramFramePedestal,
  &_swigt__p_comptonsoft__HistogramPHA,
  &_swigt__p_comptonsoft__HistogramRawFrameImage,
  &_swigt__p_comptonsoft__HistogramXrayEventAzimuthAngle,
  &_swigt__p_comptonsoft__HistogramXrayEventProperties,
  &_swigt__p_comptonsoft__HistogramXrayEventSpectrum,
  &_swigt__p_comptonsoft__InitialConditionFilter,
  &_swigt__p_comptonsoft__InitialParticleTree,
  &_swigt__p_comptonsoft__IsotopeDatabaseAccess,
  &_swigt__p_comptonsoft__ListPrimaryGen,
  &_swigt__p_comptonsoft__LoadFrame,
  &_swigt__p_comptonsoft__LoadReducedFrame,
  &_swigt__p_comptonsoft__LoadRootFrame,
  &_swigt__p_comptonsoft__MakeDetectorHits,
  &_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess,
  &_swigt__p_comptonsoft__MakeRawHits,
  &_swigt__p_comptonsoft__ObservationPickUpData,
  &_swigt__p_comptonsoft__PatternGenerator,
  &_swigt__p_comptonsoft__PhysicsListManager,
  &_swigt__p_comptonsoft__ProcessCodedAperture,
  &_swigt__p_comptonsoft__QuickAnalysisForDSD,
  &_swigt__p_comptonsoft__RIDecayCalculation,
  &_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly,
  &_swigt__p_comptonsoft__ReadComptonEventTree,
  &_swigt__p_comptonsoft__ReadDataFile,
  &_swigt__p_comptonsoft__ReadDataFile_NB0,
  &_swigt__p_comptonsoft__ReadDataFile_NT,
  &_swigt__p_comptonsoft__ReadDataFile_SpW2,
  &_swigt__p_comptonsoft__ReadDataFile_VME3,
  &_swigt__p_comptonsoft__ReadEventTree,
  &_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits,
  &_swigt__p_comptonsoft__ReadEventTreeAsRawHits,
  &_swigt__p_comptonsoft__ReadHitTree,
  &_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits,
  &_swigt__p_comptonsoft__ReadHitTreeAsRawHits,
  &_swigt__p_comptonsoft__ReadXrayEventTree,
  &_swigt__p_comptonsoft__RecalculateEPI,
  &_swigt__p_comptonsoft__RecalculateSimulationNoise,
  &_swigt__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered,
  &_swigt__p_comptonsoft__ResponseMatrix,
  &_swigt__p_comptonsoft__SampleOpticalDepth,
  &_swigt__p_comptonsoft__SaveData,
  &_swigt__p_comptonsoft__ScatteringPickUpData,
  &_swigt__p_comptonsoft__SelectEventsOnFocalPlane,
  &_swigt__p_comptonsoft__SelectEventsWithDetectorSpectrum,
  &_swigt__p_comptonsoft__SelectFullDeposit,
  &_swigt__p_comptonsoft__SelectHits,
  &_swigt__p_comptonsoft__SelectTime,
  &_swigt__p_comptonsoft__SetBadChannels,
  &_swigt__p_comptonsoft__SetBadFrames,
  &_swigt__p_comptonsoft__SetChannelProperties,
  &_swigt__p_comptonsoft__SetDynamicPedestals,
  &_swigt__p_comptonsoft__SetNoiseLevels,
  &_swigt__p_comptonsoft__SetPedestalsByMedian,
  &_swigt__p_comptonsoft__SimulateCXBShieldPlate,
  &_swigt__p_comptonsoft__SortEventTreeWithTime,
  &_swigt__p_comptonsoft__UniformlyRandomizeEPI,
  &_swigt__p_comptonsoft__VCSModule,
  &_swigt__p_comptonsoft__WeightByInitialDirection,
  &_swigt__p_comptonsoft__Write3x3EventTree,
  &_swigt__p_comptonsoft__WriteBadPixels,
  &_swigt__p_comptonsoft__WriteComptonEventTree,
  &_swigt__p_comptonsoft__WriteEventTree,
  &_swigt__p_comptonsoft__WriteHitTree,
  &_swigt__p_comptonsoft__WriteObservationTree,
  &_swigt__p_comptonsoft__WriteXrayEventTree,
  &_swigt__p_comptonsoft__XrayEventCollection,
  &_swigt__p_comptonsoft__XrayEventSelection,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_second_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t,
  &_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator,
  &_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator,
  &_swigt__p_std__shared_ptrT_anlnext__VModuleParameter_t,
  &_swigt__p_std__vectorT_std__pairT_double_double_t_t,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__GaussianBeamPrimaryGen[] = {{&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__NucleusPrimaryGen[] = {{&_swigt__p_anlgeant4__NucleusPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__NucleusPrimaryGenInVolume[] = {{&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PlaneWavePrimaryGen[] = {{&_swigt__p_anlgeant4__PlaneWavePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PlaneWaveRectanglePrimaryGen[] = {{&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PointSourcePrimaryGen[] = {{&_swigt__p_anlgeant4__PointSourcePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PrimaryGenUniformSourceInVolume[] = {{&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__BasicPrimaryGen[] = {  {&_swigt__p_anlgeant4__BasicPrimaryGen, 0, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, _p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__ListPrimaryGen, _p_comptonsoft__ListPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__IsotropicPrimaryGen[] = {  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, 0, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__IsotropicPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, _p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__IsotropicPrimaryGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__StandardUserActionAssembly[] = {  {&_swigt__p_anlgeant4__StandardUserActionAssembly, 0, 0, 0},  {&_swigt__p_comptonsoft__ActivationUserActionAssembly, _p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__StandardUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly, _p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__StandardUserActionAssembly, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLPhysicsList[] = {  {&_swigt__p_anlgeant4__VANLPhysicsList, 0, 0, 0},  {&_swigt__p_comptonsoft__PhysicsListManager, _p_comptonsoft__PhysicsListManagerTo_p_anlgeant4__VANLPhysicsList, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLPrimaryGen[] = {  {&_swigt__p_anlgeant4__VANLPrimaryGen, 0, 0, 0},  {&_swigt__p_anlgeant4__BasicPrimaryGen, _p_anlgeant4__BasicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, _p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__ListPrimaryGen, _p_comptonsoft__ListPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VAppendableUserActionAssembly[] = {  {&_swigt__p_anlgeant4__VAppendableUserActionAssembly, 0, 0, 0},  {&_swigt__p_comptonsoft__ObservationPickUpData, _p_comptonsoft__ObservationPickUpDataTo_p_anlgeant4__VAppendableUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__SampleOpticalDepth, _p_comptonsoft__SampleOpticalDepthTo_p_anlgeant4__VAppendableUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__ScatteringPickUpData, _p_comptonsoft__ScatteringPickUpDataTo_p_anlgeant4__VAppendableUserActionAssembly, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VMasterUserActionAssembly[] = {  {&_swigt__p_anlgeant4__VMasterUserActionAssembly, 0, 0, 0},  {&_swigt__p_anlgeant4__StandardUserActionAssembly, _p_anlgeant4__StandardUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__ActivationUserActionAssembly, _p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly, _p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__VMasterUserActionAssembly, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VUserActionAssembly[] = {  {&_swigt__p_anlgeant4__VUserActionAssembly, 0, 0, 0},  {&_swigt__p_anlgeant4__StandardUserActionAssembly, _p_anlgeant4__StandardUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_anlgeant4__VAppendableUserActionAssembly, _p_anlgeant4__VAppendableUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_anlgeant4__VMasterUserActionAssembly, _p_anlgeant4__VMasterUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__ActivationUserActionAssembly, _p_comptonsoft__ActivationUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__ObservationPickUpData, _p_comptonsoft__ObservationPickUpDataTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly, _p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__SampleOpticalDepth, _p_comptonsoft__SampleOpticalDepthTo_p_anlgeant4__VUserActionAssembly, 0, 0},  {&_swigt__p_comptonsoft__ScatteringPickUpData, _p_comptonsoft__ScatteringPickUpDataTo_p_anlgeant4__VUserActionAssembly, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__Geant4Body[] = {{&_swigt__p_anlgeant4__Geant4Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__Geant4Simple[] = {{&_swigt__p_anlgeant4__Geant4Simple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLGeometry[] = {{&_swigt__p_anlgeant4__VANLGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlnext__BasicModule[] = {  {&_swigt__p_anlnext__BasicModule, 0, 0, 0},  {&_swigt__p_anlgeant4__BasicPrimaryGen, _p_anlgeant4__BasicPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__Geant4Body, _p_anlgeant4__Geant4BodyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__Geant4Simple, _p_anlgeant4__Geant4SimpleTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__StandardUserActionAssembly, _p_anlgeant4__StandardUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLGeometry, _p_anlgeant4__VANLGeometryTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLPhysicsList, _p_anlgeant4__VANLPhysicsListTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLPrimaryGen, _p_anlgeant4__VANLPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VAppendableUserActionAssembly, _p_anlgeant4__VAppendableUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VMasterUserActionAssembly, _p_anlgeant4__VMasterUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VUserActionAssembly, _p_anlgeant4__VUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, _p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTimeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ActivationUserActionAssembly, _p_comptonsoft__ActivationUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeDarkFrame, _p_comptonsoft__AnalyzeDarkFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeFrame, _p_comptonsoft__AnalyzeFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ApplyEPICompensation, _p_comptonsoft__ApplyEPICompensationTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AssignG4CopyNumber, _p_comptonsoft__AssignG4CopyNumberTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AssignTime, _p_comptonsoft__AssignTimeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjection, _p_comptonsoft__BackProjectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjectionSky, _p_comptonsoft__BackProjectionSkyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CSHitCollection, _p_comptonsoft__CSHitCollectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CalculatePedestalLevels, _p_comptonsoft__CalculatePedestalLevelsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonEventFilter, _p_comptonsoft__ComptonEventFilterTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonModeFilter, _p_comptonsoft__ComptonModeFilterTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructChannelMap, _p_comptonsoft__ConstructChannelMapTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructDetector, _p_comptonsoft__ConstructDetectorTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructDetectorForSimulation, _p_comptonsoft__ConstructDetectorForSimulationTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructFrame, _p_comptonsoft__ConstructFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CorrectPHA, _p_comptonsoft__CorrectPHATo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CreateRootFile, _p_comptonsoft__CreateRootFileTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__DefineEventDriven, _p_comptonsoft__DefineEventDrivenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__DefineFrame, _p_comptonsoft__DefineFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__DetectBadFrames, _p_comptonsoft__DetectBadFramesTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__DumpMass, _p_comptonsoft__DumpMassTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EfficiencyMapSky, _p_comptonsoft__EfficiencyMapSkyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EventReconstruction, _p_comptonsoft__EventReconstructionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EventSelection, _p_comptonsoft__EventSelectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ExtractPhotoelectronTrajectory, _p_comptonsoft__ExtractPhotoelectronTrajectoryTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ExtractXrayEventImage, _p_comptonsoft__ExtractXrayEventImageTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__FillFrame, _p_comptonsoft__FillFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__FilterByGoodTimeIntervals, _p_comptonsoft__FilterByGoodTimeIntervalsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__GetInputFilesFromDirectory, _p_comptonsoft__GetInputFilesFromDirectoryTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HXIEventSelection, _p_comptonsoft__HXIEventSelectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__Histogram2DDeltaEnergyWithARM, _p_comptonsoft__Histogram2DDeltaEnergyWithARMTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARM, _p_comptonsoft__HistogramARMTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, _p_comptonsoft__HistogramARMByPositionMeasurementTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramAzimuthAngle, _p_comptonsoft__HistogramAzimuthAngleTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramDecodedImage, _p_comptonsoft__HistogramDecodedImageTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy1D, _p_comptonsoft__HistogramEnergy1DTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy2D, _p_comptonsoft__HistogramEnergy2DTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergySpectrum, _p_comptonsoft__HistogramEnergySpectrumTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramFramePedestal, _p_comptonsoft__HistogramFramePedestalTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramPHA, _p_comptonsoft__HistogramPHATo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramRawFrameImage, _p_comptonsoft__HistogramRawFrameImageTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventAzimuthAngle, _p_comptonsoft__HistogramXrayEventAzimuthAngleTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventProperties, _p_comptonsoft__HistogramXrayEventPropertiesTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventSpectrum, _p_comptonsoft__HistogramXrayEventSpectrumTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__InitialConditionFilter, _p_comptonsoft__InitialConditionFilterTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__InitialParticleTree, _p_comptonsoft__InitialParticleTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ListPrimaryGen, _p_comptonsoft__ListPrimaryGenTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__LoadFrame, _p_comptonsoft__LoadFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__LoadReducedFrame, _p_comptonsoft__LoadReducedFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__LoadRootFrame, _p_comptonsoft__LoadRootFrameTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess, _p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ObservationPickUpData, _p_comptonsoft__ObservationPickUpDataTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__PatternGenerator, _p_comptonsoft__PatternGeneratorTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__PhysicsListManager, _p_comptonsoft__PhysicsListManagerTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ProcessCodedAperture, _p_comptonsoft__ProcessCodedApertureTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__QuickAnalysisForDSD, _p_comptonsoft__QuickAnalysisForDSDTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly, _p_comptonsoft__RadioactiveDecayUserActionAssemblyTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadComptonEventTree, _p_comptonsoft__ReadComptonEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile, _p_comptonsoft__ReadDataFileTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTree, _p_comptonsoft__ReadEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, _p_comptonsoft__ReadEventTreeAsRawHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTree, _p_comptonsoft__ReadHitTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, _p_comptonsoft__ReadHitTreeAsRawHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadXrayEventTree, _p_comptonsoft__ReadXrayEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateEPI, _p_comptonsoft__RecalculateEPITo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateSimulationNoise, _p_comptonsoft__RecalculateSimulationNoiseTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered, _p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggeredTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ResponseMatrix, _p_comptonsoft__ResponseMatrixTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SampleOpticalDepth, _p_comptonsoft__SampleOpticalDepthTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SaveData, _p_comptonsoft__SaveDataTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ScatteringPickUpData, _p_comptonsoft__ScatteringPickUpDataTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectEventsOnFocalPlane, _p_comptonsoft__SelectEventsOnFocalPlaneTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectEventsWithDetectorSpectrum, _p_comptonsoft__SelectEventsWithDetectorSpectrumTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectFullDeposit, _p_comptonsoft__SelectFullDepositTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectHits, _p_comptonsoft__SelectHitsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectTime, _p_comptonsoft__SelectTimeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadChannels, _p_comptonsoft__SetBadChannelsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadFrames, _p_comptonsoft__SetBadFramesTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetChannelProperties, _p_comptonsoft__SetChannelPropertiesTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetDynamicPedestals, _p_comptonsoft__SetDynamicPedestalsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetNoiseLevels, _p_comptonsoft__SetNoiseLevelsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetPedestalsByMedian, _p_comptonsoft__SetPedestalsByMedianTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SimulateCXBShieldPlate, _p_comptonsoft__SimulateCXBShieldPlateTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SortEventTreeWithTime, _p_comptonsoft__SortEventTreeWithTimeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__UniformlyRandomizeEPI, _p_comptonsoft__UniformlyRandomizeEPITo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__VCSModule, _p_comptonsoft__VCSModuleTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WeightByInitialDirection, _p_comptonsoft__WeightByInitialDirectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__Write3x3EventTree, _p_comptonsoft__Write3x3EventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteBadPixels, _p_comptonsoft__WriteBadPixelsTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteComptonEventTree, _p_comptonsoft__WriteComptonEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteEventTree, _p_comptonsoft__WriteEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteHitTree, _p_comptonsoft__WriteHitTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteObservationTree, _p_comptonsoft__WriteObservationTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteXrayEventTree, _p_comptonsoft__WriteXrayEventTreeTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__XrayEventCollection, _p_comptonsoft__XrayEventCollectionTo_p_anlnext__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__XrayEventSelection, _p_comptonsoft__XrayEventSelectionTo_p_anlnext__BasicModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGen[] = {  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime[] = {  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ActivationUserActionAssembly[] = {  {&_swigt__p_comptonsoft__ActivationUserActionAssembly, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AnalyzeDarkFrame[] = {  {&_swigt__p_comptonsoft__AnalyzeDarkFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AnalyzeFrame[] = {  {&_swigt__p_comptonsoft__AnalyzeFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AnalyzeHits[] = {  {&_swigt__p_comptonsoft__AnalyzeHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ApplyEPICompensation[] = {  {&_swigt__p_comptonsoft__ApplyEPICompensation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AssignG4CopyNumber[] = {  {&_swigt__p_comptonsoft__AssignG4CopyNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AssignTime[] = {  {&_swigt__p_comptonsoft__AssignTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__BackProjection[] = {  {&_swigt__p_comptonsoft__BackProjection, 0, 0, 0},  {&_swigt__p_comptonsoft__BackProjectionSky, _p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__BackProjection, 0, 0},  {&_swigt__p_comptonsoft__EfficiencyMapSky, _p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__BackProjection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__BackProjectionSky[] = {  {&_swigt__p_comptonsoft__BackProjectionSky, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CSHitCollection[] = {  {&_swigt__p_comptonsoft__CSHitCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CalculatePedestalLevels[] = {  {&_swigt__p_comptonsoft__CalculatePedestalLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ComptonEventFilter[] = {  {&_swigt__p_comptonsoft__ComptonEventFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ComptonModeFilter[] = {  {&_swigt__p_comptonsoft__ComptonModeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructChannelMap[] = {  {&_swigt__p_comptonsoft__ConstructChannelMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructDetector[] = {  {&_swigt__p_comptonsoft__ConstructDetector, 0, 0, 0},  {&_swigt__p_comptonsoft__ConstructDetectorForSimulation, _p_comptonsoft__ConstructDetectorForSimulationTo_p_comptonsoft__ConstructDetector, 0, 0},  {&_swigt__p_comptonsoft__ConstructFrame, _p_comptonsoft__ConstructFrameTo_p_comptonsoft__ConstructDetector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructDetectorForSimulation[] = {  {&_swigt__p_comptonsoft__ConstructDetectorForSimulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructFrame[] = {  {&_swigt__p_comptonsoft__ConstructFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CorrectPHA[] = {  {&_swigt__p_comptonsoft__CorrectPHA, 0, 0, 0},  {&_swigt__p_comptonsoft__RecalculateEPI, _p_comptonsoft__RecalculateEPITo_p_comptonsoft__CorrectPHA, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CreateRootFile[] = {  {&_swigt__p_comptonsoft__CreateRootFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__DefineEventDriven[] = {  {&_swigt__p_comptonsoft__DefineEventDriven, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__DefineFrame[] = {  {&_swigt__p_comptonsoft__DefineFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__DetectBadFrames[] = {  {&_swigt__p_comptonsoft__DetectBadFrames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__DumpMass[] = {  {&_swigt__p_comptonsoft__DumpMass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EfficiencyMapSky[] = {  {&_swigt__p_comptonsoft__EfficiencyMapSky, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EventReconstruction[] = {  {&_swigt__p_comptonsoft__EventReconstruction, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadComptonEventTree, _p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__EventReconstruction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EventSelection[] = {  {&_swigt__p_comptonsoft__EventSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ExtractPhotoelectronTrajectory[] = {  {&_swigt__p_comptonsoft__ExtractPhotoelectronTrajectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ExtractXrayEventImage[] = {  {&_swigt__p_comptonsoft__ExtractXrayEventImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__FillFrame[] = {  {&_swigt__p_comptonsoft__FillFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__FilterByGoodTimeIntervals[] = {  {&_swigt__p_comptonsoft__FilterByGoodTimeIntervals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__GetInputFilesFromDirectory[] = {  {&_swigt__p_comptonsoft__GetInputFilesFromDirectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HXIEventSelection[] = {  {&_swigt__p_comptonsoft__HXIEventSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__Histogram2DDeltaEnergyWithARM[] = {  {&_swigt__p_comptonsoft__Histogram2DDeltaEnergyWithARM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramARM[] = {  {&_swigt__p_comptonsoft__HistogramARM, 0, 0, 0},  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, _p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__HistogramARM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramARMByPositionMeasurement[] = {  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramAzimuthAngle[] = {  {&_swigt__p_comptonsoft__HistogramAzimuthAngle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramDecodedImage[] = {  {&_swigt__p_comptonsoft__HistogramDecodedImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramEnergy1D[] = {  {&_swigt__p_comptonsoft__HistogramEnergy1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramEnergy2D[] = {  {&_swigt__p_comptonsoft__HistogramEnergy2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramEnergySpectrum[] = {  {&_swigt__p_comptonsoft__HistogramEnergySpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramFramePedestal[] = {  {&_swigt__p_comptonsoft__HistogramFramePedestal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramPHA[] = {  {&_swigt__p_comptonsoft__HistogramPHA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramRawFrameImage[] = {  {&_swigt__p_comptonsoft__HistogramRawFrameImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramXrayEventAzimuthAngle[] = {  {&_swigt__p_comptonsoft__HistogramXrayEventAzimuthAngle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramXrayEventProperties[] = {  {&_swigt__p_comptonsoft__HistogramXrayEventProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramXrayEventSpectrum[] = {  {&_swigt__p_comptonsoft__HistogramXrayEventSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__InitialConditionFilter[] = {  {&_swigt__p_comptonsoft__InitialConditionFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__InitialParticleTree[] = {  {&_swigt__p_comptonsoft__InitialParticleTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__IsotopeDatabaseAccess[] = {  {&_swigt__p_comptonsoft__IsotopeDatabaseAccess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ListPrimaryGen[] = {  {&_swigt__p_comptonsoft__ListPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__LoadFrame[] = {  {&_swigt__p_comptonsoft__LoadFrame, 0, 0, 0},  {&_swigt__p_comptonsoft__LoadReducedFrame, _p_comptonsoft__LoadReducedFrameTo_p_comptonsoft__LoadFrame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__LoadReducedFrame[] = {  {&_swigt__p_comptonsoft__LoadReducedFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__LoadRootFrame[] = {  {&_swigt__p_comptonsoft__LoadRootFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeDetectorHits[] = {  {&_swigt__p_comptonsoft__MakeDetectorHits, 0, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess, _p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__MakeDetectorHits, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeDetectorHitsWithTimingProcess[] = {  {&_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeRawHits[] = {  {&_swigt__p_comptonsoft__MakeRawHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ObservationPickUpData[] = {  {&_swigt__p_comptonsoft__ObservationPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__PatternGenerator[] = {  {&_swigt__p_comptonsoft__PatternGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__PhysicsListManager[] = {  {&_swigt__p_comptonsoft__PhysicsListManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ProcessCodedAperture[] = {  {&_swigt__p_comptonsoft__ProcessCodedAperture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__QuickAnalysisForDSD[] = {  {&_swigt__p_comptonsoft__QuickAnalysisForDSD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RIDecayCalculation[] = {  {&_swigt__p_comptonsoft__RIDecayCalculation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RadioactiveDecayUserActionAssembly[] = {  {&_swigt__p_comptonsoft__RadioactiveDecayUserActionAssembly, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadComptonEventTree[] = {  {&_swigt__p_comptonsoft__ReadComptonEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile[] = {  {&_swigt__p_comptonsoft__ReadDataFile, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__ReadDataFile, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_NB0[] = {  {&_swigt__p_comptonsoft__ReadDataFile_NB0, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_NT[] = {  {&_swigt__p_comptonsoft__ReadDataFile_NT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_SpW2[] = {  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_VME3[] = {  {&_swigt__p_comptonsoft__ReadDataFile_VME3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTree[] = {  {&_swigt__p_comptonsoft__ReadEventTree, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__ReadEventTree, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, _p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__ReadEventTree, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTreeAsDetectorHits[] = {  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTreeAsRawHits[] = {  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__ReadEventTreeAsRawHits, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTree[] = {  {&_swigt__p_comptonsoft__ReadHitTree, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__ReadHitTree, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, _p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__ReadHitTree, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTreeAsDetectorHits[] = {  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTreeAsRawHits[] = {  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, 0, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__ReadHitTreeAsRawHits, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadXrayEventTree[] = {  {&_swigt__p_comptonsoft__ReadXrayEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RecalculateEPI[] = {  {&_swigt__p_comptonsoft__RecalculateEPI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RecalculateSimulationNoise[] = {  {&_swigt__p_comptonsoft__RecalculateSimulationNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered[] = {  {&_swigt__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ResponseMatrix[] = {  {&_swigt__p_comptonsoft__ResponseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SampleOpticalDepth[] = {  {&_swigt__p_comptonsoft__SampleOpticalDepth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SaveData[] = {  {&_swigt__p_comptonsoft__SaveData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ScatteringPickUpData[] = {  {&_swigt__p_comptonsoft__ScatteringPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectEventsOnFocalPlane[] = {  {&_swigt__p_comptonsoft__SelectEventsOnFocalPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectEventsWithDetectorSpectrum[] = {  {&_swigt__p_comptonsoft__SelectEventsWithDetectorSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectFullDeposit[] = {  {&_swigt__p_comptonsoft__SelectFullDeposit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectHits[] = {  {&_swigt__p_comptonsoft__SelectHits, 0, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess, _p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_comptonsoft__SelectHits, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectTime[] = {  {&_swigt__p_comptonsoft__SelectTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetBadChannels[] = {  {&_swigt__p_comptonsoft__SetBadChannels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetBadFrames[] = {  {&_swigt__p_comptonsoft__SetBadFrames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetChannelProperties[] = {  {&_swigt__p_comptonsoft__SetChannelProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetDynamicPedestals[] = {  {&_swigt__p_comptonsoft__SetDynamicPedestals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetNoiseLevels[] = {  {&_swigt__p_comptonsoft__SetNoiseLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetPedestalsByMedian[] = {  {&_swigt__p_comptonsoft__SetPedestalsByMedian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SimulateCXBShieldPlate[] = {  {&_swigt__p_comptonsoft__SimulateCXBShieldPlate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SortEventTreeWithTime[] = {  {&_swigt__p_comptonsoft__SortEventTreeWithTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__UniformlyRandomizeEPI[] = {  {&_swigt__p_comptonsoft__UniformlyRandomizeEPI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__VCSModule[] = {  {&_swigt__p_comptonsoft__VCSModule, 0, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeDarkFrame, _p_comptonsoft__AnalyzeDarkFrameTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeFrame, _p_comptonsoft__AnalyzeFrameTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ApplyEPICompensation, _p_comptonsoft__ApplyEPICompensationTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__AssignTime, _p_comptonsoft__AssignTimeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjection, _p_comptonsoft__BackProjectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjectionSky, _p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__CalculatePedestalLevels, _p_comptonsoft__CalculatePedestalLevelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonModeFilter, _p_comptonsoft__ComptonModeFilterTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructChannelMap, _p_comptonsoft__ConstructChannelMapTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__CorrectPHA, _p_comptonsoft__CorrectPHATo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__DefineEventDriven, _p_comptonsoft__DefineEventDrivenTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__DefineFrame, _p_comptonsoft__DefineFrameTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__DetectBadFrames, _p_comptonsoft__DetectBadFramesTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EfficiencyMapSky, _p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EventReconstruction, _p_comptonsoft__EventReconstructionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EventSelection, _p_comptonsoft__EventSelectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ExtractPhotoelectronTrajectory, _p_comptonsoft__ExtractPhotoelectronTrajectoryTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ExtractXrayEventImage, _p_comptonsoft__ExtractXrayEventImageTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__FillFrame, _p_comptonsoft__FillFrameTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HXIEventSelection, _p_comptonsoft__HXIEventSelectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__Histogram2DDeltaEnergyWithARM, _p_comptonsoft__Histogram2DDeltaEnergyWithARMTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARM, _p_comptonsoft__HistogramARMTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, _p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramAzimuthAngle, _p_comptonsoft__HistogramAzimuthAngleTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramDecodedImage, _p_comptonsoft__HistogramDecodedImageTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy1D, _p_comptonsoft__HistogramEnergy1DTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy2D, _p_comptonsoft__HistogramEnergy2DTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergySpectrum, _p_comptonsoft__HistogramEnergySpectrumTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramFramePedestal, _p_comptonsoft__HistogramFramePedestalTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramPHA, _p_comptonsoft__HistogramPHATo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramRawFrameImage, _p_comptonsoft__HistogramRawFrameImageTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventAzimuthAngle, _p_comptonsoft__HistogramXrayEventAzimuthAngleTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventProperties, _p_comptonsoft__HistogramXrayEventPropertiesTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramXrayEventSpectrum, _p_comptonsoft__HistogramXrayEventSpectrumTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__InitialParticleTree, _p_comptonsoft__InitialParticleTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsWithTimingProcess, _p_comptonsoft__MakeDetectorHitsWithTimingProcessTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__PatternGenerator, _p_comptonsoft__PatternGeneratorTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ProcessCodedAperture, _p_comptonsoft__ProcessCodedApertureTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__QuickAnalysisForDSD, _p_comptonsoft__QuickAnalysisForDSDTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadComptonEventTree, _p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile, _p_comptonsoft__ReadDataFileTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTree, _p_comptonsoft__ReadEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, _p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTree, _p_comptonsoft__ReadHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, _p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateEPI, _p_comptonsoft__RecalculateEPITo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateSimulationNoise, _p_comptonsoft__RecalculateSimulationNoiseTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered, _p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggeredTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ResponseMatrix, _p_comptonsoft__ResponseMatrixTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SelectEventsOnFocalPlane, _p_comptonsoft__SelectEventsOnFocalPlaneTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SelectHits, _p_comptonsoft__SelectHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadChannels, _p_comptonsoft__SetBadChannelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadFrames, _p_comptonsoft__SetBadFramesTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetChannelProperties, _p_comptonsoft__SetChannelPropertiesTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetDynamicPedestals, _p_comptonsoft__SetDynamicPedestalsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetNoiseLevels, _p_comptonsoft__SetNoiseLevelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetPedestalsByMedian, _p_comptonsoft__SetPedestalsByMedianTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SimulateCXBShieldPlate, _p_comptonsoft__SimulateCXBShieldPlateTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SortEventTreeWithTime, _p_comptonsoft__SortEventTreeWithTimeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__UniformlyRandomizeEPI, _p_comptonsoft__UniformlyRandomizeEPITo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__Write3x3EventTree, _p_comptonsoft__Write3x3EventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteBadPixels, _p_comptonsoft__WriteBadPixelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteComptonEventTree, _p_comptonsoft__WriteComptonEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteEventTree, _p_comptonsoft__WriteEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteHitTree, _p_comptonsoft__WriteHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteObservationTree, _p_comptonsoft__WriteObservationTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteXrayEventTree, _p_comptonsoft__WriteXrayEventTreeTo_p_comptonsoft__VCSModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WeightByInitialDirection[] = {  {&_swigt__p_comptonsoft__WeightByInitialDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__Write3x3EventTree[] = {  {&_swigt__p_comptonsoft__Write3x3EventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteBadPixels[] = {  {&_swigt__p_comptonsoft__WriteBadPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteComptonEventTree[] = {  {&_swigt__p_comptonsoft__WriteComptonEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteEventTree[] = {  {&_swigt__p_comptonsoft__WriteEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteHitTree[] = {  {&_swigt__p_comptonsoft__WriteHitTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteObservationTree[] = {  {&_swigt__p_comptonsoft__WriteObservationTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteXrayEventTree[] = {  {&_swigt__p_comptonsoft__WriteXrayEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__XrayEventCollection[] = {  {&_swigt__p_comptonsoft__XrayEventCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__XrayEventSelection[] = {  {&_swigt__p_comptonsoft__XrayEventSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t[] = {  {&_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator[] = {  {&_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator[] = {  {&_swigt__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_anlnext__VModuleParameter_t[] = {  {&_swigt__p_std__shared_ptrT_anlnext__VModuleParameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_double_double_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_double_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_anlgeant4__BasicPrimaryGen,
  _swigc__p_anlgeant4__GaussianBeamPrimaryGen,
  _swigc__p_anlgeant4__Geant4Body,
  _swigc__p_anlgeant4__Geant4Simple,
  _swigc__p_anlgeant4__IsotropicPrimaryGen,
  _swigc__p_anlgeant4__NucleusPrimaryGen,
  _swigc__p_anlgeant4__NucleusPrimaryGenInVolume,
  _swigc__p_anlgeant4__PlaneWavePrimaryGen,
  _swigc__p_anlgeant4__PlaneWaveRectanglePrimaryGen,
  _swigc__p_anlgeant4__PointSourcePrimaryGen,
  _swigc__p_anlgeant4__PrimaryGenUniformSourceInVolume,
  _swigc__p_anlgeant4__StandardUserActionAssembly,
  _swigc__p_anlgeant4__VANLGeometry,
  _swigc__p_anlgeant4__VANLPhysicsList,
  _swigc__p_anlgeant4__VANLPrimaryGen,
  _swigc__p_anlgeant4__VAppendableUserActionAssembly,
  _swigc__p_anlgeant4__VMasterUserActionAssembly,
  _swigc__p_anlgeant4__VUserActionAssembly,
  _swigc__p_anlnext__BasicModule,
  _swigc__p_char,
  _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGen,
  _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime,
  _swigc__p_comptonsoft__ActivationUserActionAssembly,
  _swigc__p_comptonsoft__AnalyzeDarkFrame,
  _swigc__p_comptonsoft__AnalyzeFrame,
  _swigc__p_comptonsoft__AnalyzeHits,
  _swigc__p_comptonsoft__ApplyEPICompensation,
  _swigc__p_comptonsoft__AssignG4CopyNumber,
  _swigc__p_comptonsoft__AssignTime,
  _swigc__p_comptonsoft__BackProjection,
  _swigc__p_comptonsoft__BackProjectionSky,
  _swigc__p_comptonsoft__CSHitCollection,
  _swigc__p_comptonsoft__CalculatePedestalLevels,
  _swigc__p_comptonsoft__ComptonEventFilter,
  _swigc__p_comptonsoft__ComptonModeFilter,
  _swigc__p_comptonsoft__ConstructChannelMap,
  _swigc__p_comptonsoft__ConstructDetector,
  _swigc__p_comptonsoft__ConstructDetectorForSimulation,
  _swigc__p_comptonsoft__ConstructFrame,
  _swigc__p_comptonsoft__CorrectPHA,
  _swigc__p_comptonsoft__CreateRootFile,
  _swigc__p_comptonsoft__DefineEventDriven,
  _swigc__p_comptonsoft__DefineFrame,
  _swigc__p_comptonsoft__DetectBadFrames,
  _swigc__p_comptonsoft__DumpMass,
  _swigc__p_comptonsoft__EfficiencyMapSky,
  _swigc__p_comptonsoft__EventReconstruction,
  _swigc__p_comptonsoft__EventSelection,
  _swigc__p_comptonsoft__ExtractPhotoelectronTrajectory,
  _swigc__p_comptonsoft__ExtractXrayEventImage,
  _swigc__p_comptonsoft__FillFrame,
  _swigc__p_comptonsoft__FilterByGoodTimeIntervals,
  _swigc__p_comptonsoft__GetInputFilesFromDirectory,
  _swigc__p_comptonsoft__HXIEventSelection,
  _swigc__p_comptonsoft__Histogram2DDeltaEnergyWithARM,
  _swigc__p_comptonsoft__HistogramARM,
  _swigc__p_comptonsoft__HistogramARMByPositionMeasurement,
  _swigc__p_comptonsoft__HistogramAzimuthAngle,
  _swigc__p_comptonsoft__HistogramDecodedImage,
  _swigc__p_comptonsoft__HistogramEnergy1D,
  _swigc__p_comptonsoft__HistogramEnergy2D,
  _swigc__p_comptonsoft__HistogramEnergySpectrum,
  _swigc__p_comptonsoft__HistogramFramePedestal,
  _swigc__p_comptonsoft__HistogramPHA,
  _swigc__p_comptonsoft__HistogramRawFrameImage,
  _swigc__p_comptonsoft__HistogramXrayEventAzimuthAngle,
  _swigc__p_comptonsoft__HistogramXrayEventProperties,
  _swigc__p_comptonsoft__HistogramXrayEventSpectrum,
  _swigc__p_comptonsoft__InitialConditionFilter,
  _swigc__p_comptonsoft__InitialParticleTree,
  _swigc__p_comptonsoft__IsotopeDatabaseAccess,
  _swigc__p_comptonsoft__ListPrimaryGen,
  _swigc__p_comptonsoft__LoadFrame,
  _swigc__p_comptonsoft__LoadReducedFrame,
  _swigc__p_comptonsoft__LoadRootFrame,
  _swigc__p_comptonsoft__MakeDetectorHits,
  _swigc__p_comptonsoft__MakeDetectorHitsWithTimingProcess,
  _swigc__p_comptonsoft__MakeRawHits,
  _swigc__p_comptonsoft__ObservationPickUpData,
  _swigc__p_comptonsoft__PatternGenerator,
  _swigc__p_comptonsoft__PhysicsListManager,
  _swigc__p_comptonsoft__ProcessCodedAperture,
  _swigc__p_comptonsoft__QuickAnalysisForDSD,
  _swigc__p_comptonsoft__RIDecayCalculation,
  _swigc__p_comptonsoft__RadioactiveDecayUserActionAssembly,
  _swigc__p_comptonsoft__ReadComptonEventTree,
  _swigc__p_comptonsoft__ReadDataFile,
  _swigc__p_comptonsoft__ReadDataFile_NB0,
  _swigc__p_comptonsoft__ReadDataFile_NT,
  _swigc__p_comptonsoft__ReadDataFile_SpW2,
  _swigc__p_comptonsoft__ReadDataFile_VME3,
  _swigc__p_comptonsoft__ReadEventTree,
  _swigc__p_comptonsoft__ReadEventTreeAsDetectorHits,
  _swigc__p_comptonsoft__ReadEventTreeAsRawHits,
  _swigc__p_comptonsoft__ReadHitTree,
  _swigc__p_comptonsoft__ReadHitTreeAsDetectorHits,
  _swigc__p_comptonsoft__ReadHitTreeAsRawHits,
  _swigc__p_comptonsoft__ReadXrayEventTree,
  _swigc__p_comptonsoft__RecalculateEPI,
  _swigc__p_comptonsoft__RecalculateSimulationNoise,
  _swigc__p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered,
  _swigc__p_comptonsoft__ResponseMatrix,
  _swigc__p_comptonsoft__SampleOpticalDepth,
  _swigc__p_comptonsoft__SaveData,
  _swigc__p_comptonsoft__ScatteringPickUpData,
  _swigc__p_comptonsoft__SelectEventsOnFocalPlane,
  _swigc__p_comptonsoft__SelectEventsWithDetectorSpectrum,
  _swigc__p_comptonsoft__SelectFullDeposit,
  _swigc__p_comptonsoft__SelectHits,
  _swigc__p_comptonsoft__SelectTime,
  _swigc__p_comptonsoft__SetBadChannels,
  _swigc__p_comptonsoft__SetBadFrames,
  _swigc__p_comptonsoft__SetChannelProperties,
  _swigc__p_comptonsoft__SetDynamicPedestals,
  _swigc__p_comptonsoft__SetNoiseLevels,
  _swigc__p_comptonsoft__SetPedestalsByMedian,
  _swigc__p_comptonsoft__SimulateCXBShieldPlate,
  _swigc__p_comptonsoft__SortEventTreeWithTime,
  _swigc__p_comptonsoft__UniformlyRandomizeEPI,
  _swigc__p_comptonsoft__VCSModule,
  _swigc__p_comptonsoft__WeightByInitialDirection,
  _swigc__p_comptonsoft__Write3x3EventTree,
  _swigc__p_comptonsoft__WriteBadPixels,
  _swigc__p_comptonsoft__WriteComptonEventTree,
  _swigc__p_comptonsoft__WriteEventTree,
  _swigc__p_comptonsoft__WriteHitTree,
  _swigc__p_comptonsoft__WriteObservationTree,
  _swigc__p_comptonsoft__WriteXrayEventTree,
  _swigc__p_comptonsoft__XrayEventCollection,
  _swigc__p_comptonsoft__XrayEventSelection,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_second_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t,
  _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__const_iterator,
  _swigc__p_std__listT_std__shared_ptrT_anlnext__VModuleParameter_t_t__iterator,
  _swigc__p_std__shared_ptrT_anlnext__VModuleParameter_t,
  _swigc__p_std__vectorT_std__pairT_double_double_t_t,
  _swigc__p_std__vectorT_std__pairT_int_int_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_comptonSoft(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mComptonSoft = rb_define_module("ComptonSoft");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassRIDecayCalculation.klass = rb_define_class_under(mComptonSoft, "RIDecayCalculation", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__RIDecayCalculation, (void *) &SwigClassRIDecayCalculation);
  rb_define_alloc_func(SwigClassRIDecayCalculation.klass, _wrap_RIDecayCalculation_allocate);
  rb_define_method(SwigClassRIDecayCalculation.klass, "initialize", VALUEFUNC(_wrap_new_RIDecayCalculation), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setVerboseLevel", VALUEFUNC(_wrap_RIDecayCalculation_setVerboseLevel), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setInputFiles", VALUEFUNC(_wrap_RIDecayCalculation_setInputFiles), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setMeasurementTime", VALUEFUNC(_wrap_RIDecayCalculation_setMeasurementTime), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "MeasurememtTime", VALUEFUNC(_wrap_RIDecayCalculation_MeasurememtTime), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "addMeasurementWindow", VALUEFUNC(_wrap_RIDecayCalculation_addMeasurementWindow), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "clearMeasurememtWindows", VALUEFUNC(_wrap_RIDecayCalculation_clearMeasurememtWindows), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "getStartingTimeOfWindow", VALUEFUNC(_wrap_RIDecayCalculation_getStartingTimeOfWindow), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "getEndingTimeOfWindow", VALUEFUNC(_wrap_RIDecayCalculation_getEndingTimeOfWindow), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setCountThreshold", VALUEFUNC(_wrap_RIDecayCalculation_setCountThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "CountThreshold", VALUEFUNC(_wrap_RIDecayCalculation_CountThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setDecayConstantThreshold", VALUEFUNC(_wrap_RIDecayCalculation_setDecayConstantThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "DecayConstantThreshold", VALUEFUNC(_wrap_RIDecayCalculation_DecayConstantThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setBranchingRatioThreshold", VALUEFUNC(_wrap_RIDecayCalculation_setBranchingRatioThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "BranchingRatioThreshold", VALUEFUNC(_wrap_RIDecayCalculation_BranchingRatioThreshold), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "setOutputFile", VALUEFUNC(_wrap_RIDecayCalculation_setOutputFile), -1);
  rb_define_method(SwigClassRIDecayCalculation.klass, "run", VALUEFUNC(_wrap_RIDecayCalculation_run), -1);
  SwigClassRIDecayCalculation.mark = 0;
  SwigClassRIDecayCalculation.destroy = (void (*)(void *)) free_comptonsoft_RIDecayCalculation;
  SwigClassRIDecayCalculation.trackObjects = 0;
  
  SwigClassIsotopeDatabaseAccess.klass = rb_define_class_under(mComptonSoft, "IsotopeDatabaseAccess", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__IsotopeDatabaseAccess, (void *) &SwigClassIsotopeDatabaseAccess);
  rb_define_alloc_func(SwigClassIsotopeDatabaseAccess.klass, _wrap_IsotopeDatabaseAccess_allocate);
  rb_define_method(SwigClassIsotopeDatabaseAccess.klass, "initialize", VALUEFUNC(_wrap_new_IsotopeDatabaseAccess), -1);
  rb_define_method(SwigClassIsotopeDatabaseAccess.klass, "initialize_data", VALUEFUNC(_wrap_IsotopeDatabaseAccess_initialize_data), -1);
  rb_define_method(SwigClassIsotopeDatabaseAccess.klass, "retrive_isotope", VALUEFUNC(_wrap_IsotopeDatabaseAccess_retrive_isotope), -1);
  rb_define_method(SwigClassIsotopeDatabaseAccess.klass, "get_lifetime", VALUEFUNC(_wrap_IsotopeDatabaseAccess_get_lifetime), -1);
  rb_define_method(SwigClassIsotopeDatabaseAccess.klass, "get_halflife", VALUEFUNC(_wrap_IsotopeDatabaseAccess_get_halflife), -1);
  SwigClassIsotopeDatabaseAccess.mark = 0;
  SwigClassIsotopeDatabaseAccess.destroy = (void (*)(void *)) free_comptonsoft_IsotopeDatabaseAccess;
  SwigClassIsotopeDatabaseAccess.trackObjects = 0;
  rb_require("anlnext/ANL");
  rb_require("anlgeant4/anlGeant4");
  
  SwigClassConstructDetector.klass = rb_define_class_under(mComptonSoft, "ConstructDetector", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ConstructDetector, (void *) &SwigClassConstructDetector);
  rb_define_alloc_func(SwigClassConstructDetector.klass, _wrap_ConstructDetector_allocate);
  rb_define_method(SwigClassConstructDetector.klass, "initialize", VALUEFUNC(_wrap_new_ConstructDetector), -1);
  SwigClassConstructDetector.mark = 0;
  SwigClassConstructDetector.destroy = (void (*)(void *)) free_comptonsoft_ConstructDetector;
  SwigClassConstructDetector.trackObjects = 0;
  
  SwigClassConstructDetectorForSimulation.klass = rb_define_class_under(mComptonSoft, "ConstructDetectorForSimulation", ((swig_class *) SWIGTYPE_p_comptonsoft__ConstructDetector->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ConstructDetectorForSimulation, (void *) &SwigClassConstructDetectorForSimulation);
  rb_define_alloc_func(SwigClassConstructDetectorForSimulation.klass, _wrap_ConstructDetectorForSimulation_allocate);
  rb_define_method(SwigClassConstructDetectorForSimulation.klass, "initialize", VALUEFUNC(_wrap_new_ConstructDetectorForSimulation), -1);
  SwigClassConstructDetectorForSimulation.mark = 0;
  SwigClassConstructDetectorForSimulation.destroy = (void (*)(void *)) free_comptonsoft_ConstructDetectorForSimulation;
  SwigClassConstructDetectorForSimulation.trackObjects = 0;
  
  SwigClassVCSModule.klass = rb_define_class_under(mComptonSoft, "VCSModule", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__VCSModule, (void *) &SwigClassVCSModule);
  rb_define_alloc_func(SwigClassVCSModule.klass, _wrap_VCSModule_allocate);
  rb_define_method(SwigClassVCSModule.klass, "initialize", VALUEFUNC(_wrap_new_VCSModule), -1);
  SwigClassVCSModule.mark = 0;
  SwigClassVCSModule.destroy = (void (*)(void *)) free_comptonsoft_VCSModule;
  SwigClassVCSModule.trackObjects = 0;
  
  SwigClassCSHitCollection.klass = rb_define_class_under(mComptonSoft, "CSHitCollection", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__CSHitCollection, (void *) &SwigClassCSHitCollection);
  rb_define_alloc_func(SwigClassCSHitCollection.klass, _wrap_CSHitCollection_allocate);
  rb_define_method(SwigClassCSHitCollection.klass, "initialize", VALUEFUNC(_wrap_new_CSHitCollection), -1);
  SwigClassCSHitCollection.mark = 0;
  SwigClassCSHitCollection.destroy = (void (*)(void *)) free_comptonsoft_CSHitCollection;
  SwigClassCSHitCollection.trackObjects = 0;
  
  SwigClassPatternGenerator.klass = rb_define_class_under(mComptonSoft, "PatternGenerator", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__PatternGenerator, (void *) &SwigClassPatternGenerator);
  rb_define_alloc_func(SwigClassPatternGenerator.klass, _wrap_PatternGenerator_allocate);
  rb_define_method(SwigClassPatternGenerator.klass, "initialize", VALUEFUNC(_wrap_new_PatternGenerator), -1);
  SwigClassPatternGenerator.mark = 0;
  SwigClassPatternGenerator.destroy = (void (*)(void *)) free_comptonsoft_PatternGenerator;
  SwigClassPatternGenerator.trackObjects = 0;
  
  SwigClassConstructChannelMap.klass = rb_define_class_under(mComptonSoft, "ConstructChannelMap", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ConstructChannelMap, (void *) &SwigClassConstructChannelMap);
  rb_define_alloc_func(SwigClassConstructChannelMap.klass, _wrap_ConstructChannelMap_allocate);
  rb_define_method(SwigClassConstructChannelMap.klass, "initialize", VALUEFUNC(_wrap_new_ConstructChannelMap), -1);
  SwigClassConstructChannelMap.mark = 0;
  SwigClassConstructChannelMap.destroy = (void (*)(void *)) free_comptonsoft_ConstructChannelMap;
  SwigClassConstructChannelMap.trackObjects = 0;
  
  SwigClassSetNoiseLevels.klass = rb_define_class_under(mComptonSoft, "SetNoiseLevels", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetNoiseLevels, (void *) &SwigClassSetNoiseLevels);
  rb_define_alloc_func(SwigClassSetNoiseLevels.klass, _wrap_SetNoiseLevels_allocate);
  rb_define_method(SwigClassSetNoiseLevels.klass, "initialize", VALUEFUNC(_wrap_new_SetNoiseLevels), -1);
  SwigClassSetNoiseLevels.mark = 0;
  SwigClassSetNoiseLevels.destroy = (void (*)(void *)) free_comptonsoft_SetNoiseLevels;
  SwigClassSetNoiseLevels.trackObjects = 0;
  
  SwigClassSetBadChannels.klass = rb_define_class_under(mComptonSoft, "SetBadChannels", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetBadChannels, (void *) &SwigClassSetBadChannels);
  rb_define_alloc_func(SwigClassSetBadChannels.klass, _wrap_SetBadChannels_allocate);
  rb_define_method(SwigClassSetBadChannels.klass, "initialize", VALUEFUNC(_wrap_new_SetBadChannels), -1);
  SwigClassSetBadChannels.mark = 0;
  SwigClassSetBadChannels.destroy = (void (*)(void *)) free_comptonsoft_SetBadChannels;
  SwigClassSetBadChannels.trackObjects = 0;
  
  SwigClassSetChannelProperties.klass = rb_define_class_under(mComptonSoft, "SetChannelProperties", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetChannelProperties, (void *) &SwigClassSetChannelProperties);
  rb_define_alloc_func(SwigClassSetChannelProperties.klass, _wrap_SetChannelProperties_allocate);
  rb_define_method(SwigClassSetChannelProperties.klass, "initialize", VALUEFUNC(_wrap_new_SetChannelProperties), -1);
  SwigClassSetChannelProperties.mark = 0;
  SwigClassSetChannelProperties.destroy = (void (*)(void *)) free_comptonsoft_SetChannelProperties;
  SwigClassSetChannelProperties.trackObjects = 0;
  
  SwigClassSelectHits.klass = rb_define_class_under(mComptonSoft, "SelectHits", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SelectHits, (void *) &SwigClassSelectHits);
  rb_define_alloc_func(SwigClassSelectHits.klass, _wrap_SelectHits_allocate);
  rb_define_method(SwigClassSelectHits.klass, "initialize", VALUEFUNC(_wrap_new_SelectHits), -1);
  SwigClassSelectHits.mark = 0;
  SwigClassSelectHits.destroy = (void (*)(void *)) free_comptonsoft_SelectHits;
  SwigClassSelectHits.trackObjects = 0;
  
  SwigClassAnalyzeHits.klass = rb_define_class_under(mComptonSoft, "AnalyzeHits", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AnalyzeHits, (void *) &SwigClassAnalyzeHits);
  rb_define_alloc_func(SwigClassAnalyzeHits.klass, _wrap_AnalyzeHits_allocate);
  rb_define_method(SwigClassAnalyzeHits.klass, "initialize", VALUEFUNC(_wrap_new_AnalyzeHits), -1);
  SwigClassAnalyzeHits.mark = 0;
  SwigClassAnalyzeHits.destroy = (void (*)(void *)) free_comptonsoft_AnalyzeHits;
  SwigClassAnalyzeHits.trackObjects = 0;
  
  SwigClassMakeDetectorHits.klass = rb_define_class_under(mComptonSoft, "MakeDetectorHits", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__MakeDetectorHits, (void *) &SwigClassMakeDetectorHits);
  rb_define_alloc_func(SwigClassMakeDetectorHits.klass, _wrap_MakeDetectorHits_allocate);
  rb_define_method(SwigClassMakeDetectorHits.klass, "initialize", VALUEFUNC(_wrap_new_MakeDetectorHits), -1);
  SwigClassMakeDetectorHits.mark = 0;
  SwigClassMakeDetectorHits.destroy = (void (*)(void *)) free_comptonsoft_MakeDetectorHits;
  SwigClassMakeDetectorHits.trackObjects = 0;
  
  SwigClassMakeRawHits.klass = rb_define_class_under(mComptonSoft, "MakeRawHits", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__MakeRawHits, (void *) &SwigClassMakeRawHits);
  rb_define_alloc_func(SwigClassMakeRawHits.klass, _wrap_MakeRawHits_allocate);
  rb_define_method(SwigClassMakeRawHits.klass, "initialize", VALUEFUNC(_wrap_new_MakeRawHits), -1);
  SwigClassMakeRawHits.mark = 0;
  SwigClassMakeRawHits.destroy = (void (*)(void *)) free_comptonsoft_MakeRawHits;
  SwigClassMakeRawHits.trackObjects = 0;
  
  SwigClassMakeDetectorHitsWithTimingProcess.klass = rb_define_class_under(mComptonSoft, "MakeDetectorHitsWithTimingProcess", ((swig_class *) SWIGTYPE_p_comptonsoft__MakeDetectorHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__MakeDetectorHitsWithTimingProcess, (void *) &SwigClassMakeDetectorHitsWithTimingProcess);
  rb_define_alloc_func(SwigClassMakeDetectorHitsWithTimingProcess.klass, _wrap_MakeDetectorHitsWithTimingProcess_allocate);
  rb_define_method(SwigClassMakeDetectorHitsWithTimingProcess.klass, "initialize", VALUEFUNC(_wrap_new_MakeDetectorHitsWithTimingProcess), -1);
  SwigClassMakeDetectorHitsWithTimingProcess.mark = 0;
  SwigClassMakeDetectorHitsWithTimingProcess.destroy = (void (*)(void *)) free_comptonsoft_MakeDetectorHitsWithTimingProcess;
  SwigClassMakeDetectorHitsWithTimingProcess.trackObjects = 0;
  
  SwigClassApplyEPICompensation.klass = rb_define_class_under(mComptonSoft, "ApplyEPICompensation", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ApplyEPICompensation, (void *) &SwigClassApplyEPICompensation);
  rb_define_alloc_func(SwigClassApplyEPICompensation.klass, _wrap_ApplyEPICompensation_allocate);
  rb_define_method(SwigClassApplyEPICompensation.klass, "initialize", VALUEFUNC(_wrap_new_ApplyEPICompensation), -1);
  SwigClassApplyEPICompensation.mark = 0;
  SwigClassApplyEPICompensation.destroy = (void (*)(void *)) free_comptonsoft_ApplyEPICompensation;
  SwigClassApplyEPICompensation.trackObjects = 0;
  
  SwigClassEventSelection.klass = rb_define_class_under(mComptonSoft, "EventSelection", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__EventSelection, (void *) &SwigClassEventSelection);
  rb_define_alloc_func(SwigClassEventSelection.klass, _wrap_EventSelection_allocate);
  rb_define_method(SwigClassEventSelection.klass, "initialize", VALUEFUNC(_wrap_new_EventSelection), -1);
  SwigClassEventSelection.mark = 0;
  SwigClassEventSelection.destroy = (void (*)(void *)) free_comptonsoft_EventSelection;
  SwigClassEventSelection.trackObjects = 0;
  
  SwigClassEventReconstruction.klass = rb_define_class_under(mComptonSoft, "EventReconstruction", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__EventReconstruction, (void *) &SwigClassEventReconstruction);
  rb_define_alloc_func(SwigClassEventReconstruction.klass, _wrap_EventReconstruction_allocate);
  rb_define_method(SwigClassEventReconstruction.klass, "initialize", VALUEFUNC(_wrap_new_EventReconstruction), -1);
  SwigClassEventReconstruction.mark = 0;
  SwigClassEventReconstruction.destroy = (void (*)(void *)) free_comptonsoft_EventReconstruction;
  SwigClassEventReconstruction.trackObjects = 0;
  
  SwigClassHXIEventSelection.klass = rb_define_class_under(mComptonSoft, "HXIEventSelection", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HXIEventSelection, (void *) &SwigClassHXIEventSelection);
  rb_define_alloc_func(SwigClassHXIEventSelection.klass, _wrap_HXIEventSelection_allocate);
  rb_define_method(SwigClassHXIEventSelection.klass, "initialize", VALUEFUNC(_wrap_new_HXIEventSelection), -1);
  SwigClassHXIEventSelection.mark = 0;
  SwigClassHXIEventSelection.destroy = (void (*)(void *)) free_comptonsoft_HXIEventSelection;
  SwigClassHXIEventSelection.trackObjects = 0;
  
  SwigClassCreateRootFile.klass = rb_define_class_under(mComptonSoft, "CreateRootFile", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__CreateRootFile, (void *) &SwigClassCreateRootFile);
  rb_define_alloc_func(SwigClassCreateRootFile.klass, _wrap_CreateRootFile_allocate);
  rb_define_method(SwigClassCreateRootFile.klass, "initialize", VALUEFUNC(_wrap_new_CreateRootFile), -1);
  SwigClassCreateRootFile.mark = 0;
  SwigClassCreateRootFile.destroy = (void (*)(void *)) free_comptonsoft_CreateRootFile;
  SwigClassCreateRootFile.trackObjects = 0;
  
  SwigClassSaveData.klass = rb_define_class_under(mComptonSoft, "SaveData", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SaveData, (void *) &SwigClassSaveData);
  rb_define_alloc_func(SwigClassSaveData.klass, _wrap_SaveData_allocate);
  rb_define_method(SwigClassSaveData.klass, "initialize", VALUEFUNC(_wrap_new_SaveData), -1);
  SwigClassSaveData.mark = 0;
  SwigClassSaveData.destroy = (void (*)(void *)) free_comptonsoft_SaveData;
  SwigClassSaveData.trackObjects = 0;
  
  SwigClassReadDataFile.klass = rb_define_class_under(mComptonSoft, "ReadDataFile", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadDataFile, (void *) &SwigClassReadDataFile);
  rb_define_alloc_func(SwigClassReadDataFile.klass, _wrap_ReadDataFile_allocate);
  rb_define_method(SwigClassReadDataFile.klass, "initialize", VALUEFUNC(_wrap_new_ReadDataFile), -1);
  SwigClassReadDataFile.mark = 0;
  SwigClassReadDataFile.destroy = (void (*)(void *)) free_comptonsoft_ReadDataFile;
  SwigClassReadDataFile.trackObjects = 0;
  
  SwigClassReadDataFile_VME3.klass = rb_define_class_under(mComptonSoft, "ReadDataFile_VME3", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadDataFile_VME3, (void *) &SwigClassReadDataFile_VME3);
  rb_define_alloc_func(SwigClassReadDataFile_VME3.klass, _wrap_ReadDataFile_VME3_allocate);
  rb_define_method(SwigClassReadDataFile_VME3.klass, "initialize", VALUEFUNC(_wrap_new_ReadDataFile_VME3), -1);
  SwigClassReadDataFile_VME3.mark = 0;
  SwigClassReadDataFile_VME3.destroy = (void (*)(void *)) free_comptonsoft_ReadDataFile_VME3;
  SwigClassReadDataFile_VME3.trackObjects = 0;
  
  SwigClassReadDataFile_SpW2.klass = rb_define_class_under(mComptonSoft, "ReadDataFile_SpW2", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadDataFile_SpW2, (void *) &SwigClassReadDataFile_SpW2);
  rb_define_alloc_func(SwigClassReadDataFile_SpW2.klass, _wrap_ReadDataFile_SpW2_allocate);
  rb_define_method(SwigClassReadDataFile_SpW2.klass, "initialize", VALUEFUNC(_wrap_new_ReadDataFile_SpW2), -1);
  SwigClassReadDataFile_SpW2.mark = 0;
  SwigClassReadDataFile_SpW2.destroy = (void (*)(void *)) free_comptonsoft_ReadDataFile_SpW2;
  SwigClassReadDataFile_SpW2.trackObjects = 0;
  
  SwigClassReadDataFile_NT.klass = rb_define_class_under(mComptonSoft, "ReadDataFile_NT", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadDataFile_NT, (void *) &SwigClassReadDataFile_NT);
  rb_define_alloc_func(SwigClassReadDataFile_NT.klass, _wrap_ReadDataFile_NT_allocate);
  rb_define_method(SwigClassReadDataFile_NT.klass, "initialize", VALUEFUNC(_wrap_new_ReadDataFile_NT), -1);
  SwigClassReadDataFile_NT.mark = 0;
  SwigClassReadDataFile_NT.destroy = (void (*)(void *)) free_comptonsoft_ReadDataFile_NT;
  SwigClassReadDataFile_NT.trackObjects = 0;
  
  SwigClassReadDataFile_NB0.klass = rb_define_class_under(mComptonSoft, "ReadDataFile_NB0", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadDataFile_NB0, (void *) &SwigClassReadDataFile_NB0);
  rb_define_alloc_func(SwigClassReadDataFile_NB0.klass, _wrap_ReadDataFile_NB0_allocate);
  rb_define_method(SwigClassReadDataFile_NB0.klass, "initialize", VALUEFUNC(_wrap_new_ReadDataFile_NB0), -1);
  SwigClassReadDataFile_NB0.mark = 0;
  SwigClassReadDataFile_NB0.destroy = (void (*)(void *)) free_comptonsoft_ReadDataFile_NB0;
  SwigClassReadDataFile_NB0.trackObjects = 0;
  
  SwigClassCorrectPHA.klass = rb_define_class_under(mComptonSoft, "CorrectPHA", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__CorrectPHA, (void *) &SwigClassCorrectPHA);
  rb_define_alloc_func(SwigClassCorrectPHA.klass, _wrap_CorrectPHA_allocate);
  rb_define_method(SwigClassCorrectPHA.klass, "initialize", VALUEFUNC(_wrap_new_CorrectPHA), -1);
  SwigClassCorrectPHA.mark = 0;
  SwigClassCorrectPHA.destroy = (void (*)(void *)) free_comptonsoft_CorrectPHA;
  SwigClassCorrectPHA.trackObjects = 0;
  
  SwigClassRecalculateEPI.klass = rb_define_class_under(mComptonSoft, "RecalculateEPI", ((swig_class *) SWIGTYPE_p_comptonsoft__CorrectPHA->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__RecalculateEPI, (void *) &SwigClassRecalculateEPI);
  rb_define_alloc_func(SwigClassRecalculateEPI.klass, _wrap_RecalculateEPI_allocate);
  rb_define_method(SwigClassRecalculateEPI.klass, "initialize", VALUEFUNC(_wrap_new_RecalculateEPI), -1);
  SwigClassRecalculateEPI.mark = 0;
  SwigClassRecalculateEPI.destroy = (void (*)(void *)) free_comptonsoft_RecalculateEPI;
  SwigClassRecalculateEPI.trackObjects = 0;
  
  SwigClassCalculatePedestalLevels.klass = rb_define_class_under(mComptonSoft, "CalculatePedestalLevels", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__CalculatePedestalLevels, (void *) &SwigClassCalculatePedestalLevels);
  rb_define_alloc_func(SwigClassCalculatePedestalLevels.klass, _wrap_CalculatePedestalLevels_allocate);
  rb_define_method(SwigClassCalculatePedestalLevels.klass, "initialize", VALUEFUNC(_wrap_new_CalculatePedestalLevels), -1);
  SwigClassCalculatePedestalLevels.mark = 0;
  SwigClassCalculatePedestalLevels.destroy = (void (*)(void *)) free_comptonsoft_CalculatePedestalLevels;
  SwigClassCalculatePedestalLevels.trackObjects = 0;
  
  SwigClassInitialConditionFilter.klass = rb_define_class_under(mComptonSoft, "InitialConditionFilter", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__InitialConditionFilter, (void *) &SwigClassInitialConditionFilter);
  rb_define_alloc_func(SwigClassInitialConditionFilter.klass, _wrap_InitialConditionFilter_allocate);
  rb_define_method(SwigClassInitialConditionFilter.klass, "initialize", VALUEFUNC(_wrap_new_InitialConditionFilter), -1);
  SwigClassInitialConditionFilter.mark = 0;
  SwigClassInitialConditionFilter.destroy = (void (*)(void *)) free_comptonsoft_InitialConditionFilter;
  SwigClassInitialConditionFilter.trackObjects = 0;
  
  SwigClassWeightByInitialDirection.klass = rb_define_class_under(mComptonSoft, "WeightByInitialDirection", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WeightByInitialDirection, (void *) &SwigClassWeightByInitialDirection);
  rb_define_alloc_func(SwigClassWeightByInitialDirection.klass, _wrap_WeightByInitialDirection_allocate);
  rb_define_method(SwigClassWeightByInitialDirection.klass, "initialize", VALUEFUNC(_wrap_new_WeightByInitialDirection), -1);
  SwigClassWeightByInitialDirection.mark = 0;
  SwigClassWeightByInitialDirection.destroy = (void (*)(void *)) free_comptonsoft_WeightByInitialDirection;
  SwigClassWeightByInitialDirection.trackObjects = 0;
  
  SwigClassRecalculateSimulationNoise.klass = rb_define_class_under(mComptonSoft, "RecalculateSimulationNoise", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__RecalculateSimulationNoise, (void *) &SwigClassRecalculateSimulationNoise);
  rb_define_alloc_func(SwigClassRecalculateSimulationNoise.klass, _wrap_RecalculateSimulationNoise_allocate);
  rb_define_method(SwigClassRecalculateSimulationNoise.klass, "initialize", VALUEFUNC(_wrap_new_RecalculateSimulationNoise), -1);
  SwigClassRecalculateSimulationNoise.mark = 0;
  SwigClassRecalculateSimulationNoise.destroy = (void (*)(void *)) free_comptonsoft_RecalculateSimulationNoise;
  SwigClassRecalculateSimulationNoise.trackObjects = 0;
  
  SwigClassComptonModeFilter.klass = rb_define_class_under(mComptonSoft, "ComptonModeFilter", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ComptonModeFilter, (void *) &SwigClassComptonModeFilter);
  rb_define_alloc_func(SwigClassComptonModeFilter.klass, _wrap_ComptonModeFilter_allocate);
  rb_define_method(SwigClassComptonModeFilter.klass, "initialize", VALUEFUNC(_wrap_new_ComptonModeFilter), -1);
  SwigClassComptonModeFilter.mark = 0;
  SwigClassComptonModeFilter.destroy = (void (*)(void *)) free_comptonsoft_ComptonModeFilter;
  SwigClassComptonModeFilter.trackObjects = 0;
  
  SwigClassSelectFullDeposit.klass = rb_define_class_under(mComptonSoft, "SelectFullDeposit", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SelectFullDeposit, (void *) &SwigClassSelectFullDeposit);
  rb_define_alloc_func(SwigClassSelectFullDeposit.klass, _wrap_SelectFullDeposit_allocate);
  rb_define_method(SwigClassSelectFullDeposit.klass, "initialize", VALUEFUNC(_wrap_new_SelectFullDeposit), -1);
  SwigClassSelectFullDeposit.mark = 0;
  SwigClassSelectFullDeposit.destroy = (void (*)(void *)) free_comptonsoft_SelectFullDeposit;
  SwigClassSelectFullDeposit.trackObjects = 0;
  
  SwigClassComptonEventFilter.klass = rb_define_class_under(mComptonSoft, "ComptonEventFilter", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ComptonEventFilter, (void *) &SwigClassComptonEventFilter);
  rb_define_alloc_func(SwigClassComptonEventFilter.klass, _wrap_ComptonEventFilter_allocate);
  rb_define_method(SwigClassComptonEventFilter.klass, "initialize", VALUEFUNC(_wrap_new_ComptonEventFilter), -1);
  rb_define_method(SwigClassComptonEventFilter.klass, "define_condition", VALUEFUNC(_wrap_ComptonEventFilter_define_condition), -1);
  rb_define_method(SwigClassComptonEventFilter.klass, "add_hit_pattern", VALUEFUNC(_wrap_ComptonEventFilter_add_hit_pattern), -1);
  rb_define_method(SwigClassComptonEventFilter.klass, "add_hit_pattern_key", VALUEFUNC(_wrap_ComptonEventFilter_add_hit_pattern_key), -1);
  rb_define_method(SwigClassComptonEventFilter.klass, "add_evs_key", VALUEFUNC(_wrap_ComptonEventFilter_add_evs_key), -1);
  rb_define_method(SwigClassComptonEventFilter.klass, "add_condition", VALUEFUNC(_wrap_ComptonEventFilter_add_condition), -1);
  SwigClassComptonEventFilter.mark = 0;
  SwigClassComptonEventFilter.destroy = (void (*)(void *)) free_comptonsoft_ComptonEventFilter;
  SwigClassComptonEventFilter.trackObjects = 0;
  
  SwigClassSelectEventsOnFocalPlane.klass = rb_define_class_under(mComptonSoft, "SelectEventsOnFocalPlane", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SelectEventsOnFocalPlane, (void *) &SwigClassSelectEventsOnFocalPlane);
  rb_define_alloc_func(SwigClassSelectEventsOnFocalPlane.klass, _wrap_SelectEventsOnFocalPlane_allocate);
  rb_define_method(SwigClassSelectEventsOnFocalPlane.klass, "initialize", VALUEFUNC(_wrap_new_SelectEventsOnFocalPlane), -1);
  SwigClassSelectEventsOnFocalPlane.mark = 0;
  SwigClassSelectEventsOnFocalPlane.destroy = (void (*)(void *)) free_comptonsoft_SelectEventsOnFocalPlane;
  SwigClassSelectEventsOnFocalPlane.trackObjects = 0;
  
  SwigClassSelectTime.klass = rb_define_class_under(mComptonSoft, "SelectTime", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SelectTime, (void *) &SwigClassSelectTime);
  rb_define_alloc_func(SwigClassSelectTime.klass, _wrap_SelectTime_allocate);
  rb_define_method(SwigClassSelectTime.klass, "initialize", VALUEFUNC(_wrap_new_SelectTime), -1);
  SwigClassSelectTime.mark = 0;
  SwigClassSelectTime.destroy = (void (*)(void *)) free_comptonsoft_SelectTime;
  SwigClassSelectTime.trackObjects = 0;
  
  SwigClassFilterByGoodTimeIntervals.klass = rb_define_class_under(mComptonSoft, "FilterByGoodTimeIntervals", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__FilterByGoodTimeIntervals, (void *) &SwigClassFilterByGoodTimeIntervals);
  rb_define_alloc_func(SwigClassFilterByGoodTimeIntervals.klass, _wrap_FilterByGoodTimeIntervals_allocate);
  rb_define_method(SwigClassFilterByGoodTimeIntervals.klass, "initialize", VALUEFUNC(_wrap_new_FilterByGoodTimeIntervals), -1);
  SwigClassFilterByGoodTimeIntervals.mark = 0;
  SwigClassFilterByGoodTimeIntervals.destroy = (void (*)(void *)) free_comptonsoft_FilterByGoodTimeIntervals;
  SwigClassFilterByGoodTimeIntervals.trackObjects = 0;
  
  SwigClassWriteHitTree.klass = rb_define_class_under(mComptonSoft, "WriteHitTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteHitTree, (void *) &SwigClassWriteHitTree);
  rb_define_alloc_func(SwigClassWriteHitTree.klass, _wrap_WriteHitTree_allocate);
  rb_define_method(SwigClassWriteHitTree.klass, "initialize", VALUEFUNC(_wrap_new_WriteHitTree), -1);
  SwigClassWriteHitTree.mark = 0;
  SwigClassWriteHitTree.destroy = (void (*)(void *)) free_comptonsoft_WriteHitTree;
  SwigClassWriteHitTree.trackObjects = 0;
  
  SwigClassWrite3x3EventTree.klass = rb_define_class_under(mComptonSoft, "Write3x3EventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__Write3x3EventTree, (void *) &SwigClassWrite3x3EventTree);
  rb_define_alloc_func(SwigClassWrite3x3EventTree.klass, _wrap_Write3x3EventTree_allocate);
  rb_define_method(SwigClassWrite3x3EventTree.klass, "initialize", VALUEFUNC(_wrap_new_Write3x3EventTree), -1);
  SwigClassWrite3x3EventTree.mark = 0;
  SwigClassWrite3x3EventTree.destroy = (void (*)(void *)) free_comptonsoft_Write3x3EventTree;
  SwigClassWrite3x3EventTree.trackObjects = 0;
  
  SwigClassReadHitTree.klass = rb_define_class_under(mComptonSoft, "ReadHitTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadHitTree, (void *) &SwigClassReadHitTree);
  rb_define_alloc_func(SwigClassReadHitTree.klass, _wrap_ReadHitTree_allocate);
  rb_define_method(SwigClassReadHitTree.klass, "initialize", VALUEFUNC(_wrap_new_ReadHitTree), -1);
  SwigClassReadHitTree.mark = 0;
  SwigClassReadHitTree.destroy = (void (*)(void *)) free_comptonsoft_ReadHitTree;
  SwigClassReadHitTree.trackObjects = 0;
  
  SwigClassReadHitTreeAsRawHits.klass = rb_define_class_under(mComptonSoft, "ReadHitTreeAsRawHits", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadHitTree->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadHitTreeAsRawHits, (void *) &SwigClassReadHitTreeAsRawHits);
  rb_define_alloc_func(SwigClassReadHitTreeAsRawHits.klass, _wrap_ReadHitTreeAsRawHits_allocate);
  rb_define_method(SwigClassReadHitTreeAsRawHits.klass, "initialize", VALUEFUNC(_wrap_new_ReadHitTreeAsRawHits), -1);
  SwigClassReadHitTreeAsRawHits.mark = 0;
  SwigClassReadHitTreeAsRawHits.destroy = (void (*)(void *)) free_comptonsoft_ReadHitTreeAsRawHits;
  SwigClassReadHitTreeAsRawHits.trackObjects = 0;
  
  SwigClassReadHitTreeAsDetectorHits.klass = rb_define_class_under(mComptonSoft, "ReadHitTreeAsDetectorHits", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadHitTreeAsRawHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadHitTreeAsDetectorHits, (void *) &SwigClassReadHitTreeAsDetectorHits);
  rb_define_alloc_func(SwigClassReadHitTreeAsDetectorHits.klass, _wrap_ReadHitTreeAsDetectorHits_allocate);
  rb_define_method(SwigClassReadHitTreeAsDetectorHits.klass, "initialize", VALUEFUNC(_wrap_new_ReadHitTreeAsDetectorHits), -1);
  SwigClassReadHitTreeAsDetectorHits.mark = 0;
  SwigClassReadHitTreeAsDetectorHits.destroy = (void (*)(void *)) free_comptonsoft_ReadHitTreeAsDetectorHits;
  SwigClassReadHitTreeAsDetectorHits.trackObjects = 0;
  
  SwigClassWriteEventTree.klass = rb_define_class_under(mComptonSoft, "WriteEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteEventTree, (void *) &SwigClassWriteEventTree);
  rb_define_alloc_func(SwigClassWriteEventTree.klass, _wrap_WriteEventTree_allocate);
  rb_define_method(SwigClassWriteEventTree.klass, "initialize", VALUEFUNC(_wrap_new_WriteEventTree), -1);
  SwigClassWriteEventTree.mark = 0;
  SwigClassWriteEventTree.destroy = (void (*)(void *)) free_comptonsoft_WriteEventTree;
  SwigClassWriteEventTree.trackObjects = 0;
  
  SwigClassReadEventTree.klass = rb_define_class_under(mComptonSoft, "ReadEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadEventTree, (void *) &SwigClassReadEventTree);
  rb_define_alloc_func(SwigClassReadEventTree.klass, _wrap_ReadEventTree_allocate);
  rb_define_method(SwigClassReadEventTree.klass, "initialize", VALUEFUNC(_wrap_new_ReadEventTree), -1);
  SwigClassReadEventTree.mark = 0;
  SwigClassReadEventTree.destroy = (void (*)(void *)) free_comptonsoft_ReadEventTree;
  SwigClassReadEventTree.trackObjects = 0;
  
  SwigClassReadEventTreeAsRawHits.klass = rb_define_class_under(mComptonSoft, "ReadEventTreeAsRawHits", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadEventTree->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadEventTreeAsRawHits, (void *) &SwigClassReadEventTreeAsRawHits);
  rb_define_alloc_func(SwigClassReadEventTreeAsRawHits.klass, _wrap_ReadEventTreeAsRawHits_allocate);
  rb_define_method(SwigClassReadEventTreeAsRawHits.klass, "initialize", VALUEFUNC(_wrap_new_ReadEventTreeAsRawHits), -1);
  SwigClassReadEventTreeAsRawHits.mark = 0;
  SwigClassReadEventTreeAsRawHits.destroy = (void (*)(void *)) free_comptonsoft_ReadEventTreeAsRawHits;
  SwigClassReadEventTreeAsRawHits.trackObjects = 0;
  
  SwigClassReadEventTreeAsDetectorHits.klass = rb_define_class_under(mComptonSoft, "ReadEventTreeAsDetectorHits", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadEventTreeAsRawHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadEventTreeAsDetectorHits, (void *) &SwigClassReadEventTreeAsDetectorHits);
  rb_define_alloc_func(SwigClassReadEventTreeAsDetectorHits.klass, _wrap_ReadEventTreeAsDetectorHits_allocate);
  rb_define_method(SwigClassReadEventTreeAsDetectorHits.klass, "initialize", VALUEFUNC(_wrap_new_ReadEventTreeAsDetectorHits), -1);
  SwigClassReadEventTreeAsDetectorHits.mark = 0;
  SwigClassReadEventTreeAsDetectorHits.destroy = (void (*)(void *)) free_comptonsoft_ReadEventTreeAsDetectorHits;
  SwigClassReadEventTreeAsDetectorHits.trackObjects = 0;
  
  SwigClassWriteComptonEventTree.klass = rb_define_class_under(mComptonSoft, "WriteComptonEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteComptonEventTree, (void *) &SwigClassWriteComptonEventTree);
  rb_define_alloc_func(SwigClassWriteComptonEventTree.klass, _wrap_WriteComptonEventTree_allocate);
  rb_define_method(SwigClassWriteComptonEventTree.klass, "initialize", VALUEFUNC(_wrap_new_WriteComptonEventTree), -1);
  SwigClassWriteComptonEventTree.mark = 0;
  SwigClassWriteComptonEventTree.destroy = (void (*)(void *)) free_comptonsoft_WriteComptonEventTree;
  SwigClassWriteComptonEventTree.trackObjects = 0;
  
  SwigClassReadComptonEventTree.klass = rb_define_class_under(mComptonSoft, "ReadComptonEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__EventReconstruction->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadComptonEventTree, (void *) &SwigClassReadComptonEventTree);
  rb_define_alloc_func(SwigClassReadComptonEventTree.klass, _wrap_ReadComptonEventTree_allocate);
  rb_define_method(SwigClassReadComptonEventTree.klass, "initialize", VALUEFUNC(_wrap_new_ReadComptonEventTree), -1);
  SwigClassReadComptonEventTree.mark = 0;
  SwigClassReadComptonEventTree.destroy = (void (*)(void *)) free_comptonsoft_ReadComptonEventTree;
  SwigClassReadComptonEventTree.trackObjects = 0;
  
  SwigClassHistogramPHA.klass = rb_define_class_under(mComptonSoft, "HistogramPHA", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramPHA, (void *) &SwigClassHistogramPHA);
  rb_define_alloc_func(SwigClassHistogramPHA.klass, _wrap_HistogramPHA_allocate);
  rb_define_method(SwigClassHistogramPHA.klass, "initialize", VALUEFUNC(_wrap_new_HistogramPHA), -1);
  SwigClassHistogramPHA.mark = 0;
  SwigClassHistogramPHA.destroy = (void (*)(void *)) free_comptonsoft_HistogramPHA;
  SwigClassHistogramPHA.trackObjects = 0;
  
  SwigClassHistogramEnergySpectrum.klass = rb_define_class_under(mComptonSoft, "HistogramEnergySpectrum", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramEnergySpectrum, (void *) &SwigClassHistogramEnergySpectrum);
  rb_define_alloc_func(SwigClassHistogramEnergySpectrum.klass, _wrap_HistogramEnergySpectrum_allocate);
  rb_define_method(SwigClassHistogramEnergySpectrum.klass, "initialize", VALUEFUNC(_wrap_new_HistogramEnergySpectrum), -1);
  SwigClassHistogramEnergySpectrum.mark = 0;
  SwigClassHistogramEnergySpectrum.destroy = (void (*)(void *)) free_comptonsoft_HistogramEnergySpectrum;
  SwigClassHistogramEnergySpectrum.trackObjects = 0;
  
  SwigClassHistogramEnergy1D.klass = rb_define_class_under(mComptonSoft, "HistogramEnergy1D", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramEnergy1D, (void *) &SwigClassHistogramEnergy1D);
  rb_define_alloc_func(SwigClassHistogramEnergy1D.klass, _wrap_HistogramEnergy1D_allocate);
  rb_define_method(SwigClassHistogramEnergy1D.klass, "initialize", VALUEFUNC(_wrap_new_HistogramEnergy1D), -1);
  SwigClassHistogramEnergy1D.mark = 0;
  SwigClassHistogramEnergy1D.destroy = (void (*)(void *)) free_comptonsoft_HistogramEnergy1D;
  SwigClassHistogramEnergy1D.trackObjects = 0;
  
  SwigClassHistogramEnergy2D.klass = rb_define_class_under(mComptonSoft, "HistogramEnergy2D", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramEnergy2D, (void *) &SwigClassHistogramEnergy2D);
  rb_define_alloc_func(SwigClassHistogramEnergy2D.klass, _wrap_HistogramEnergy2D_allocate);
  rb_define_method(SwigClassHistogramEnergy2D.klass, "initialize", VALUEFUNC(_wrap_new_HistogramEnergy2D), -1);
  SwigClassHistogramEnergy2D.mark = 0;
  SwigClassHistogramEnergy2D.destroy = (void (*)(void *)) free_comptonsoft_HistogramEnergy2D;
  SwigClassHistogramEnergy2D.trackObjects = 0;
  
  SwigClassHistogramARM.klass = rb_define_class_under(mComptonSoft, "HistogramARM", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramARM, (void *) &SwigClassHistogramARM);
  rb_define_alloc_func(SwigClassHistogramARM.klass, _wrap_HistogramARM_allocate);
  rb_define_method(SwigClassHistogramARM.klass, "initialize", VALUEFUNC(_wrap_new_HistogramARM), -1);
  SwigClassHistogramARM.mark = 0;
  SwigClassHistogramARM.destroy = (void (*)(void *)) free_comptonsoft_HistogramARM;
  SwigClassHistogramARM.trackObjects = 0;
  
  SwigClassHistogramARMByPositionMeasurement.klass = rb_define_class_under(mComptonSoft, "HistogramARMByPositionMeasurement", ((swig_class *) SWIGTYPE_p_comptonsoft__HistogramARM->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramARMByPositionMeasurement, (void *) &SwigClassHistogramARMByPositionMeasurement);
  rb_define_alloc_func(SwigClassHistogramARMByPositionMeasurement.klass, _wrap_HistogramARMByPositionMeasurement_allocate);
  rb_define_method(SwigClassHistogramARMByPositionMeasurement.klass, "initialize", VALUEFUNC(_wrap_new_HistogramARMByPositionMeasurement), -1);
  SwigClassHistogramARMByPositionMeasurement.mark = 0;
  SwigClassHistogramARMByPositionMeasurement.destroy = (void (*)(void *)) free_comptonsoft_HistogramARMByPositionMeasurement;
  SwigClassHistogramARMByPositionMeasurement.trackObjects = 0;
  
  SwigClassHistogramAzimuthAngle.klass = rb_define_class_under(mComptonSoft, "HistogramAzimuthAngle", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramAzimuthAngle, (void *) &SwigClassHistogramAzimuthAngle);
  rb_define_alloc_func(SwigClassHistogramAzimuthAngle.klass, _wrap_HistogramAzimuthAngle_allocate);
  rb_define_method(SwigClassHistogramAzimuthAngle.klass, "initialize", VALUEFUNC(_wrap_new_HistogramAzimuthAngle), -1);
  SwigClassHistogramAzimuthAngle.mark = 0;
  SwigClassHistogramAzimuthAngle.destroy = (void (*)(void *)) free_comptonsoft_HistogramAzimuthAngle;
  SwigClassHistogramAzimuthAngle.trackObjects = 0;
  
  SwigClassHistogram2DDeltaEnergyWithARM.klass = rb_define_class_under(mComptonSoft, "Histogram2DDeltaEnergyWithARM", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__Histogram2DDeltaEnergyWithARM, (void *) &SwigClassHistogram2DDeltaEnergyWithARM);
  rb_define_alloc_func(SwigClassHistogram2DDeltaEnergyWithARM.klass, _wrap_Histogram2DDeltaEnergyWithARM_allocate);
  rb_define_method(SwigClassHistogram2DDeltaEnergyWithARM.klass, "initialize", VALUEFUNC(_wrap_new_Histogram2DDeltaEnergyWithARM), -1);
  SwigClassHistogram2DDeltaEnergyWithARM.mark = 0;
  SwigClassHistogram2DDeltaEnergyWithARM.destroy = (void (*)(void *)) free_comptonsoft_Histogram2DDeltaEnergyWithARM;
  SwigClassHistogram2DDeltaEnergyWithARM.trackObjects = 0;
  
  SwigClassResponseMatrix.klass = rb_define_class_under(mComptonSoft, "ResponseMatrix", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ResponseMatrix, (void *) &SwigClassResponseMatrix);
  rb_define_alloc_func(SwigClassResponseMatrix.klass, _wrap_ResponseMatrix_allocate);
  rb_define_method(SwigClassResponseMatrix.klass, "initialize", VALUEFUNC(_wrap_new_ResponseMatrix), -1);
  SwigClassResponseMatrix.mark = 0;
  SwigClassResponseMatrix.destroy = (void (*)(void *)) free_comptonsoft_ResponseMatrix;
  SwigClassResponseMatrix.trackObjects = 0;
  
  SwigClassBackProjection.klass = rb_define_class_under(mComptonSoft, "BackProjection", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__BackProjection, (void *) &SwigClassBackProjection);
  rb_define_alloc_func(SwigClassBackProjection.klass, _wrap_BackProjection_allocate);
  rb_define_method(SwigClassBackProjection.klass, "initialize", VALUEFUNC(_wrap_new_BackProjection), -1);
  SwigClassBackProjection.mark = 0;
  SwigClassBackProjection.destroy = (void (*)(void *)) free_comptonsoft_BackProjection;
  SwigClassBackProjection.trackObjects = 0;
  
  SwigClassBackProjectionSky.klass = rb_define_class_under(mComptonSoft, "BackProjectionSky", ((swig_class *) SWIGTYPE_p_comptonsoft__BackProjection->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__BackProjectionSky, (void *) &SwigClassBackProjectionSky);
  rb_define_alloc_func(SwigClassBackProjectionSky.klass, _wrap_BackProjectionSky_allocate);
  rb_define_method(SwigClassBackProjectionSky.klass, "initialize", VALUEFUNC(_wrap_new_BackProjectionSky), -1);
  SwigClassBackProjectionSky.mark = 0;
  SwigClassBackProjectionSky.destroy = (void (*)(void *)) free_comptonsoft_BackProjectionSky;
  SwigClassBackProjectionSky.trackObjects = 0;
  
  SwigClassEfficiencyMapSky.klass = rb_define_class_under(mComptonSoft, "EfficiencyMapSky", ((swig_class *) SWIGTYPE_p_comptonsoft__BackProjection->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__EfficiencyMapSky, (void *) &SwigClassEfficiencyMapSky);
  rb_define_alloc_func(SwigClassEfficiencyMapSky.klass, _wrap_EfficiencyMapSky_allocate);
  rb_define_method(SwigClassEfficiencyMapSky.klass, "initialize", VALUEFUNC(_wrap_new_EfficiencyMapSky), -1);
  SwigClassEfficiencyMapSky.mark = 0;
  SwigClassEfficiencyMapSky.destroy = (void (*)(void *)) free_comptonsoft_EfficiencyMapSky;
  SwigClassEfficiencyMapSky.trackObjects = 0;
  
  SwigClassQuickAnalysisForDSD.klass = rb_define_class_under(mComptonSoft, "QuickAnalysisForDSD", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__QuickAnalysisForDSD, (void *) &SwigClassQuickAnalysisForDSD);
  rb_define_alloc_func(SwigClassQuickAnalysisForDSD.klass, _wrap_QuickAnalysisForDSD_allocate);
  rb_define_method(SwigClassQuickAnalysisForDSD.klass, "initialize", VALUEFUNC(_wrap_new_QuickAnalysisForDSD), -1);
  SwigClassQuickAnalysisForDSD.mark = 0;
  SwigClassQuickAnalysisForDSD.destroy = (void (*)(void *)) free_comptonsoft_QuickAnalysisForDSD;
  SwigClassQuickAnalysisForDSD.trackObjects = 0;
  
  SwigClassAssignTime.klass = rb_define_class_under(mComptonSoft, "AssignTime", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AssignTime, (void *) &SwigClassAssignTime);
  rb_define_alloc_func(SwigClassAssignTime.klass, _wrap_AssignTime_allocate);
  rb_define_method(SwigClassAssignTime.klass, "initialize", VALUEFUNC(_wrap_new_AssignTime), -1);
  SwigClassAssignTime.mark = 0;
  SwigClassAssignTime.destroy = (void (*)(void *)) free_comptonsoft_AssignTime;
  SwigClassAssignTime.trackObjects = 0;
  
  SwigClassDefineFrame.klass = rb_define_class_under(mComptonSoft, "DefineFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__DefineFrame, (void *) &SwigClassDefineFrame);
  rb_define_alloc_func(SwigClassDefineFrame.klass, _wrap_DefineFrame_allocate);
  rb_define_method(SwigClassDefineFrame.klass, "initialize", VALUEFUNC(_wrap_new_DefineFrame), -1);
  SwigClassDefineFrame.mark = 0;
  SwigClassDefineFrame.destroy = (void (*)(void *)) free_comptonsoft_DefineFrame;
  SwigClassDefineFrame.trackObjects = 0;
  
  SwigClassDefineEventDriven.klass = rb_define_class_under(mComptonSoft, "DefineEventDriven", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__DefineEventDriven, (void *) &SwigClassDefineEventDriven);
  rb_define_alloc_func(SwigClassDefineEventDriven.klass, _wrap_DefineEventDriven_allocate);
  rb_define_method(SwigClassDefineEventDriven.klass, "initialize", VALUEFUNC(_wrap_new_DefineEventDriven), -1);
  rb_define_method(SwigClassDefineEventDriven.klass, "module_id", VALUEFUNC(_wrap_DefineEventDriven_module_id), -1);
  SwigClassDefineEventDriven.mark = 0;
  SwigClassDefineEventDriven.destroy = (void (*)(void *)) free_comptonsoft_DefineEventDriven;
  SwigClassDefineEventDriven.trackObjects = 0;
  
  SwigClassConstructFrame.klass = rb_define_class_under(mComptonSoft, "ConstructFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__ConstructDetector->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ConstructFrame, (void *) &SwigClassConstructFrame);
  rb_define_alloc_func(SwigClassConstructFrame.klass, _wrap_ConstructFrame_allocate);
  rb_define_method(SwigClassConstructFrame.klass, "initialize", VALUEFUNC(_wrap_new_ConstructFrame), -1);
  SwigClassConstructFrame.mark = 0;
  SwigClassConstructFrame.destroy = (void (*)(void *)) free_comptonsoft_ConstructFrame;
  SwigClassConstructFrame.trackObjects = 0;
  
  SwigClassFillFrame.klass = rb_define_class_under(mComptonSoft, "FillFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__FillFrame, (void *) &SwigClassFillFrame);
  rb_define_alloc_func(SwigClassFillFrame.klass, _wrap_FillFrame_allocate);
  rb_define_method(SwigClassFillFrame.klass, "initialize", VALUEFUNC(_wrap_new_FillFrame), -1);
  SwigClassFillFrame.mark = 0;
  SwigClassFillFrame.destroy = (void (*)(void *)) free_comptonsoft_FillFrame;
  SwigClassFillFrame.trackObjects = 0;
  
  SwigClassLoadFrame.klass = rb_define_class_under(mComptonSoft, "LoadFrame", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__LoadFrame, (void *) &SwigClassLoadFrame);
  rb_define_alloc_func(SwigClassLoadFrame.klass, _wrap_LoadFrame_allocate);
  rb_define_method(SwigClassLoadFrame.klass, "initialize", VALUEFUNC(_wrap_new_LoadFrame), -1);
  SwigClassLoadFrame.mark = 0;
  SwigClassLoadFrame.destroy = (void (*)(void *)) free_comptonsoft_LoadFrame;
  SwigClassLoadFrame.trackObjects = 0;
  
  SwigClassLoadReducedFrame.klass = rb_define_class_under(mComptonSoft, "LoadReducedFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__LoadFrame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__LoadReducedFrame, (void *) &SwigClassLoadReducedFrame);
  rb_define_alloc_func(SwigClassLoadReducedFrame.klass, _wrap_LoadReducedFrame_allocate);
  rb_define_method(SwigClassLoadReducedFrame.klass, "initialize", VALUEFUNC(_wrap_new_LoadReducedFrame), -1);
  SwigClassLoadReducedFrame.mark = 0;
  SwigClassLoadReducedFrame.destroy = (void (*)(void *)) free_comptonsoft_LoadReducedFrame;
  SwigClassLoadReducedFrame.trackObjects = 0;
  
  SwigClassXrayEventCollection.klass = rb_define_class_under(mComptonSoft, "XrayEventCollection", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__XrayEventCollection, (void *) &SwigClassXrayEventCollection);
  rb_define_alloc_func(SwigClassXrayEventCollection.klass, _wrap_XrayEventCollection_allocate);
  rb_define_method(SwigClassXrayEventCollection.klass, "initialize", VALUEFUNC(_wrap_new_XrayEventCollection), -1);
  SwigClassXrayEventCollection.mark = 0;
  SwigClassXrayEventCollection.destroy = (void (*)(void *)) free_comptonsoft_XrayEventCollection;
  SwigClassXrayEventCollection.trackObjects = 0;
  
  SwigClassXrayEventSelection.klass = rb_define_class_under(mComptonSoft, "XrayEventSelection", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__XrayEventSelection, (void *) &SwigClassXrayEventSelection);
  rb_define_alloc_func(SwigClassXrayEventSelection.klass, _wrap_XrayEventSelection_allocate);
  rb_define_method(SwigClassXrayEventSelection.klass, "initialize", VALUEFUNC(_wrap_new_XrayEventSelection), -1);
  rb_define_method(SwigClassXrayEventSelection.klass, "add_condition", VALUEFUNC(_wrap_XrayEventSelection_add_condition), -1);
  SwigClassXrayEventSelection.mark = 0;
  SwigClassXrayEventSelection.destroy = (void (*)(void *)) free_comptonsoft_XrayEventSelection;
  SwigClassXrayEventSelection.trackObjects = 0;
  
  SwigClassAnalyzeFrame.klass = rb_define_class_under(mComptonSoft, "AnalyzeFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AnalyzeFrame, (void *) &SwigClassAnalyzeFrame);
  rb_define_alloc_func(SwigClassAnalyzeFrame.klass, _wrap_AnalyzeFrame_allocate);
  rb_define_method(SwigClassAnalyzeFrame.klass, "initialize", VALUEFUNC(_wrap_new_AnalyzeFrame), -1);
  SwigClassAnalyzeFrame.mark = 0;
  SwigClassAnalyzeFrame.destroy = (void (*)(void *)) free_comptonsoft_AnalyzeFrame;
  SwigClassAnalyzeFrame.trackObjects = 0;
  
  SwigClassWriteXrayEventTree.klass = rb_define_class_under(mComptonSoft, "WriteXrayEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteXrayEventTree, (void *) &SwigClassWriteXrayEventTree);
  rb_define_alloc_func(SwigClassWriteXrayEventTree.klass, _wrap_WriteXrayEventTree_allocate);
  rb_define_method(SwigClassWriteXrayEventTree.klass, "initialize", VALUEFUNC(_wrap_new_WriteXrayEventTree), -1);
  SwigClassWriteXrayEventTree.mark = 0;
  SwigClassWriteXrayEventTree.destroy = (void (*)(void *)) free_comptonsoft_WriteXrayEventTree;
  SwigClassWriteXrayEventTree.trackObjects = 0;
  
  SwigClassReadXrayEventTree.klass = rb_define_class_under(mComptonSoft, "ReadXrayEventTree", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ReadXrayEventTree, (void *) &SwigClassReadXrayEventTree);
  rb_define_alloc_func(SwigClassReadXrayEventTree.klass, _wrap_ReadXrayEventTree_allocate);
  rb_define_method(SwigClassReadXrayEventTree.klass, "initialize", VALUEFUNC(_wrap_new_ReadXrayEventTree), -1);
  SwigClassReadXrayEventTree.mark = 0;
  SwigClassReadXrayEventTree.destroy = (void (*)(void *)) free_comptonsoft_ReadXrayEventTree;
  SwigClassReadXrayEventTree.trackObjects = 0;
  
  SwigClassSortEventTreeWithTime.klass = rb_define_class_under(mComptonSoft, "SortEventTreeWithTime", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SortEventTreeWithTime, (void *) &SwigClassSortEventTreeWithTime);
  rb_define_alloc_func(SwigClassSortEventTreeWithTime.klass, _wrap_SortEventTreeWithTime_allocate);
  rb_define_method(SwigClassSortEventTreeWithTime.klass, "initialize", VALUEFUNC(_wrap_new_SortEventTreeWithTime), -1);
  SwigClassSortEventTreeWithTime.mark = 0;
  SwigClassSortEventTreeWithTime.destroy = (void (*)(void *)) free_comptonsoft_SortEventTreeWithTime;
  SwigClassSortEventTreeWithTime.trackObjects = 0;
  
  SwigClassWriteBadPixels.klass = rb_define_class_under(mComptonSoft, "WriteBadPixels", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteBadPixels, (void *) &SwigClassWriteBadPixels);
  rb_define_alloc_func(SwigClassWriteBadPixels.klass, _wrap_WriteBadPixels_allocate);
  rb_define_method(SwigClassWriteBadPixels.klass, "initialize", VALUEFUNC(_wrap_new_WriteBadPixels), -1);
  SwigClassWriteBadPixels.mark = 0;
  SwigClassWriteBadPixels.destroy = (void (*)(void *)) free_comptonsoft_WriteBadPixels;
  SwigClassWriteBadPixels.trackObjects = 0;
  
  SwigClassAnalyzeDarkFrame.klass = rb_define_class_under(mComptonSoft, "AnalyzeDarkFrame", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AnalyzeDarkFrame, (void *) &SwigClassAnalyzeDarkFrame);
  rb_define_alloc_func(SwigClassAnalyzeDarkFrame.klass, _wrap_AnalyzeDarkFrame_allocate);
  rb_define_method(SwigClassAnalyzeDarkFrame.klass, "initialize", VALUEFUNC(_wrap_new_AnalyzeDarkFrame), -1);
  SwigClassAnalyzeDarkFrame.mark = 0;
  SwigClassAnalyzeDarkFrame.destroy = (void (*)(void *)) free_comptonsoft_AnalyzeDarkFrame;
  SwigClassAnalyzeDarkFrame.trackObjects = 0;
  
  SwigClassLoadRootFrame.klass = rb_define_class_under(mComptonSoft, "LoadRootFrame", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__LoadRootFrame, (void *) &SwigClassLoadRootFrame);
  rb_define_alloc_func(SwigClassLoadRootFrame.klass, _wrap_LoadRootFrame_allocate);
  rb_define_method(SwigClassLoadRootFrame.klass, "initialize", VALUEFUNC(_wrap_new_LoadRootFrame), -1);
  SwigClassLoadRootFrame.mark = 0;
  SwigClassLoadRootFrame.destroy = (void (*)(void *)) free_comptonsoft_LoadRootFrame;
  SwigClassLoadRootFrame.trackObjects = 0;
  
  SwigClassDetectBadFrames.klass = rb_define_class_under(mComptonSoft, "DetectBadFrames", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__DetectBadFrames, (void *) &SwigClassDetectBadFrames);
  rb_define_alloc_func(SwigClassDetectBadFrames.klass, _wrap_DetectBadFrames_allocate);
  rb_define_method(SwigClassDetectBadFrames.klass, "initialize", VALUEFUNC(_wrap_new_DetectBadFrames), -1);
  SwigClassDetectBadFrames.mark = 0;
  SwigClassDetectBadFrames.destroy = (void (*)(void *)) free_comptonsoft_DetectBadFrames;
  SwigClassDetectBadFrames.trackObjects = 0;
  
  SwigClassSetBadFrames.klass = rb_define_class_under(mComptonSoft, "SetBadFrames", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetBadFrames, (void *) &SwigClassSetBadFrames);
  rb_define_alloc_func(SwigClassSetBadFrames.klass, _wrap_SetBadFrames_allocate);
  rb_define_method(SwigClassSetBadFrames.klass, "initialize", VALUEFUNC(_wrap_new_SetBadFrames), -1);
  SwigClassSetBadFrames.mark = 0;
  SwigClassSetBadFrames.destroy = (void (*)(void *)) free_comptonsoft_SetBadFrames;
  SwigClassSetBadFrames.trackObjects = 0;
  
  SwigClassSetDynamicPedestals.klass = rb_define_class_under(mComptonSoft, "SetDynamicPedestals", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetDynamicPedestals, (void *) &SwigClassSetDynamicPedestals);
  rb_define_alloc_func(SwigClassSetDynamicPedestals.klass, _wrap_SetDynamicPedestals_allocate);
  rb_define_method(SwigClassSetDynamicPedestals.klass, "initialize", VALUEFUNC(_wrap_new_SetDynamicPedestals), -1);
  SwigClassSetDynamicPedestals.mark = 0;
  SwigClassSetDynamicPedestals.destroy = (void (*)(void *)) free_comptonsoft_SetDynamicPedestals;
  SwigClassSetDynamicPedestals.trackObjects = 0;
  
  SwigClassSetPedestalsByMedian.klass = rb_define_class_under(mComptonSoft, "SetPedestalsByMedian", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SetPedestalsByMedian, (void *) &SwigClassSetPedestalsByMedian);
  rb_define_alloc_func(SwigClassSetPedestalsByMedian.klass, _wrap_SetPedestalsByMedian_allocate);
  rb_define_method(SwigClassSetPedestalsByMedian.klass, "initialize", VALUEFUNC(_wrap_new_SetPedestalsByMedian), -1);
  SwigClassSetPedestalsByMedian.mark = 0;
  SwigClassSetPedestalsByMedian.destroy = (void (*)(void *)) free_comptonsoft_SetPedestalsByMedian;
  SwigClassSetPedestalsByMedian.trackObjects = 0;
  
  SwigClassHistogramFramePedestal.klass = rb_define_class_under(mComptonSoft, "HistogramFramePedestal", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramFramePedestal, (void *) &SwigClassHistogramFramePedestal);
  rb_define_alloc_func(SwigClassHistogramFramePedestal.klass, _wrap_HistogramFramePedestal_allocate);
  rb_define_method(SwigClassHistogramFramePedestal.klass, "initialize", VALUEFUNC(_wrap_new_HistogramFramePedestal), -1);
  SwigClassHistogramFramePedestal.mark = 0;
  SwigClassHistogramFramePedestal.destroy = (void (*)(void *)) free_comptonsoft_HistogramFramePedestal;
  SwigClassHistogramFramePedestal.trackObjects = 0;
  
  SwigClassHistogramXrayEventSpectrum.klass = rb_define_class_under(mComptonSoft, "HistogramXrayEventSpectrum", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramXrayEventSpectrum, (void *) &SwigClassHistogramXrayEventSpectrum);
  rb_define_alloc_func(SwigClassHistogramXrayEventSpectrum.klass, _wrap_HistogramXrayEventSpectrum_allocate);
  rb_define_method(SwigClassHistogramXrayEventSpectrum.klass, "initialize", VALUEFUNC(_wrap_new_HistogramXrayEventSpectrum), -1);
  SwigClassHistogramXrayEventSpectrum.mark = 0;
  SwigClassHistogramXrayEventSpectrum.destroy = (void (*)(void *)) free_comptonsoft_HistogramXrayEventSpectrum;
  SwigClassHistogramXrayEventSpectrum.trackObjects = 0;
  
  SwigClassHistogramXrayEventAzimuthAngle.klass = rb_define_class_under(mComptonSoft, "HistogramXrayEventAzimuthAngle", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramXrayEventAzimuthAngle, (void *) &SwigClassHistogramXrayEventAzimuthAngle);
  rb_define_alloc_func(SwigClassHistogramXrayEventAzimuthAngle.klass, _wrap_HistogramXrayEventAzimuthAngle_allocate);
  rb_define_method(SwigClassHistogramXrayEventAzimuthAngle.klass, "initialize", VALUEFUNC(_wrap_new_HistogramXrayEventAzimuthAngle), -1);
  SwigClassHistogramXrayEventAzimuthAngle.mark = 0;
  SwigClassHistogramXrayEventAzimuthAngle.destroy = (void (*)(void *)) free_comptonsoft_HistogramXrayEventAzimuthAngle;
  SwigClassHistogramXrayEventAzimuthAngle.trackObjects = 0;
  
  SwigClassHistogramXrayEventProperties.klass = rb_define_class_under(mComptonSoft, "HistogramXrayEventProperties", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramXrayEventProperties, (void *) &SwigClassHistogramXrayEventProperties);
  rb_define_alloc_func(SwigClassHistogramXrayEventProperties.klass, _wrap_HistogramXrayEventProperties_allocate);
  rb_define_method(SwigClassHistogramXrayEventProperties.klass, "initialize", VALUEFUNC(_wrap_new_HistogramXrayEventProperties), -1);
  SwigClassHistogramXrayEventProperties.mark = 0;
  SwigClassHistogramXrayEventProperties.destroy = (void (*)(void *)) free_comptonsoft_HistogramXrayEventProperties;
  SwigClassHistogramXrayEventProperties.trackObjects = 0;
  
  SwigClassHistogramDecodedImage.klass = rb_define_class_under(mComptonSoft, "HistogramDecodedImage", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramDecodedImage, (void *) &SwigClassHistogramDecodedImage);
  rb_define_alloc_func(SwigClassHistogramDecodedImage.klass, _wrap_HistogramDecodedImage_allocate);
  rb_define_method(SwigClassHistogramDecodedImage.klass, "initialize", VALUEFUNC(_wrap_new_HistogramDecodedImage), -1);
  SwigClassHistogramDecodedImage.mark = 0;
  SwigClassHistogramDecodedImage.destroy = (void (*)(void *)) free_comptonsoft_HistogramDecodedImage;
  SwigClassHistogramDecodedImage.trackObjects = 0;
  
  SwigClassHistogramRawFrameImage.klass = rb_define_class_under(mComptonSoft, "HistogramRawFrameImage", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__HistogramRawFrameImage, (void *) &SwigClassHistogramRawFrameImage);
  rb_define_alloc_func(SwigClassHistogramRawFrameImage.klass, _wrap_HistogramRawFrameImage_allocate);
  rb_define_method(SwigClassHistogramRawFrameImage.klass, "initialize", VALUEFUNC(_wrap_new_HistogramRawFrameImage), -1);
  SwigClassHistogramRawFrameImage.mark = 0;
  SwigClassHistogramRawFrameImage.destroy = (void (*)(void *)) free_comptonsoft_HistogramRawFrameImage;
  SwigClassHistogramRawFrameImage.trackObjects = 0;
  
  SwigClassExtractXrayEventImage.klass = rb_define_class_under(mComptonSoft, "ExtractXrayEventImage", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ExtractXrayEventImage, (void *) &SwigClassExtractXrayEventImage);
  rb_define_alloc_func(SwigClassExtractXrayEventImage.klass, _wrap_ExtractXrayEventImage_allocate);
  rb_define_method(SwigClassExtractXrayEventImage.klass, "initialize", VALUEFUNC(_wrap_new_ExtractXrayEventImage), -1);
  SwigClassExtractXrayEventImage.mark = 0;
  SwigClassExtractXrayEventImage.destroy = (void (*)(void *)) free_comptonsoft_ExtractXrayEventImage;
  SwigClassExtractXrayEventImage.trackObjects = 0;
  
  SwigClassProcessCodedAperture.klass = rb_define_class_under(mComptonSoft, "ProcessCodedAperture", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ProcessCodedAperture, (void *) &SwigClassProcessCodedAperture);
  rb_define_alloc_func(SwigClassProcessCodedAperture.klass, _wrap_ProcessCodedAperture_allocate);
  rb_define_method(SwigClassProcessCodedAperture.klass, "initialize", VALUEFUNC(_wrap_new_ProcessCodedAperture), -1);
  SwigClassProcessCodedAperture.mark = 0;
  SwigClassProcessCodedAperture.destroy = (void (*)(void *)) free_comptonsoft_ProcessCodedAperture;
  SwigClassProcessCodedAperture.trackObjects = 0;
  
  SwigClassGetInputFilesFromDirectory.klass = rb_define_class_under(mComptonSoft, "GetInputFilesFromDirectory", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__GetInputFilesFromDirectory, (void *) &SwigClassGetInputFilesFromDirectory);
  rb_define_alloc_func(SwigClassGetInputFilesFromDirectory.klass, _wrap_GetInputFilesFromDirectory_allocate);
  rb_define_method(SwigClassGetInputFilesFromDirectory.klass, "initialize", VALUEFUNC(_wrap_new_GetInputFilesFromDirectory), -1);
  SwigClassGetInputFilesFromDirectory.mark = 0;
  SwigClassGetInputFilesFromDirectory.destroy = (void (*)(void *)) free_comptonsoft_GetInputFilesFromDirectory;
  SwigClassGetInputFilesFromDirectory.trackObjects = 0;
  
  SwigClassSelectEventsWithDetectorSpectrum.klass = rb_define_class_under(mComptonSoft, "SelectEventsWithDetectorSpectrum", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SelectEventsWithDetectorSpectrum, (void *) &SwigClassSelectEventsWithDetectorSpectrum);
  rb_define_alloc_func(SwigClassSelectEventsWithDetectorSpectrum.klass, _wrap_SelectEventsWithDetectorSpectrum_allocate);
  rb_define_method(SwigClassSelectEventsWithDetectorSpectrum.klass, "initialize", VALUEFUNC(_wrap_new_SelectEventsWithDetectorSpectrum), -1);
  SwigClassSelectEventsWithDetectorSpectrum.mark = 0;
  SwigClassSelectEventsWithDetectorSpectrum.destroy = (void (*)(void *)) free_comptonsoft_SelectEventsWithDetectorSpectrum;
  SwigClassSelectEventsWithDetectorSpectrum.trackObjects = 0;
  
  SwigClassExtractPhotoelectronTrajectory.klass = rb_define_class_under(mComptonSoft, "ExtractPhotoelectronTrajectory", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ExtractPhotoelectronTrajectory, (void *) &SwigClassExtractPhotoelectronTrajectory);
  rb_define_alloc_func(SwigClassExtractPhotoelectronTrajectory.klass, _wrap_ExtractPhotoelectronTrajectory_allocate);
  rb_define_method(SwigClassExtractPhotoelectronTrajectory.klass, "initialize", VALUEFUNC(_wrap_new_ExtractPhotoelectronTrajectory), -1);
  SwigClassExtractPhotoelectronTrajectory.mark = 0;
  SwigClassExtractPhotoelectronTrajectory.destroy = (void (*)(void *)) free_comptonsoft_ExtractPhotoelectronTrajectory;
  SwigClassExtractPhotoelectronTrajectory.trackObjects = 0;
  
  SwigClassListPrimaryGen.klass = rb_define_class_under(mComptonSoft, "ListPrimaryGen", ((swig_class *) SWIGTYPE_p_anlgeant4__BasicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ListPrimaryGen, (void *) &SwigClassListPrimaryGen);
  rb_define_alloc_func(SwigClassListPrimaryGen.klass, _wrap_ListPrimaryGen_allocate);
  rb_define_method(SwigClassListPrimaryGen.klass, "initialize", VALUEFUNC(_wrap_new_ListPrimaryGen), -1);
  SwigClassListPrimaryGen.mark = 0;
  SwigClassListPrimaryGen.destroy = (void (*)(void *)) free_comptonsoft_ListPrimaryGen;
  SwigClassListPrimaryGen.trackObjects = 0;
  
  SwigClassAHRadiationBackgroundPrimaryGen.klass = rb_define_class_under(mComptonSoft, "AHRadiationBackgroundPrimaryGen", ((swig_class *) SWIGTYPE_p_anlgeant4__IsotropicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGen, (void *) &SwigClassAHRadiationBackgroundPrimaryGen);
  rb_define_alloc_func(SwigClassAHRadiationBackgroundPrimaryGen.klass, _wrap_AHRadiationBackgroundPrimaryGen_allocate);
  rb_define_method(SwigClassAHRadiationBackgroundPrimaryGen.klass, "initialize", VALUEFUNC(_wrap_new_AHRadiationBackgroundPrimaryGen), -1);
  SwigClassAHRadiationBackgroundPrimaryGen.mark = 0;
  SwigClassAHRadiationBackgroundPrimaryGen.destroy = (void (*)(void *)) free_comptonsoft_AHRadiationBackgroundPrimaryGen;
  SwigClassAHRadiationBackgroundPrimaryGen.trackObjects = 0;
  
  SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.klass = rb_define_class_under(mComptonSoft, "AHRadiationBackgroundPrimaryGenSelectExposureTime", ((swig_class *) SWIGTYPE_p_anlgeant4__IsotropicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGenSelectExposureTime, (void *) &SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime);
  rb_define_alloc_func(SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.klass, _wrap_AHRadiationBackgroundPrimaryGenSelectExposureTime_allocate);
  rb_define_method(SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.klass, "initialize", VALUEFUNC(_wrap_new_AHRadiationBackgroundPrimaryGenSelectExposureTime), -1);
  SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.mark = 0;
  SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.destroy = (void (*)(void *)) free_comptonsoft_AHRadiationBackgroundPrimaryGenSelectExposureTime;
  SwigClassAHRadiationBackgroundPrimaryGenSelectExposureTime.trackObjects = 0;
  
  SwigClassRadioactiveDecayUserActionAssembly.klass = rb_define_class_under(mComptonSoft, "RadioactiveDecayUserActionAssembly", ((swig_class *) SWIGTYPE_p_anlgeant4__StandardUserActionAssembly->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__RadioactiveDecayUserActionAssembly, (void *) &SwigClassRadioactiveDecayUserActionAssembly);
  rb_define_alloc_func(SwigClassRadioactiveDecayUserActionAssembly.klass, _wrap_RadioactiveDecayUserActionAssembly_allocate);
  rb_define_method(SwigClassRadioactiveDecayUserActionAssembly.klass, "initialize", VALUEFUNC(_wrap_new_RadioactiveDecayUserActionAssembly), -1);
  SwigClassRadioactiveDecayUserActionAssembly.mark = 0;
  SwigClassRadioactiveDecayUserActionAssembly.destroy = (void (*)(void *)) free_comptonsoft_RadioactiveDecayUserActionAssembly;
  SwigClassRadioactiveDecayUserActionAssembly.trackObjects = 0;
  
  SwigClassActivationUserActionAssembly.klass = rb_define_class_under(mComptonSoft, "ActivationUserActionAssembly", ((swig_class *) SWIGTYPE_p_anlgeant4__StandardUserActionAssembly->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ActivationUserActionAssembly, (void *) &SwigClassActivationUserActionAssembly);
  rb_define_alloc_func(SwigClassActivationUserActionAssembly.klass, _wrap_ActivationUserActionAssembly_allocate);
  rb_define_method(SwigClassActivationUserActionAssembly.klass, "initialize", VALUEFUNC(_wrap_new_ActivationUserActionAssembly), -1);
  SwigClassActivationUserActionAssembly.mark = 0;
  SwigClassActivationUserActionAssembly.destroy = (void (*)(void *)) free_comptonsoft_ActivationUserActionAssembly;
  SwigClassActivationUserActionAssembly.trackObjects = 0;
  
  SwigClassSampleOpticalDepth.klass = rb_define_class_under(mComptonSoft, "SampleOpticalDepth", ((swig_class *) SWIGTYPE_p_anlgeant4__VAppendableUserActionAssembly->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SampleOpticalDepth, (void *) &SwigClassSampleOpticalDepth);
  rb_define_alloc_func(SwigClassSampleOpticalDepth.klass, _wrap_SampleOpticalDepth_allocate);
  rb_define_method(SwigClassSampleOpticalDepth.klass, "initialize", VALUEFUNC(_wrap_new_SampleOpticalDepth), -1);
  SwigClassSampleOpticalDepth.mark = 0;
  SwigClassSampleOpticalDepth.destroy = (void (*)(void *)) free_comptonsoft_SampleOpticalDepth;
  SwigClassSampleOpticalDepth.trackObjects = 0;
  
  SwigClassScatteringPickUpData.klass = rb_define_class_under(mComptonSoft, "ScatteringPickUpData", ((swig_class *) SWIGTYPE_p_anlgeant4__VAppendableUserActionAssembly->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ScatteringPickUpData, (void *) &SwigClassScatteringPickUpData);
  rb_define_alloc_func(SwigClassScatteringPickUpData.klass, _wrap_ScatteringPickUpData_allocate);
  rb_define_method(SwigClassScatteringPickUpData.klass, "initialize", VALUEFUNC(_wrap_new_ScatteringPickUpData), -1);
  SwigClassScatteringPickUpData.mark = 0;
  SwigClassScatteringPickUpData.destroy = (void (*)(void *)) free_comptonsoft_ScatteringPickUpData;
  SwigClassScatteringPickUpData.trackObjects = 0;
  
  SwigClassObservationPickUpData.klass = rb_define_class_under(mComptonSoft, "ObservationPickUpData", ((swig_class *) SWIGTYPE_p_anlgeant4__VAppendableUserActionAssembly->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__ObservationPickUpData, (void *) &SwigClassObservationPickUpData);
  rb_define_alloc_func(SwigClassObservationPickUpData.klass, _wrap_ObservationPickUpData_allocate);
  rb_define_method(SwigClassObservationPickUpData.klass, "initialize", VALUEFUNC(_wrap_new_ObservationPickUpData), -1);
  SwigClassObservationPickUpData.mark = 0;
  SwigClassObservationPickUpData.destroy = (void (*)(void *)) free_comptonsoft_ObservationPickUpData;
  SwigClassObservationPickUpData.trackObjects = 0;
  
  SwigClassPhysicsListManager.klass = rb_define_class_under(mComptonSoft, "PhysicsListManager", ((swig_class *) SWIGTYPE_p_anlgeant4__VANLPhysicsList->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__PhysicsListManager, (void *) &SwigClassPhysicsListManager);
  rb_define_alloc_func(SwigClassPhysicsListManager.klass, _wrap_PhysicsListManager_allocate);
  rb_define_method(SwigClassPhysicsListManager.klass, "initialize", VALUEFUNC(_wrap_new_PhysicsListManager), -1);
  SwigClassPhysicsListManager.mark = 0;
  SwigClassPhysicsListManager.destroy = (void (*)(void *)) free_comptonsoft_PhysicsListManager;
  SwigClassPhysicsListManager.trackObjects = 0;
  
  SwigClassAssignG4CopyNumber.klass = rb_define_class_under(mComptonSoft, "AssignG4CopyNumber", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__AssignG4CopyNumber, (void *) &SwigClassAssignG4CopyNumber);
  rb_define_alloc_func(SwigClassAssignG4CopyNumber.klass, _wrap_AssignG4CopyNumber_allocate);
  rb_define_method(SwigClassAssignG4CopyNumber.klass, "initialize", VALUEFUNC(_wrap_new_AssignG4CopyNumber), -1);
  SwigClassAssignG4CopyNumber.mark = 0;
  SwigClassAssignG4CopyNumber.destroy = (void (*)(void *)) free_comptonsoft_AssignG4CopyNumber;
  SwigClassAssignG4CopyNumber.trackObjects = 0;
  
  SwigClassInitialParticleTree.klass = rb_define_class_under(mComptonSoft, "InitialParticleTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__InitialParticleTree, (void *) &SwigClassInitialParticleTree);
  rb_define_alloc_func(SwigClassInitialParticleTree.klass, _wrap_InitialParticleTree_allocate);
  rb_define_method(SwigClassInitialParticleTree.klass, "initialize", VALUEFUNC(_wrap_new_InitialParticleTree), -1);
  SwigClassInitialParticleTree.mark = 0;
  SwigClassInitialParticleTree.destroy = (void (*)(void *)) free_comptonsoft_InitialParticleTree;
  SwigClassInitialParticleTree.trackObjects = 0;
  
  SwigClassDumpMass.klass = rb_define_class_under(mComptonSoft, "DumpMass", ((swig_class *) SWIGTYPE_p_anlnext__BasicModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__DumpMass, (void *) &SwigClassDumpMass);
  rb_define_alloc_func(SwigClassDumpMass.klass, _wrap_DumpMass_allocate);
  rb_define_method(SwigClassDumpMass.klass, "initialize", VALUEFUNC(_wrap_new_DumpMass), -1);
  SwigClassDumpMass.mark = 0;
  SwigClassDumpMass.destroy = (void (*)(void *)) free_comptonsoft_DumpMass;
  SwigClassDumpMass.trackObjects = 0;
  
  SwigClassWriteObservationTree.klass = rb_define_class_under(mComptonSoft, "WriteObservationTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__WriteObservationTree, (void *) &SwigClassWriteObservationTree);
  rb_define_alloc_func(SwigClassWriteObservationTree.klass, _wrap_WriteObservationTree_allocate);
  rb_define_method(SwigClassWriteObservationTree.klass, "initialize", VALUEFUNC(_wrap_new_WriteObservationTree), -1);
  SwigClassWriteObservationTree.mark = 0;
  SwigClassWriteObservationTree.destroy = (void (*)(void *)) free_comptonsoft_WriteObservationTree;
  SwigClassWriteObservationTree.trackObjects = 0;
  
  SwigClassSimulateCXBShieldPlate.klass = rb_define_class_under(mComptonSoft, "SimulateCXBShieldPlate", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__SimulateCXBShieldPlate, (void *) &SwigClassSimulateCXBShieldPlate);
  rb_define_alloc_func(SwigClassSimulateCXBShieldPlate.klass, _wrap_SimulateCXBShieldPlate_allocate);
  rb_define_method(SwigClassSimulateCXBShieldPlate.klass, "initialize", VALUEFUNC(_wrap_new_SimulateCXBShieldPlate), -1);
  SwigClassSimulateCXBShieldPlate.mark = 0;
  SwigClassSimulateCXBShieldPlate.destroy = (void (*)(void *)) free_comptonsoft_SimulateCXBShieldPlate;
  SwigClassSimulateCXBShieldPlate.trackObjects = 0;
  
  SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.klass = rb_define_class_under(mComptonSoft, "RescaleSimulationNoiseOfSGDSiUntriggered", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__RescaleSimulationNoiseOfSGDSiUntriggered, (void *) &SwigClassRescaleSimulationNoiseOfSGDSiUntriggered);
  rb_define_alloc_func(SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.klass, _wrap_RescaleSimulationNoiseOfSGDSiUntriggered_allocate);
  rb_define_method(SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.klass, "initialize", VALUEFUNC(_wrap_new_RescaleSimulationNoiseOfSGDSiUntriggered), -1);
  SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.mark = 0;
  SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.destroy = (void (*)(void *)) free_comptonsoft_RescaleSimulationNoiseOfSGDSiUntriggered;
  SwigClassRescaleSimulationNoiseOfSGDSiUntriggered.trackObjects = 0;
  
  SwigClassUniformlyRandomizeEPI.klass = rb_define_class_under(mComptonSoft, "UniformlyRandomizeEPI", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_comptonsoft__UniformlyRandomizeEPI, (void *) &SwigClassUniformlyRandomizeEPI);
  rb_define_alloc_func(SwigClassUniformlyRandomizeEPI.klass, _wrap_UniformlyRandomizeEPI_allocate);
  rb_define_method(SwigClassUniformlyRandomizeEPI.klass, "initialize", VALUEFUNC(_wrap_new_UniformlyRandomizeEPI), -1);
  SwigClassUniformlyRandomizeEPI.mark = 0;
  SwigClassUniformlyRandomizeEPI.destroy = (void (*)(void *)) free_comptonsoft_UniformlyRandomizeEPI;
  SwigClassUniformlyRandomizeEPI.trackObjects = 0;
}

